
TP_BUS_RESEAU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  08009a78  08009a78  00019a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1d8  0800a1d8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1d8  0800a1d8  0001a1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1e0  0800a1e0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1e0  0800a1e0  0001a1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1e4  0800a1e4  0001a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a1e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  200001e0  0800a3c8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800a3c8  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001059f  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c15  00000000  00000000  000307f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00033408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4b  00000000  00000000  00034160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000424c  00000000  00000000  00034bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013bde  00000000  00000000  00038df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1447  00000000  00000000  0004c9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b30  00000000  00000000  0011de1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0012294c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009a5c 	.word	0x08009a5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009a5c 	.word	0x08009a5c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b970 	b.w	8000fa0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <BMP280_Init>:

/**
  * @brief: Initialize BMP280
  */
void BMP280_Init()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	bmp280_id_check();
 8000fa8:	f000 f812 	bl	8000fd0 <bmp280_id_check>
	bmp280_set_power_mode(NORMAL_MODE);
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 f853 	bl	8001058 <bmp280_set_power_mode>
	bmp280_set_Pressure_oversampling(PRESS_OVERSAMP_16X);
 8000fb2:	2004      	movs	r0, #4
 8000fb4:	f000 f8dc 	bl	8001170 <bmp280_set_Pressure_oversampling>
	bmp280_set_Temperature_oversampling(TEMP_OVERSAMP_2X);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f000 f96d 	bl	8001298 <bmp280_set_Temperature_oversampling>
	bmp280_get_calib_param();
 8000fbe:	f000 f9fb 	bl	80013b8 <bmp280_get_calib_param>
	printf("successfully BMP280 init\r\n");
 8000fc2:	4802      	ldr	r0, [pc, #8]	; (8000fcc <BMP280_Init+0x28>)
 8000fc4:	f005 fee2 	bl	8006d8c <puts>

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	08009a78 	.word	0x08009a78

08000fd0 <bmp280_id_check>:
/**
  * @brief: bmp280_id_check
  */
uint8_t bmp280_id_check()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef hi2c2_status = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	/*ID check*/
	//BMP280_CHIP_ID_REG = 0XD0,BMP280_CHIP_ID_VAL = 0X58
	uint8_t id_addr_val[3] = {0xD0,0x58,0x00};
 8000fda:	4a1a      	ldr	r2, [pc, #104]	; (8001044 <bmp280_id_check+0x74>)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	8019      	strh	r1, [r3, #0]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	0c12      	lsrs	r2, r2, #16
 8000fe8:	701a      	strb	r2, [r3, #0]
	hi2c2_status = HAL_I2C_Mem_Read(&hi2c1,BMP280_I2C_ADDR,id_addr_val[0],1,&id_addr_val[2],1,1000);
 8000fea:	793b      	ldrb	r3, [r7, #4]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2301      	movs	r3, #1
 8001000:	21ee      	movs	r1, #238	; 0xee
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <bmp280_id_check+0x78>)
 8001004:	f002 fd52 	bl	8003aac <HAL_I2C_Mem_Read>
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK!=hi2c2_status){
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <bmp280_id_check+0x4c>
		printf("get part_id error\r\n");
 8001012:	480e      	ldr	r0, [pc, #56]	; (800104c <bmp280_id_check+0x7c>)
 8001014:	f005 feba 	bl	8006d8c <puts>
		return 1;
 8001018:	2301      	movs	r3, #1
 800101a:	e00e      	b.n	800103a <bmp280_id_check+0x6a>
	}
	if(id_addr_val[1]!=id_addr_val[2]){
 800101c:	797a      	ldrb	r2, [r7, #5]
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	429a      	cmp	r2, r3
 8001022:	d004      	beq.n	800102e <bmp280_id_check+0x5e>
		printf("bmp280_validate_id is error\r\n");
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <bmp280_id_check+0x80>)
 8001026:	f005 feb1 	bl	8006d8c <puts>
		return 1;
 800102a:	2301      	movs	r3, #1
 800102c:	e005      	b.n	800103a <bmp280_id_check+0x6a>
	}
		printf("bmp280_id:%02X\r\n",id_addr_val[2]);
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	4619      	mov	r1, r3
 8001032:	4808      	ldr	r0, [pc, #32]	; (8001054 <bmp280_id_check+0x84>)
 8001034:	f005 fe44 	bl	8006cc0 <iprintf>
	return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	08009adc 	.word	0x08009adc
 8001048:	20000240 	.word	0x20000240
 800104c:	08009a94 	.word	0x08009a94
 8001050:	08009aa8 	.word	0x08009aa8
 8001054:	08009ac8 	.word	0x08009ac8

08001058 <bmp280_set_power_mode>:
}
/**
  * @brief: bmp280_set_power_mode
  */
uint8_t bmp280_set_power_mode(bmp280_power_mode mode)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af04      	add	r7, sp, #16
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	uint8_t dev_mode = 0x00;
 8001062:	2300      	movs	r3, #0
 8001064:	75fb      	strb	r3, [r7, #23]
	    switch (mode) {
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d00b      	beq.n	8001084 <bmp280_set_power_mode+0x2c>
 800106c:	2b02      	cmp	r3, #2
 800106e:	dc0c      	bgt.n	800108a <bmp280_set_power_mode+0x32>
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <bmp280_set_power_mode+0x26>
 8001074:	2b01      	cmp	r3, #1
 8001076:	d108      	bne.n	800108a <bmp280_set_power_mode+0x32>
	        case FORCED_MODE:{
	        	dev_mode = (uint8_t)BMP280_FORCED_MODE;
 8001078:	2301      	movs	r3, #1
 800107a:	75fb      	strb	r3, [r7, #23]
	            break;
 800107c:	e007      	b.n	800108e <bmp280_set_power_mode+0x36>
	        }
	        case SLEEP_MODE: {
	            dev_mode = (uint8_t)BMP280_SLEEP_MODE;
 800107e:	2300      	movs	r3, #0
 8001080:	75fb      	strb	r3, [r7, #23]
	            break;
 8001082:	e004      	b.n	800108e <bmp280_set_power_mode+0x36>
	        }
	        case NORMAL_MODE: {
	            dev_mode = (uint8_t)BMP280_NORMAL_MODE;
 8001084:	2303      	movs	r3, #3
 8001086:	75fb      	strb	r3, [r7, #23]
	            break;
 8001088:	e001      	b.n	800108e <bmp280_set_power_mode+0x36>
	        }
	        default:
	            return 1;
 800108a:	2301      	movs	r3, #1
 800108c:	e063      	b.n	8001156 <bmp280_set_power_mode+0xfe>
	    }

		HAL_StatusTypeDef hi2c1_status = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	75bb      	strb	r3, [r7, #22]
		//BMP280_CTRL_MEAS_REG=0XF4
		uint8_t mode_addr_val[3] = {BMP280_CTRL_MEAS_REG,0x00,dev_mode};
 8001092:	23f4      	movs	r3, #244	; 0xf4
 8001094:	743b      	strb	r3, [r7, #16]
 8001096:	2300      	movs	r3, #0
 8001098:	747b      	strb	r3, [r7, #17]
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	74bb      	strb	r3, [r7, #18]
		uint8_t reg_value;

		hi2c1_status = HAL_I2C_Mem_Read(&hi2c1,BMP280_I2C_ADDR,mode_addr_val[0],1,&mode_addr_val[1],1,1000);
 800109e:	7c3b      	ldrb	r3, [r7, #16]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2301      	movs	r3, #1
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	3301      	adds	r3, #1
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	21ee      	movs	r1, #238	; 0xee
 80010b8:	4829      	ldr	r0, [pc, #164]	; (8001160 <bmp280_set_power_mode+0x108>)
 80010ba:	f002 fcf7 	bl	8003aac <HAL_I2C_Mem_Read>
 80010be:	4603      	mov	r3, r0
 80010c0:	75bb      	strb	r3, [r7, #22]
		if(HAL_OK!=hi2c1_status){
 80010c2:	7dbb      	ldrb	r3, [r7, #22]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d004      	beq.n	80010d2 <bmp280_set_power_mode+0x7a>
			printf("get bmp280_power_mode error\r\n");
 80010c8:	4826      	ldr	r0, [pc, #152]	; (8001164 <bmp280_set_power_mode+0x10c>)
 80010ca:	f005 fe5f 	bl	8006d8c <puts>
			return 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e041      	b.n	8001156 <bmp280_set_power_mode+0xfe>
		}
			//printf("bmp280 current value in regs 0xF4:%02X\r\n",mode_addr_val[1]);

			// clear bit 0 1 and set new value of mode
			reg_value = (mode_addr_val[1] & 0xFC) | (mode_addr_val[2] & 0x03);
 80010d2:	7c7b      	ldrb	r3, [r7, #17]
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	f023 0303 	bic.w	r3, r3, #3
 80010da:	b25a      	sxtb	r2, r3
 80010dc:	7cbb      	ldrb	r3, [r7, #18]
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	73fb      	strb	r3, [r7, #15]

		hi2c1_status = HAL_I2C_Mem_Write(&hi2c1,BMP280_I2C_ADDR,mode_addr_val[0],1,&reg_value,1,1000);
 80010ee:	7c3b      	ldrb	r3, [r7, #16]
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f107 030f 	add.w	r3, r7, #15
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	21ee      	movs	r1, #238	; 0xee
 8001106:	4816      	ldr	r0, [pc, #88]	; (8001160 <bmp280_set_power_mode+0x108>)
 8001108:	f002 fbd6 	bl	80038b8 <HAL_I2C_Mem_Write>
 800110c:	4603      	mov	r3, r0
 800110e:	75bb      	strb	r3, [r7, #22]
		if(HAL_OK!=hi2c1_status){
 8001110:	7dbb      	ldrb	r3, [r7, #22]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <bmp280_set_power_mode+0xc8>
			printf("bmp280_set_power_mode error\r\n");
 8001116:	4814      	ldr	r0, [pc, #80]	; (8001168 <bmp280_set_power_mode+0x110>)
 8001118:	f005 fe38 	bl	8006d8c <puts>
			return 1;
 800111c:	2301      	movs	r3, #1
 800111e:	e01a      	b.n	8001156 <bmp280_set_power_mode+0xfe>
		}
			//printf("bmp280_set_power_mode success\r\n");

		hi2c1_status = HAL_I2C_Mem_Read(&hi2c1,BMP280_I2C_ADDR,mode_addr_val[0],1,&mode_addr_val[1],1,1000);
 8001120:	7c3b      	ldrb	r3, [r7, #16]
 8001122:	b29a      	uxth	r2, r3
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2301      	movs	r3, #1
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	3301      	adds	r3, #1
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	21ee      	movs	r1, #238	; 0xee
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <bmp280_set_power_mode+0x108>)
 800113c:	f002 fcb6 	bl	8003aac <HAL_I2C_Mem_Read>
 8001140:	4603      	mov	r3, r0
 8001142:	75bb      	strb	r3, [r7, #22]
		if(HAL_OK!=hi2c1_status){
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <bmp280_set_power_mode+0xfc>
			printf("get bmp280_power_mode error after configure\r\n");
 800114a:	4808      	ldr	r0, [pc, #32]	; (800116c <bmp280_set_power_mode+0x114>)
 800114c:	f005 fe1e 	bl	8006d8c <puts>
			return 1;
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <bmp280_set_power_mode+0xfe>
			}
			//printf("bmp280  value in regs after configure :%02X\r\n",mode_addr_val[1]);
			return 0;
 8001154:	2300      	movs	r3, #0

}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000240 	.word	0x20000240
 8001164:	08009af4 	.word	0x08009af4
 8001168:	08009b14 	.word	0x08009b14
 800116c:	08009b34 	.word	0x08009b34

08001170 <bmp280_set_Pressure_oversampling>:
/**
  * @brief: bmp280_set_Pressure_oversampling
  */
uint8_t bmp280_set_Pressure_oversampling(bmp280_pressure_mode mode )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af04      	add	r7, sp, #16
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	   uint8_t value = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	737b      	strb	r3, [r7, #13]
	   uint8_t temp  = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]
	   uint8_t reg_value  = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	733b      	strb	r3, [r7, #12]

	    switch (mode) {
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b04      	cmp	r3, #4
 800118a:	d81c      	bhi.n	80011c6 <bmp280_set_Pressure_oversampling+0x56>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <bmp280_set_Pressure_oversampling+0x24>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a9 	.word	0x080011a9
 8001198:	080011af 	.word	0x080011af
 800119c:	080011b5 	.word	0x080011b5
 80011a0:	080011bb 	.word	0x080011bb
 80011a4:	080011c1 	.word	0x080011c1
	    case PRESS_OVERSAMP_1X:
	        temp = BMP280_OVERSAMP_1X;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
	        break;
 80011ac:	e00d      	b.n	80011ca <bmp280_set_Pressure_oversampling+0x5a>

	    case PRESS_OVERSAMP_2X:
	        temp = BMP280_OVERSAMP_2X;
 80011ae:	2302      	movs	r3, #2
 80011b0:	73fb      	strb	r3, [r7, #15]
	        break;
 80011b2:	e00a      	b.n	80011ca <bmp280_set_Pressure_oversampling+0x5a>

	    case PRESS_OVERSAMP_4X:
	        temp = BMP280_OVERSAMP_4X;
 80011b4:	2303      	movs	r3, #3
 80011b6:	73fb      	strb	r3, [r7, #15]
	        break;
 80011b8:	e007      	b.n	80011ca <bmp280_set_Pressure_oversampling+0x5a>

	    case PRESS_OVERSAMP_8X:
	        temp = BMP280_OVERSAMP_8X;
 80011ba:	2304      	movs	r3, #4
 80011bc:	73fb      	strb	r3, [r7, #15]
	        break;
 80011be:	e004      	b.n	80011ca <bmp280_set_Pressure_oversampling+0x5a>

	    case PRESS_OVERSAMP_16X:
	        temp = BMP280_OVERSAMP_16X;
 80011c0:	2305      	movs	r3, #5
 80011c2:	73fb      	strb	r3, [r7, #15]
	        break;
 80011c4:	e001      	b.n	80011ca <bmp280_set_Pressure_oversampling+0x5a>

	    default:
	        return 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e059      	b.n	800127e <bmp280_set_Pressure_oversampling+0x10e>
	    }
	    HAL_StatusTypeDef hi2c1_status = 0x00;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73bb      	strb	r3, [r7, #14]

		hi2c1_status = HAL_I2C_Mem_Read(&hi2c1,BMP280_I2C_ADDR,BMP280_CTRL_MEAS_REG,1,&value,1,1000);
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	f107 030d 	add.w	r3, r7, #13
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	22f4      	movs	r2, #244	; 0xf4
 80011e2:	21ee      	movs	r1, #238	; 0xee
 80011e4:	4828      	ldr	r0, [pc, #160]	; (8001288 <bmp280_set_Pressure_oversampling+0x118>)
 80011e6:	f002 fc61 	bl	8003aac <HAL_I2C_Mem_Read>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73bb      	strb	r3, [r7, #14]
		if(HAL_OK!=hi2c1_status){
 80011ee:	7bbb      	ldrb	r3, [r7, #14]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <bmp280_set_Pressure_oversampling+0x8e>
			printf("get bmp280_Pressure_oversampling_param error\r\n");
 80011f4:	4825      	ldr	r0, [pc, #148]	; (800128c <bmp280_set_Pressure_oversampling+0x11c>)
 80011f6:	f005 fdc9 	bl	8006d8c <puts>
			return 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e03f      	b.n	800127e <bmp280_set_Pressure_oversampling+0x10e>
		}

		// clear bit 2 3 4  and set new value of mode
		reg_value = ( value & 0xE3) | ( (temp<<2) & 0x1C);
 80011fe:	7b7b      	ldrb	r3, [r7, #13]
 8001200:	b25b      	sxtb	r3, r3
 8001202:	f023 031c 	bic.w	r3, r3, #28
 8001206:	b25a      	sxtb	r2, r3
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	b25b      	sxtb	r3, r3
 800120e:	f003 031c 	and.w	r3, r3, #28
 8001212:	b25b      	sxtb	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b25b      	sxtb	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	733b      	strb	r3, [r7, #12]

		hi2c1_status = HAL_I2C_Mem_Write(&hi2c1,BMP280_I2C_ADDR,BMP280_CTRL_MEAS_REG,1,&reg_value,1,1000);
 800121c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	2301      	movs	r3, #1
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	22f4      	movs	r2, #244	; 0xf4
 8001230:	21ee      	movs	r1, #238	; 0xee
 8001232:	4815      	ldr	r0, [pc, #84]	; (8001288 <bmp280_set_Pressure_oversampling+0x118>)
 8001234:	f002 fb40 	bl	80038b8 <HAL_I2C_Mem_Write>
 8001238:	4603      	mov	r3, r0
 800123a:	73bb      	strb	r3, [r7, #14]
		if(HAL_OK!=hi2c1_status){
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <bmp280_set_Pressure_oversampling+0xdc>
			printf("bmp280_set_Pressure_oversampling error\r\n");
 8001242:	4813      	ldr	r0, [pc, #76]	; (8001290 <bmp280_set_Pressure_oversampling+0x120>)
 8001244:	f005 fda2 	bl	8006d8c <puts>
			return 1;
 8001248:	2301      	movs	r3, #1
 800124a:	e018      	b.n	800127e <bmp280_set_Pressure_oversampling+0x10e>
		}
		//printf("successfully BMP280 set Pressure_oversampling\r\n");

		hi2c1_status = HAL_I2C_Mem_Read(&hi2c1,BMP280_I2C_ADDR,BMP280_CTRL_MEAS_REG,1,&value,1,1000);
 800124c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2301      	movs	r3, #1
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	f107 030d 	add.w	r3, r7, #13
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	22f4      	movs	r2, #244	; 0xf4
 8001260:	21ee      	movs	r1, #238	; 0xee
 8001262:	4809      	ldr	r0, [pc, #36]	; (8001288 <bmp280_set_Pressure_oversampling+0x118>)
 8001264:	f002 fc22 	bl	8003aac <HAL_I2C_Mem_Read>
 8001268:	4603      	mov	r3, r0
 800126a:	73bb      	strb	r3, [r7, #14]
		if(HAL_OK!=hi2c1_status){
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <bmp280_set_Pressure_oversampling+0x10c>
		printf("get bmp280_Pressure_oversampling_param after configure error\r\n");
 8001272:	4808      	ldr	r0, [pc, #32]	; (8001294 <bmp280_set_Pressure_oversampling+0x124>)
 8001274:	f005 fd8a 	bl	8006d8c <puts>
		return 1;
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <bmp280_set_Pressure_oversampling+0x10e>
		}
		//printf("bmp280_set_Pressure_oversampling value in regs after configure :%02X\r\n",value);

		return 0;
 800127c:	2300      	movs	r3, #0

}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000240 	.word	0x20000240
 800128c:	08009b64 	.word	0x08009b64
 8001290:	08009b94 	.word	0x08009b94
 8001294:	08009bbc 	.word	0x08009bbc

08001298 <bmp280_set_Temperature_oversampling>:
/**
  * @brief: bmp280_set_Temperature_oversampling
  */
uint8_t bmp280_set_Temperature_oversampling(bmp280_temperature_mode mode )
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af04      	add	r7, sp, #16
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
		   uint8_t value = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	737b      	strb	r3, [r7, #13]
		   uint8_t temp  = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
		   uint8_t reg_value  = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	733b      	strb	r3, [r7, #12]

		    switch (mode) {
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b04      	cmp	r3, #4
 80012b2:	d81c      	bhi.n	80012ee <bmp280_set_Temperature_oversampling+0x56>
 80012b4:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <bmp280_set_Temperature_oversampling+0x24>)
 80012b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	080012d1 	.word	0x080012d1
 80012c0:	080012d7 	.word	0x080012d7
 80012c4:	080012dd 	.word	0x080012dd
 80012c8:	080012e3 	.word	0x080012e3
 80012cc:	080012e9 	.word	0x080012e9
		    case TEMP_OVERSAMP_1X:
		        temp = BMP280_OVERSAMP_1X;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
		        break;
 80012d4:	e00d      	b.n	80012f2 <bmp280_set_Temperature_oversampling+0x5a>

		    case TEMP_OVERSAMP_2X:
		        temp = BMP280_OVERSAMP_2X;
 80012d6:	2302      	movs	r3, #2
 80012d8:	73fb      	strb	r3, [r7, #15]
		        break;
 80012da:	e00a      	b.n	80012f2 <bmp280_set_Temperature_oversampling+0x5a>

		    case TEMP_OVERSAMP_4X:
		        temp = BMP280_OVERSAMP_4X;
 80012dc:	2303      	movs	r3, #3
 80012de:	73fb      	strb	r3, [r7, #15]
		        break;
 80012e0:	e007      	b.n	80012f2 <bmp280_set_Temperature_oversampling+0x5a>

		    case TEMP_OVERSAMP_8X:
		        temp = BMP280_OVERSAMP_8X;
 80012e2:	2304      	movs	r3, #4
 80012e4:	73fb      	strb	r3, [r7, #15]
		        break;
 80012e6:	e004      	b.n	80012f2 <bmp280_set_Temperature_oversampling+0x5a>

		    case TEMP_OVERSAMP_16X:
		        temp = BMP280_OVERSAMP_16X;
 80012e8:	2305      	movs	r3, #5
 80012ea:	73fb      	strb	r3, [r7, #15]
		        break;
 80012ec:	e001      	b.n	80012f2 <bmp280_set_Temperature_oversampling+0x5a>

		    default:
		        return 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e056      	b.n	80013a0 <bmp280_set_Temperature_oversampling+0x108>
		    }
		    HAL_StatusTypeDef hi2c1_status = 0x00;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73bb      	strb	r3, [r7, #14]

			hi2c1_status = HAL_I2C_Mem_Read(&hi2c1,BMP280_I2C_ADDR,BMP280_CTRL_MEAS_REG,1,&value,1,1000);
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	f107 030d 	add.w	r3, r7, #13
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	22f4      	movs	r2, #244	; 0xf4
 800130a:	21ee      	movs	r1, #238	; 0xee
 800130c:	4826      	ldr	r0, [pc, #152]	; (80013a8 <bmp280_set_Temperature_oversampling+0x110>)
 800130e:	f002 fbcd 	bl	8003aac <HAL_I2C_Mem_Read>
 8001312:	4603      	mov	r3, r0
 8001314:	73bb      	strb	r3, [r7, #14]
			if(HAL_OK!=hi2c1_status){
 8001316:	7bbb      	ldrb	r3, [r7, #14]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <bmp280_set_Temperature_oversampling+0x8e>
				printf("get bmp280_calib_param error\r\n");
 800131c:	4823      	ldr	r0, [pc, #140]	; (80013ac <bmp280_set_Temperature_oversampling+0x114>)
 800131e:	f005 fd35 	bl	8006d8c <puts>
				return 1;
 8001322:	2301      	movs	r3, #1
 8001324:	e03c      	b.n	80013a0 <bmp280_set_Temperature_oversampling+0x108>
			}

			// clear bit 5 6 7  and set new value of mode
			reg_value = ( value & 0x1F) | ( (temp<<5) & 0xE0);
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	b25b      	sxtb	r3, r3
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	b25a      	sxtb	r2, r3
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	015b      	lsls	r3, r3, #5
 8001334:	b25b      	sxtb	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b25b      	sxtb	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	733b      	strb	r3, [r7, #12]

			hi2c1_status = HAL_I2C_Mem_Write(&hi2c1,BMP280_I2C_ADDR,BMP280_CTRL_MEAS_REG,1,&reg_value,1,1000);
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	2301      	movs	r3, #1
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2301      	movs	r3, #1
 8001350:	22f4      	movs	r2, #244	; 0xf4
 8001352:	21ee      	movs	r1, #238	; 0xee
 8001354:	4814      	ldr	r0, [pc, #80]	; (80013a8 <bmp280_set_Temperature_oversampling+0x110>)
 8001356:	f002 faaf 	bl	80038b8 <HAL_I2C_Mem_Write>
 800135a:	4603      	mov	r3, r0
 800135c:	73bb      	strb	r3, [r7, #14]
			if(HAL_OK!=hi2c1_status){
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <bmp280_set_Temperature_oversampling+0xd6>
				printf("bmp280_set_Temperature_oversampling error\r\n");
 8001364:	4812      	ldr	r0, [pc, #72]	; (80013b0 <bmp280_set_Temperature_oversampling+0x118>)
 8001366:	f005 fd11 	bl	8006d8c <puts>
				return 1;
 800136a:	2301      	movs	r3, #1
 800136c:	e018      	b.n	80013a0 <bmp280_set_Temperature_oversampling+0x108>
			}
			//printf("successfully BMP280 set_Temperature_oversampling\r\n");

			hi2c1_status = HAL_I2C_Mem_Read(&hi2c1,BMP280_I2C_ADDR,BMP280_CTRL_MEAS_REG,1,&value,1,1000);
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	2301      	movs	r3, #1
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	f107 030d 	add.w	r3, r7, #13
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2301      	movs	r3, #1
 8001380:	22f4      	movs	r2, #244	; 0xf4
 8001382:	21ee      	movs	r1, #238	; 0xee
 8001384:	4808      	ldr	r0, [pc, #32]	; (80013a8 <bmp280_set_Temperature_oversampling+0x110>)
 8001386:	f002 fb91 	bl	8003aac <HAL_I2C_Mem_Read>
 800138a:	4603      	mov	r3, r0
 800138c:	73bb      	strb	r3, [r7, #14]
			if(HAL_OK!=hi2c1_status){
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <bmp280_set_Temperature_oversampling+0x106>
			printf("get bmp280_set_Temperature_oversampling after configure error\r\n");
 8001394:	4807      	ldr	r0, [pc, #28]	; (80013b4 <bmp280_set_Temperature_oversampling+0x11c>)
 8001396:	f005 fcf9 	bl	8006d8c <puts>
			return 1;
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <bmp280_set_Temperature_oversampling+0x108>
			}
			//printf("bmp280_set_Temperature_oversampling value in regs after configure :%02X\r\n",value);



			return 0;
 800139e:	2300      	movs	r3, #0

}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000240 	.word	0x20000240
 80013ac:	08009bfc 	.word	0x08009bfc
 80013b0:	08009c1c 	.word	0x08009c1c
 80013b4:	08009c48 	.word	0x08009c48

080013b8 <bmp280_get_calib_param>:
/**
  * @brief: bmp280_get_calib_param
  */
uint8_t bmp280_get_calib_param()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef hi2c1_status = 0x00;
 80013be:	2300      	movs	r3, #0
 80013c0:	77fb      	strb	r3, [r7, #31]
	uint8_t data_u8[BMP280_CALIB_DATA_SIZE] = { 0x00 };
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
	hi2c1_status = HAL_I2C_Mem_Read(&hi2c1,BMP280_I2C_ADDR,BMP280_TEMPERATURE_CALIB_DIG_T1_LSB_REG
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2318      	movs	r3, #24
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2301      	movs	r3, #1
 80013e6:	2288      	movs	r2, #136	; 0x88
 80013e8:	21ee      	movs	r1, #238	; 0xee
 80013ea:	4845      	ldr	r0, [pc, #276]	; (8001500 <bmp280_get_calib_param+0x148>)
 80013ec:	f002 fb5e 	bl	8003aac <HAL_I2C_Mem_Read>
 80013f0:	4603      	mov	r3, r0
 80013f2:	77fb      	strb	r3, [r7, #31]
			,1,data_u8,BMP280_PRESSURE_TEMPERATURE_CALIB_DATA_LENGTH,1000);
	if(HAL_OK!=hi2c1_status){
 80013f4:	7ffb      	ldrb	r3, [r7, #31]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d004      	beq.n	8001404 <bmp280_get_calib_param+0x4c>
		printf("get bmp280_calib_param error\r\n");
 80013fa:	4842      	ldr	r0, [pc, #264]	; (8001504 <bmp280_get_calib_param+0x14c>)
 80013fc:	f005 fcc6 	bl	8006d8c <puts>
		return 1;
 8001400:	2301      	movs	r3, #1
 8001402:	e078      	b.n	80014f6 <bmp280_get_calib_param+0x13e>
	}
	g_bmp280_calib_table.dig_T1 = (uint16_t)(
			(((uint16_t)((uint8_t)data_u8[BMP280_TEMPERATURE_CALIB_DIG_T1_MSB])) << BMP280_SHIFT_BY_08_BITS)
 8001404:	797b      	ldrb	r3, [r7, #5]
 8001406:	021b      	lsls	r3, r3, #8
			| data_u8[BMP280_TEMPERATURE_CALIB_DIG_T1_LSB]);
 8001408:	b21a      	sxth	r2, r3
 800140a:	793b      	ldrb	r3, [r7, #4]
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b21b      	sxth	r3, r3
	g_bmp280_calib_table.dig_T1 = (uint16_t)(
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b3c      	ldr	r3, [pc, #240]	; (8001508 <bmp280_get_calib_param+0x150>)
 8001416:	801a      	strh	r2, [r3, #0]
	g_bmp280_calib_table.dig_T2 = (int16_t)(
	      (((int16_t)((int8_t)data_u8[BMP280_TEMPERATURE_CALIB_DIG_T2_MSB])) << BMP280_SHIFT_BY_08_BITS)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	b25b      	sxtb	r3, r3
 800141c:	021b      	lsls	r3, r3, #8
	g_bmp280_calib_table.dig_T2 = (int16_t)(
 800141e:	b21a      	sxth	r2, r3
		   | data_u8[BMP280_TEMPERATURE_CALIB_DIG_T2_LSB]);
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	b21b      	sxth	r3, r3
	g_bmp280_calib_table.dig_T2 = (int16_t)(
 8001424:	4313      	orrs	r3, r2
 8001426:	b21a      	sxth	r2, r3
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <bmp280_get_calib_param+0x150>)
 800142a:	805a      	strh	r2, [r3, #2]
	g_bmp280_calib_table.dig_T3 = (int16_t)(
	      (((int16_t)((int8_t)data_u8[BMP280_TEMPERATURE_CALIB_DIG_T3_MSB])) << BMP280_SHIFT_BY_08_BITS)
 800142c:	7a7b      	ldrb	r3, [r7, #9]
 800142e:	b25b      	sxtb	r3, r3
 8001430:	021b      	lsls	r3, r3, #8
	g_bmp280_calib_table.dig_T3 = (int16_t)(
 8001432:	b21a      	sxth	r2, r3
		  | data_u8[BMP280_TEMPERATURE_CALIB_DIG_T3_LSB]);
 8001434:	7a3b      	ldrb	r3, [r7, #8]
 8001436:	b21b      	sxth	r3, r3
	g_bmp280_calib_table.dig_T3 = (int16_t)(
 8001438:	4313      	orrs	r3, r2
 800143a:	b21a      	sxth	r2, r3
 800143c:	4b32      	ldr	r3, [pc, #200]	; (8001508 <bmp280_get_calib_param+0x150>)
 800143e:	809a      	strh	r2, [r3, #4]
	g_bmp280_calib_table.dig_P1 = (uint16_t)(
	      (((uint16_t)((uint8_t)data_u8[BMP280_PRESSURE_CALIB_DIG_P1_MSB])) << BMP280_SHIFT_BY_08_BITS)
 8001440:	7afb      	ldrb	r3, [r7, #11]
 8001442:	021b      	lsls	r3, r3, #8
		  | data_u8[BMP280_PRESSURE_CALIB_DIG_P1_LSB]);
 8001444:	b21a      	sxth	r2, r3
 8001446:	7abb      	ldrb	r3, [r7, #10]
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	b21b      	sxth	r3, r3
	g_bmp280_calib_table.dig_P1 = (uint16_t)(
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <bmp280_get_calib_param+0x150>)
 8001452:	80da      	strh	r2, [r3, #6]
	g_bmp280_calib_table.dig_P2 = (int16_t)(
	      (((int16_t)((int8_t)data_u8[BMP280_PRESSURE_CALIB_DIG_P2_MSB])) << BMP280_SHIFT_BY_08_BITS)
 8001454:	7b7b      	ldrb	r3, [r7, #13]
 8001456:	b25b      	sxtb	r3, r3
 8001458:	021b      	lsls	r3, r3, #8
	g_bmp280_calib_table.dig_P2 = (int16_t)(
 800145a:	b21a      	sxth	r2, r3
		  | data_u8[BMP280_PRESSURE_CALIB_DIG_P2_LSB]);
 800145c:	7b3b      	ldrb	r3, [r7, #12]
 800145e:	b21b      	sxth	r3, r3
	g_bmp280_calib_table.dig_P2 = (int16_t)(
 8001460:	4313      	orrs	r3, r2
 8001462:	b21a      	sxth	r2, r3
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <bmp280_get_calib_param+0x150>)
 8001466:	811a      	strh	r2, [r3, #8]
	g_bmp280_calib_table.dig_P3 = (int16_t)(
	      (((int16_t)((int8_t)data_u8[BMP280_PRESSURE_CALIB_DIG_P3_MSB])) << BMP280_SHIFT_BY_08_BITS)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	021b      	lsls	r3, r3, #8
	g_bmp280_calib_table.dig_P3 = (int16_t)(
 800146e:	b21a      	sxth	r2, r3
		  | data_u8[BMP280_PRESSURE_CALIB_DIG_P3_LSB]);
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	b21b      	sxth	r3, r3
	g_bmp280_calib_table.dig_P3 = (int16_t)(
 8001474:	4313      	orrs	r3, r2
 8001476:	b21a      	sxth	r2, r3
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <bmp280_get_calib_param+0x150>)
 800147a:	815a      	strh	r2, [r3, #10]
	g_bmp280_calib_table.dig_P4 = (int16_t)(
	      (((int16_t)((int8_t)data_u8[BMP280_PRESSURE_CALIB_DIG_P4_MSB])) << BMP280_SHIFT_BY_08_BITS)
 800147c:	7c7b      	ldrb	r3, [r7, #17]
 800147e:	b25b      	sxtb	r3, r3
 8001480:	021b      	lsls	r3, r3, #8
	g_bmp280_calib_table.dig_P4 = (int16_t)(
 8001482:	b21a      	sxth	r2, r3
		  | data_u8[BMP280_PRESSURE_CALIB_DIG_P4_LSB]);
 8001484:	7c3b      	ldrb	r3, [r7, #16]
 8001486:	b21b      	sxth	r3, r3
	g_bmp280_calib_table.dig_P4 = (int16_t)(
 8001488:	4313      	orrs	r3, r2
 800148a:	b21a      	sxth	r2, r3
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <bmp280_get_calib_param+0x150>)
 800148e:	819a      	strh	r2, [r3, #12]
	g_bmp280_calib_table.dig_P5 = (int16_t)(
	      (((int16_t)((int8_t)data_u8[BMP280_PRESSURE_CALIB_DIG_P5_MSB])) << BMP280_SHIFT_BY_08_BITS)
 8001490:	7cfb      	ldrb	r3, [r7, #19]
 8001492:	b25b      	sxtb	r3, r3
 8001494:	021b      	lsls	r3, r3, #8
	g_bmp280_calib_table.dig_P5 = (int16_t)(
 8001496:	b21a      	sxth	r2, r3
		  | data_u8[BMP280_PRESSURE_CALIB_DIG_P5_LSB]);
 8001498:	7cbb      	ldrb	r3, [r7, #18]
 800149a:	b21b      	sxth	r3, r3
	g_bmp280_calib_table.dig_P5 = (int16_t)(
 800149c:	4313      	orrs	r3, r2
 800149e:	b21a      	sxth	r2, r3
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <bmp280_get_calib_param+0x150>)
 80014a2:	81da      	strh	r2, [r3, #14]
	g_bmp280_calib_table.dig_P6 = (int16_t)(
	      (((int16_t)((int8_t)data_u8[BMP280_PRESSURE_CALIB_DIG_P6_MSB])) << BMP280_SHIFT_BY_08_BITS)
 80014a4:	7d7b      	ldrb	r3, [r7, #21]
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	021b      	lsls	r3, r3, #8
	g_bmp280_calib_table.dig_P6 = (int16_t)(
 80014aa:	b21a      	sxth	r2, r3
		  | data_u8[BMP280_PRESSURE_CALIB_DIG_P6_LSB]);
 80014ac:	7d3b      	ldrb	r3, [r7, #20]
 80014ae:	b21b      	sxth	r3, r3
	g_bmp280_calib_table.dig_P6 = (int16_t)(
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <bmp280_get_calib_param+0x150>)
 80014b6:	821a      	strh	r2, [r3, #16]
	g_bmp280_calib_table.dig_P7 = (int16_t)(
	      (((int16_t)((int8_t)data_u8[BMP280_PRESSURE_CALIB_DIG_P7_MSB])) << BMP280_SHIFT_BY_08_BITS)
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	021b      	lsls	r3, r3, #8
	g_bmp280_calib_table.dig_P7 = (int16_t)(
 80014be:	b21a      	sxth	r2, r3
		  | data_u8[BMP280_PRESSURE_CALIB_DIG_P7_LSB]);
 80014c0:	7dbb      	ldrb	r3, [r7, #22]
 80014c2:	b21b      	sxth	r3, r3
	g_bmp280_calib_table.dig_P7 = (int16_t)(
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <bmp280_get_calib_param+0x150>)
 80014ca:	825a      	strh	r2, [r3, #18]
	g_bmp280_calib_table.dig_P8 = (int16_t)(
	      (((int16_t)((int8_t)data_u8[BMP280_PRESSURE_CALIB_DIG_P8_MSB])) << BMP280_SHIFT_BY_08_BITS)
 80014cc:	7e7b      	ldrb	r3, [r7, #25]
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	021b      	lsls	r3, r3, #8
	g_bmp280_calib_table.dig_P8 = (int16_t)(
 80014d2:	b21a      	sxth	r2, r3
		  | data_u8[BMP280_PRESSURE_CALIB_DIG_P8_LSB]);
 80014d4:	7e3b      	ldrb	r3, [r7, #24]
 80014d6:	b21b      	sxth	r3, r3
	g_bmp280_calib_table.dig_P8 = (int16_t)(
 80014d8:	4313      	orrs	r3, r2
 80014da:	b21a      	sxth	r2, r3
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <bmp280_get_calib_param+0x150>)
 80014de:	829a      	strh	r2, [r3, #20]
	g_bmp280_calib_table.dig_P9 = (int16_t)(
	      (((int16_t)((int8_t)data_u8[BMP280_PRESSURE_CALIB_DIG_P9_MSB])) << BMP280_SHIFT_BY_08_BITS)
 80014e0:	7efb      	ldrb	r3, [r7, #27]
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	021b      	lsls	r3, r3, #8
	g_bmp280_calib_table.dig_P9 = (int16_t)(
 80014e6:	b21a      	sxth	r2, r3
		  | data_u8[BMP280_PRESSURE_CALIB_DIG_P9_LSB]);
 80014e8:	7ebb      	ldrb	r3, [r7, #26]
 80014ea:	b21b      	sxth	r3, r3
	g_bmp280_calib_table.dig_P9 = (int16_t)(
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <bmp280_get_calib_param+0x150>)
 80014f2:	82da      	strh	r2, [r3, #22]
	return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3720      	adds	r7, #32
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000240 	.word	0x20000240
 8001504:	08009bfc 	.word	0x08009bfc
 8001508:	200001fc 	.word	0x200001fc

0800150c <read_bmp280_temperature>:
/**
  * @brief: read_bmp280_temperature with compensation
  */
uint8_t read_bmp280_temperature(uint32_t *comp_temp)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af04      	add	r7, sp, #16
 8001512:	6078      	str	r0, [r7, #4]
	*comp_temp = 0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	uint8_t data_u8[BMP280_TEMPERATURE_DATA_SIZE] = { 0 };
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <read_bmp280_temperature+0xd4>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	81bb      	strh	r3, [r7, #12]
 8001520:	2300      	movs	r3, #0
 8001522:	73bb      	strb	r3, [r7, #14]
	int32_t temp;
	HAL_StatusTypeDef hi2c2_status = 0x00;
 8001524:	2300      	movs	r3, #0
 8001526:	77fb      	strb	r3, [r7, #31]

	hi2c2_status = HAL_I2C_Mem_Read(&hi2c1,BMP280_I2C_ADDR,BMP280_TEMPERATURE_MSB_REG,1,data_u8,BMP280_TEMPERATURE_DATA_SIZE,1000);
 8001528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	2303      	movs	r3, #3
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2301      	movs	r3, #1
 800153a:	22fa      	movs	r2, #250	; 0xfa
 800153c:	21ee      	movs	r1, #238	; 0xee
 800153e:	4829      	ldr	r0, [pc, #164]	; (80015e4 <read_bmp280_temperature+0xd8>)
 8001540:	f002 fab4 	bl	8003aac <HAL_I2C_Mem_Read>
 8001544:	4603      	mov	r3, r0
 8001546:	77fb      	strb	r3, [r7, #31]
	if(HAL_OK!=hi2c2_status){
 8001548:	7ffb      	ldrb	r3, [r7, #31]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d004      	beq.n	8001558 <read_bmp280_temperature+0x4c>
		printf("get read_bmp280_temperature error\r\n");
 800154e:	4826      	ldr	r0, [pc, #152]	; (80015e8 <read_bmp280_temperature+0xdc>)
 8001550:	f005 fc1c 	bl	8006d8c <puts>
		return 1;
 8001554:	2301      	movs	r3, #1
 8001556:	e03f      	b.n	80015d8 <read_bmp280_temperature+0xcc>
	}
	temp = (int)((((uint32_t)(data_u8[BMP280_TEMPERATURE_MSB_DATA]))
 8001558:	7b3b      	ldrb	r3, [r7, #12]
			<< BMP280_SHIFT_BY_12_BITS) | (((uint32_t)(data_u8[BMP280_TEMPERATURE_LSB_DATA]))
 800155a:	031a      	lsls	r2, r3, #12
 800155c:	7b7b      	ldrb	r3, [r7, #13]
			<< BMP280_SHIFT_BY_04_BITS) | ((uint32_t)data_u8[BMP280_TEMPERATURE_XLSB_DATA]
 800155e:	011b      	lsls	r3, r3, #4
			<< BMP280_SHIFT_BY_12_BITS) | (((uint32_t)(data_u8[BMP280_TEMPERATURE_LSB_DATA]))
 8001560:	4313      	orrs	r3, r2
			<< BMP280_SHIFT_BY_04_BITS) | ((uint32_t)data_u8[BMP280_TEMPERATURE_XLSB_DATA]
 8001562:	7bba      	ldrb	r2, [r7, #14]
			>> BMP280_SHIFT_BY_04_BITS));
 8001564:	0912      	lsrs	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
			<< BMP280_SHIFT_BY_04_BITS) | ((uint32_t)data_u8[BMP280_TEMPERATURE_XLSB_DATA]
 8001568:	4313      	orrs	r3, r2
	temp = (int)((((uint32_t)(data_u8[BMP280_TEMPERATURE_MSB_DATA]))
 800156a:	61bb      	str	r3, [r7, #24]
	//
    int v_x1_u32r = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
    int v_x2_u32r = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
    v_x1_u32r = ((((temp >> BMP280_SHIFT_BY_03_BITS) -
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	10da      	asrs	r2, r3, #3
    		((int)g_bmp280_calib_table.dig_T1 << BMP280_SHIFT_BY_01_BIT))) *
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <read_bmp280_temperature+0xe0>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	005b      	lsls	r3, r3, #1
    v_x1_u32r = ((((temp >> BMP280_SHIFT_BY_03_BITS) -
 800157e:	1ad3      	subs	r3, r2, r3
    		((int)g_bmp280_calib_table.dig_T2)) >> BMP280_SHIFT_BY_11_BITS;
 8001580:	4a1a      	ldr	r2, [pc, #104]	; (80015ec <read_bmp280_temperature+0xe0>)
 8001582:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    		((int)g_bmp280_calib_table.dig_T1 << BMP280_SHIFT_BY_01_BIT))) *
 8001586:	fb02 f303 	mul.w	r3, r2, r3
    v_x1_u32r = ((((temp >> BMP280_SHIFT_BY_03_BITS) -
 800158a:	12db      	asrs	r3, r3, #11
 800158c:	617b      	str	r3, [r7, #20]

    v_x2_u32r = (((((temp >> BMP280_SHIFT_BY_04_BITS) -
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	111b      	asrs	r3, r3, #4
                    ((int)g_bmp280_calib_table.dig_T1)) *
 8001592:	4a16      	ldr	r2, [pc, #88]	; (80015ec <read_bmp280_temperature+0xe0>)
 8001594:	8812      	ldrh	r2, [r2, #0]
    v_x2_u32r = (((((temp >> BMP280_SHIFT_BY_04_BITS) -
 8001596:	1a9b      	subs	r3, r3, r2
                   ((temp >> BMP280_SHIFT_BY_04_BITS) -
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	1112      	asrs	r2, r2, #4
                    ((int)g_bmp280_calib_table.dig_T1))) >>
 800159c:	4913      	ldr	r1, [pc, #76]	; (80015ec <read_bmp280_temperature+0xe0>)
 800159e:	8809      	ldrh	r1, [r1, #0]
                   ((temp >> BMP280_SHIFT_BY_04_BITS) -
 80015a0:	1a52      	subs	r2, r2, r1
                    ((int)g_bmp280_calib_table.dig_T1)) *
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
                    ((int)g_bmp280_calib_table.dig_T1))) >>
 80015a6:	131b      	asrs	r3, r3, #12
                  BMP280_SHIFT_BY_12_BITS) *
                 ((int)g_bmp280_calib_table.dig_T3)) >>
 80015a8:	4a10      	ldr	r2, [pc, #64]	; (80015ec <read_bmp280_temperature+0xe0>)
 80015aa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
                  BMP280_SHIFT_BY_12_BITS) *
 80015ae:	fb02 f303 	mul.w	r3, r2, r3
    v_x2_u32r = (((((temp >> BMP280_SHIFT_BY_04_BITS) -
 80015b2:	139b      	asrs	r3, r3, #14
 80015b4:	613b      	str	r3, [r7, #16]
                BMP280_SHIFT_BY_14_BITS;

    g_bmp280_calib_table.t_fine = v_x1_u32r + v_x2_u32r;
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <read_bmp280_temperature+0xe0>)
 80015be:	6193      	str	r3, [r2, #24]

    temp = (g_bmp280_calib_table.t_fine * 5 + 128) >> BMP280_SHIFT_BY_08_BITS;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <read_bmp280_temperature+0xe0>)
 80015c2:	699a      	ldr	r2, [r3, #24]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	3380      	adds	r3, #128	; 0x80
 80015cc:	121b      	asrs	r3, r3, #8
 80015ce:	61bb      	str	r3, [r7, #24]
  //  printf("comp_temp: %d.%d\n", (int)temp/100, (int)(temp % 100));
      *comp_temp = temp;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	601a      	str	r2, [r3, #0]
    return 0;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	08009cac 	.word	0x08009cac
 80015e4:	20000240 	.word	0x20000240
 80015e8:	08009c88 	.word	0x08009c88
 80015ec:	200001fc 	.word	0x200001fc

080015f0 <read_bmp280_presse>:
/**
  * @brief: read_bmp280_pressure with compensation
  */
uint8_t read_bmp280_presse(uint32_t *comp_presse)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	; 0x30
 80015f4:	af04      	add	r7, sp, #16
 80015f6:	6078      	str	r0, [r7, #4]
	*comp_presse = 0;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
	uint8_t data_u8[BMP280_PRESSURE_DATA_SIZE] = { 0 };
 80015fe:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <read_bmp280_presse+0x1b0>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	813b      	strh	r3, [r7, #8]
 8001604:	2300      	movs	r3, #0
 8001606:	72bb      	strb	r3, [r7, #10]
	int32_t temp;
	HAL_StatusTypeDef hi2c1_status = 0x00;
 8001608:	2300      	movs	r3, #0
 800160a:	76fb      	strb	r3, [r7, #27]
	//BMP280_PRESSURE_MSB_REG=0XF7,BMP280_PRESSURE_DATA_SIZE=0X03
	hi2c1_status = HAL_I2C_Mem_Read(&hi2c1,BMP280_I2C_ADDR,BMP280_PRESSURE_MSB_REG,1,data_u8,BMP280_PRESSURE_DATA_SIZE,1000);
 800160c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001610:	9302      	str	r3, [sp, #8]
 8001612:	2303      	movs	r3, #3
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2301      	movs	r3, #1
 800161e:	22f7      	movs	r2, #247	; 0xf7
 8001620:	21ee      	movs	r1, #238	; 0xee
 8001622:	4860      	ldr	r0, [pc, #384]	; (80017a4 <read_bmp280_presse+0x1b4>)
 8001624:	f002 fa42 	bl	8003aac <HAL_I2C_Mem_Read>
 8001628:	4603      	mov	r3, r0
 800162a:	76fb      	strb	r3, [r7, #27]
	if(HAL_OK!=hi2c1_status){
 800162c:	7efb      	ldrb	r3, [r7, #27]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <read_bmp280_presse+0x4c>
		printf("get read_bmp280_presse error\r\n");
 8001632:	485d      	ldr	r0, [pc, #372]	; (80017a8 <read_bmp280_presse+0x1b8>)
 8001634:	f005 fbaa 	bl	8006d8c <puts>
		return 1;
 8001638:	2301      	movs	r3, #1
 800163a:	e0ac      	b.n	8001796 <read_bmp280_presse+0x1a6>
	}
	temp = (int)(
			(((uint32_t)(data_u8[BMP280_PRESSURE_MSB_DATA])) << BMP280_SHIFT_BY_12_BITS)
 800163c:	7a3b      	ldrb	r3, [r7, #8]
 800163e:	031a      	lsls	r2, r3, #12
			| (((uint32_t)(data_u8[BMP280_PRESSURE_LSB_DATA])) << BMP280_SHIFT_BY_04_BITS)
 8001640:	7a7b      	ldrb	r3, [r7, #9]
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	4313      	orrs	r3, r2
			| ((uint32_t)data_u8[BMP280_PRESSURE_XLSB_DATA]	>> BMP280_SHIFT_BY_04_BITS)
 8001646:	7aba      	ldrb	r2, [r7, #10]
 8001648:	0912      	lsrs	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	4313      	orrs	r3, r2
	temp = (int)(
 800164e:	617b      	str	r3, [r7, #20]
			);
	//
	int      v_x1_u32r = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
	int      v_x2_u32r = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]

	v_x1_u32r = (((int)g_bmp280_calib_table.t_fine) >> BMP280_SHIFT_BY_01_BIT) - (int)64000;
 8001658:	4b54      	ldr	r3, [pc, #336]	; (80017ac <read_bmp280_presse+0x1bc>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	105b      	asrs	r3, r3, #1
 800165e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001662:	613b      	str	r3, [r7, #16]
	v_x2_u32r = (((v_x1_u32r >> BMP280_SHIFT_BY_02_BITS) * (v_x1_u32r >> BMP280_SHIFT_BY_02_BITS)) >>
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	109b      	asrs	r3, r3, #2
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	1092      	asrs	r2, r2, #2
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	12db      	asrs	r3, r3, #11
	                 BMP280_SHIFT_BY_11_BITS) * ((int)g_bmp280_calib_table.dig_P6);
 8001672:	4a4e      	ldr	r2, [pc, #312]	; (80017ac <read_bmp280_presse+0x1bc>)
 8001674:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
	v_x2_u32r = (((v_x1_u32r >> BMP280_SHIFT_BY_02_BITS) * (v_x1_u32r >> BMP280_SHIFT_BY_02_BITS)) >>
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	60fb      	str	r3, [r7, #12]
	v_x2_u32r = v_x2_u32r + ((v_x1_u32r * ((int)g_bmp280_calib_table.dig_P5)) << BMP280_SHIFT_BY_01_BIT);
 800167e:	4b4b      	ldr	r3, [pc, #300]	; (80017ac <read_bmp280_presse+0x1bc>)
 8001680:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001684:	461a      	mov	r2, r3
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
	v_x2_u32r = (v_x2_u32r >> BMP280_SHIFT_BY_02_BITS) + (((int)g_bmp280_calib_table.dig_P4) << BMP280_SHIFT_BY_16_BITS);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	109a      	asrs	r2, r3, #2
 8001698:	4b44      	ldr	r3, [pc, #272]	; (80017ac <read_bmp280_presse+0x1bc>)
 800169a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	4413      	add	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((g_bmp280_calib_table.dig_P3 *  (((v_x1_u32r >> BMP280_SHIFT_BY_02_BITS) *
 80016a4:	4b41      	ldr	r3, [pc, #260]	; (80017ac <read_bmp280_presse+0x1bc>)
 80016a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80016aa:	4619      	mov	r1, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	109b      	asrs	r3, r3, #2
			(v_x1_u32r >> BMP280_SHIFT_BY_02_BITS)) >> BMP280_SHIFT_BY_13_BITS)) >> BMP280_SHIFT_BY_03_BITS) +
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	1092      	asrs	r2, r2, #2
	v_x1_u32r = (((g_bmp280_calib_table.dig_P3 *  (((v_x1_u32r >> BMP280_SHIFT_BY_02_BITS) *
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
			(v_x1_u32r >> BMP280_SHIFT_BY_02_BITS)) >> BMP280_SHIFT_BY_13_BITS)) >> BMP280_SHIFT_BY_03_BITS) +
 80016b8:	135b      	asrs	r3, r3, #13
	v_x1_u32r = (((g_bmp280_calib_table.dig_P3 *  (((v_x1_u32r >> BMP280_SHIFT_BY_02_BITS) *
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
			(v_x1_u32r >> BMP280_SHIFT_BY_02_BITS)) >> BMP280_SHIFT_BY_13_BITS)) >> BMP280_SHIFT_BY_03_BITS) +
 80016be:	10da      	asrs	r2, r3, #3
	        ((((int)g_bmp280_calib_table.dig_P2) * v_x1_u32r) >> BMP280_SHIFT_BY_01_BIT)) >> BMP280_SHIFT_BY_18_BITS;
 80016c0:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <read_bmp280_presse+0x1bc>)
 80016c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016c6:	4619      	mov	r1, r3
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	105b      	asrs	r3, r3, #1
			(v_x1_u32r >> BMP280_SHIFT_BY_02_BITS)) >> BMP280_SHIFT_BY_13_BITS)) >> BMP280_SHIFT_BY_03_BITS) +
 80016d0:	4413      	add	r3, r2
	v_x1_u32r = (((g_bmp280_calib_table.dig_P3 *  (((v_x1_u32r >> BMP280_SHIFT_BY_02_BITS) *
 80016d2:	149b      	asrs	r3, r3, #18
 80016d4:	613b      	str	r3, [r7, #16]
	v_x1_u32r = ((((32768 + v_x1_u32r)) * ((int)g_bmp280_calib_table.dig_P1)) >> BMP280_SHIFT_BY_15_BITS);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016dc:	4a33      	ldr	r2, [pc, #204]	; (80017ac <read_bmp280_presse+0x1bc>)
 80016de:	88d2      	ldrh	r2, [r2, #6]
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	13db      	asrs	r3, r3, #15
 80016e6:	613b      	str	r3, [r7, #16]
	if (v_x1_u32r == 0)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <read_bmp280_presse+0x102>
	{
		return 1; // avoid exception caused by division by zero
 80016ee:	2301      	movs	r3, #1
 80016f0:	e051      	b.n	8001796 <read_bmp280_presse+0x1a6>
	}
	//
	uint32_t val_baro = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
	val_baro = (((uint32_t)(((int)1048576) - temp) - (v_x2_u32r >> BMP280_SHIFT_BY_12_BITS))) * 3125;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	131b      	asrs	r3, r3, #12
 80016fa:	461a      	mov	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	4413      	add	r3, r2
 8001700:	4a2b      	ldr	r2, [pc, #172]	; (80017b0 <read_bmp280_presse+0x1c0>)
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 800170a:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800170e:	61fb      	str	r3, [r7, #28]

	if (val_baro < 0x80000000) {
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <read_bmp280_presse+0x13e>
		if (v_x1_u32r != 0) {
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <read_bmp280_presse+0x13a>
			val_baro =	(val_baro << BMP280_SHIFT_BY_01_BIT) / ((uint32_t)v_x1_u32r);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005a      	lsls	r2, r3, #1
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	e00d      	b.n	8001746 <read_bmp280_presse+0x156>
		} else {
			return 1;
 800172a:	2301      	movs	r3, #1
 800172c:	e033      	b.n	8001796 <read_bmp280_presse+0x1a6>
		}
	} else if (v_x1_u32r != 0) {
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <read_bmp280_presse+0x152>
		val_baro = (val_baro / (uint32_t)v_x1_u32r) * 2;
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	fbb2 f3f3 	udiv	r3, r2, r3
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
 8001740:	e001      	b.n	8001746 <read_bmp280_presse+0x156>
	} else {
	        return 1;
 8001742:	2301      	movs	r3, #1
 8001744:	e027      	b.n	8001796 <read_bmp280_presse+0x1a6>
	}
	v_x1_u32r = (((int)g_bmp280_calib_table.dig_P9) * ((int)(((val_baro >> BMP280_SHIFT_BY_03_BITS) *
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <read_bmp280_presse+0x1bc>)
 8001748:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800174c:	4619      	mov	r1, r3
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	08db      	lsrs	r3, r3, #3
	    		(val_baro >> BMP280_SHIFT_BY_03_BITS)) >> BMP280_SHIFT_BY_13_BITS))) >> BMP280_SHIFT_BY_12_BITS;
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	08d2      	lsrs	r2, r2, #3
	v_x1_u32r = (((int)g_bmp280_calib_table.dig_P9) * ((int)(((val_baro >> BMP280_SHIFT_BY_03_BITS) *
 8001756:	fb02 f303 	mul.w	r3, r2, r3
	    		(val_baro >> BMP280_SHIFT_BY_03_BITS)) >> BMP280_SHIFT_BY_13_BITS))) >> BMP280_SHIFT_BY_12_BITS;
 800175a:	0b5b      	lsrs	r3, r3, #13
	v_x1_u32r = (((int)g_bmp280_calib_table.dig_P9) * ((int)(((val_baro >> BMP280_SHIFT_BY_03_BITS) *
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	131b      	asrs	r3, r3, #12
 8001762:	613b      	str	r3, [r7, #16]

	v_x2_u32r = (((int)(val_baro >> BMP280_SHIFT_BY_02_BITS)) * ((int)g_bmp280_calib_table.dig_P8)) >>	BMP280_SHIFT_BY_13_BITS;
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	461a      	mov	r2, r3
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <read_bmp280_presse+0x1bc>)
 800176c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	135b      	asrs	r3, r3, #13
 8001776:	60fb      	str	r3, [r7, #12]

	val_baro = (uint32_t)((int)val_baro +
	    		((v_x1_u32r + v_x2_u32r + g_bmp280_calib_table.dig_P7) >> BMP280_SHIFT_BY_04_BITS));
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4413      	add	r3, r2
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <read_bmp280_presse+0x1bc>)
 8001780:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001784:	4413      	add	r3, r2
 8001786:	111a      	asrs	r2, r3, #4
	val_baro = (uint32_t)((int)val_baro +
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	61fb      	str	r3, [r7, #28]

	//printf("comp_presse:%d.%d\r\n",(int)val_baro/100, (int)(val_baro % 100));
	*comp_presse = val_baro;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	601a      	str	r2, [r3, #0]
	return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	08009cac 	.word	0x08009cac
 80017a4:	20000240 	.word	0x20000240
 80017a8:	08009cb0 	.word	0x08009cb0
 80017ac:	200001fc 	.word	0x200001fc
 80017b0:	fffff3cb 	.word	0xfffff3cb

080017b4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_CAN1_Init+0x68>)
 80017ba:	4a19      	ldr	r2, [pc, #100]	; (8001820 <MX_CAN1_Init+0x6c>)
 80017bc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_CAN1_Init+0x68>)
 80017c0:	220c      	movs	r2, #12
 80017c2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <MX_CAN1_Init+0x68>)
 80017c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ca:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_CAN1_Init+0x68>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_CAN1_Init+0x68>)
 80017d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017d8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_CAN1_Init+0x68>)
 80017dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017e0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_CAN1_Init+0x68>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_CAN1_Init+0x68>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_CAN1_Init+0x68>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_CAN1_Init+0x68>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_CAN1_Init+0x68>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_CAN1_Init+0x68>)
 8001802:	2200      	movs	r2, #0
 8001804:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_CAN1_Init+0x68>)
 8001808:	f001 f9a6 	bl	8002b58 <HAL_CAN_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001812:	f000 fc7d 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000218 	.word	0x20000218
 8001820:	40006400 	.word	0x40006400

08001824 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <HAL_CAN_MspInit+0x84>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12c      	bne.n	80018a0 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_CAN_MspInit+0x88>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <HAL_CAN_MspInit+0x88>)
 8001850:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_CAN_MspInit+0x88>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_CAN_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_CAN_MspInit+0x88>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_CAN_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800187e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001890:	2309      	movs	r3, #9
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_CAN_MspInit+0x8c>)
 800189c:	f001 fd1a 	bl	80032d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40006400 	.word	0x40006400
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400

080018b4 <CAN_TX_Message>:
  * @param: "TxData[]" stored the message of ready to send, which length must between 0 and 8.
  * @param: "length" stored the number of the data (one data is 8 bit) of ready to send.
  * @retval: Tx_Error: send error
  */
 uint32_t CAN_TX_Message(uint8_t TxData[], uint8_t length)
 {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
 	uint32_t TxMailboxNumber = 0x00000000U;   
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]

 	Tx_pHeader.StdId = 0x61;   
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <CAN_TX_Message+0x60>)
 80018c6:	2261      	movs	r2, #97	; 0x61
 80018c8:	601a      	str	r2, [r3, #0]
 	Tx_pHeader.ExtId = 0x0000;   
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <CAN_TX_Message+0x60>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	605a      	str	r2, [r3, #4]
 	Tx_pHeader.IDE = CAN_ID_STD;    
 80018d0:	4b10      	ldr	r3, [pc, #64]	; (8001914 <CAN_TX_Message+0x60>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
 	Tx_pHeader.RTR = CAN_RTR_DATA;   
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <CAN_TX_Message+0x60>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
 	Tx_pHeader.DLC = length;   
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	4a0d      	ldr	r2, [pc, #52]	; (8001914 <CAN_TX_Message+0x60>)
 80018e0:	6113      	str	r3, [r2, #16]
 	Tx_pHeader.TransmitGlobalTime = DISABLE;
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <CAN_TX_Message+0x60>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	751a      	strb	r2, [r3, #20]
 	if(HAL_CAN_AddTxMessage(&hcan1, &Tx_pHeader, TxData, &TxMailboxNumber) != HAL_OK)
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	4909      	ldr	r1, [pc, #36]	; (8001914 <CAN_TX_Message+0x60>)
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <CAN_TX_Message+0x64>)
 80018f2:	f001 fa70 	bl	8002dd6 <HAL_CAN_AddTxMessage>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <CAN_TX_Message+0x54>
 	{
 		printf("send error");
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <CAN_TX_Message+0x68>)
 80018fe:	f005 f9df 	bl	8006cc0 <iprintf>
 		return Tx_Error;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <CAN_TX_Message+0x6c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	e000      	b.n	800190a <CAN_TX_Message+0x56>
 	}
 	  //printf("TxMailboxNumber:%ld\r\n",TxMailboxNumber);
    return TxMailboxNumber;
 8001908:	68fb      	ldr	r3, [r7, #12]
 }
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200003b4 	.word	0x200003b4
 8001918:	20000218 	.word	0x20000218
 800191c:	08009cd0 	.word	0x08009cd0
 8001920:	20000005 	.word	0x20000005

08001924 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <MX_GPIO_Init+0xd0>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a2c      	ldr	r2, [pc, #176]	; (80019f4 <MX_GPIO_Init+0xd0>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <MX_GPIO_Init+0xd0>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <MX_GPIO_Init+0xd0>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <MX_GPIO_Init+0xd0>)
 8001960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <MX_GPIO_Init+0xd0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <MX_GPIO_Init+0xd0>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <MX_GPIO_Init+0xd0>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_GPIO_Init+0xd0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <MX_GPIO_Init+0xd0>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <MX_GPIO_Init+0xd0>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <MX_GPIO_Init+0xd0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2120      	movs	r1, #32
 80019ae:	4812      	ldr	r0, [pc, #72]	; (80019f8 <MX_GPIO_Init+0xd4>)
 80019b0:	f001 fe24 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	480c      	ldr	r0, [pc, #48]	; (80019fc <MX_GPIO_Init+0xd8>)
 80019cc:	f001 fc82 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019d0:	2320      	movs	r3, #32
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_GPIO_Init+0xd4>)
 80019e8:	f001 fc74 	bl	80032d4 <HAL_GPIO_Init>

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	40020800 	.word	0x40020800

08001a00 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <MX_I2C1_Init+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <MX_I2C1_Init+0x58>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a3e:	f001 fdf7 	bl	8003630 <HAL_I2C_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a48:	f000 fb62 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000240 	.word	0x20000240
 8001a54:	40005400 	.word	0x40005400
 8001a58:	000186a0 	.word	0x000186a0

08001a5c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a62:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <MX_I2C2_Init+0x54>)
 8001a64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a68:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <MX_I2C2_Init+0x58>)
 8001a6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a9a:	f001 fdc9 	bl	8003630 <HAL_I2C_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001aa4:	f000 fb34 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000294 	.word	0x20000294
 8001ab0:	40005800 	.word	0x40005800
 8001ab4:	000186a0 	.word	0x000186a0

08001ab8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08c      	sub	sp, #48	; 0x30
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a42      	ldr	r2, [pc, #264]	; (8001be0 <HAL_I2C_MspInit+0x128>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d12c      	bne.n	8001b34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a40      	ldr	r2, [pc, #256]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001af6:	23c0      	movs	r3, #192	; 0xc0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afa:	2312      	movs	r3, #18
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b06:	2304      	movs	r3, #4
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4835      	ldr	r0, [pc, #212]	; (8001be8 <HAL_I2C_MspInit+0x130>)
 8001b12:	f001 fbdf 	bl	80032d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a31      	ldr	r2, [pc, #196]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b32:	e050      	b.n	8001bd6 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2c      	ldr	r2, [pc, #176]	; (8001bec <HAL_I2C_MspInit+0x134>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d14b      	bne.n	8001bd6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a20      	ldr	r2, [pc, #128]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b7c:	2312      	movs	r3, #18
 8001b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	4815      	ldr	r0, [pc, #84]	; (8001be8 <HAL_I2C_MspInit+0x130>)
 8001b94:	f001 fb9e 	bl	80032d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9e:	2312      	movs	r3, #18
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001baa:	2304      	movs	r3, #4
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480e      	ldr	r0, [pc, #56]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001bb6:	f001 fb8d 	bl	80032d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_I2C_MspInit+0x12c>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
}
 8001bd6:	bf00      	nop
 8001bd8:	3730      	adds	r7, #48	; 0x30
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40005400 	.word	0x40005400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020400 	.word	0x40020400
 8001bec:	40005800 	.word	0x40005800
 8001bf0:	40020800 	.word	0x40020800

08001bf4 <UART_RX_Complete_Callback>:
/**
 * @brief Processing the string received from a serial port interrup
 * 
 * @param data  rxBuffer
 */
void UART_RX_Complete_Callback(char* data) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    //printf("Received: %s\r\n", data);
    if(!strcmp( data , "GET_T\n"))
 8001bfc:	4983      	ldr	r1, [pc, #524]	; (8001e0c <UART_RX_Complete_Callback+0x218>)
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe fb06 	bl	8000210 <strcmp>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d12e      	bne.n	8001c68 <UART_RX_Complete_Callback+0x74>
    {
    	  read_bmp280_temperature(&comp_temp_ptr);
 8001c0a:	4881      	ldr	r0, [pc, #516]	; (8001e10 <UART_RX_Complete_Callback+0x21c>)
 8001c0c:	f7ff fc7e 	bl	800150c <read_bmp280_temperature>
    	  memset(spr_buffer, 0, sizeof(spr_buffer));
 8001c10:	2232      	movs	r2, #50	; 0x32
 8001c12:	2100      	movs	r1, #0
 8001c14:	487f      	ldr	r0, [pc, #508]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001c16:	f005 f9e7 	bl	8006fe8 <memset>
    	  sprintf(spr_buffer , "T=+%02d.%02d_C\r\n", (int)comp_temp_ptr/100, (int)(comp_temp_ptr % 100));
 8001c1a:	4b7d      	ldr	r3, [pc, #500]	; (8001e10 <UART_RX_Complete_Callback+0x21c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7e      	ldr	r2, [pc, #504]	; (8001e18 <UART_RX_Complete_Callback+0x224>)
 8001c20:	fb82 1203 	smull	r1, r2, r2, r3
 8001c24:	1152      	asrs	r2, r2, #5
 8001c26:	17db      	asrs	r3, r3, #31
 8001c28:	1ad1      	subs	r1, r2, r3
 8001c2a:	4b79      	ldr	r3, [pc, #484]	; (8001e10 <UART_RX_Complete_Callback+0x21c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b7a      	ldr	r3, [pc, #488]	; (8001e18 <UART_RX_Complete_Callback+0x224>)
 8001c30:	fba3 0302 	umull	r0, r3, r3, r2
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	2064      	movs	r0, #100	; 0x64
 8001c38:	fb00 f303 	mul.w	r3, r0, r3
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	460a      	mov	r2, r1
 8001c40:	4976      	ldr	r1, [pc, #472]	; (8001e1c <UART_RX_Complete_Callback+0x228>)
 8001c42:	4874      	ldr	r0, [pc, #464]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001c44:	f005 f8aa 	bl	8006d9c <siprintf>
    	  printf("send_temp_data: %s\n", spr_buffer);
 8001c48:	4972      	ldr	r1, [pc, #456]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001c4a:	4875      	ldr	r0, [pc, #468]	; (8001e20 <UART_RX_Complete_Callback+0x22c>)
 8001c4c:	f005 f838 	bl	8006cc0 <iprintf>
    	  HAL_UART_Transmit(&huart1,(uint8_t *)spr_buffer,strlen(spr_buffer),0xffff);
 8001c50:	4870      	ldr	r0, [pc, #448]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001c52:	f7fe fb3d 	bl	80002d0 <strlen>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c5e:	496d      	ldr	r1, [pc, #436]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001c60:	4870      	ldr	r0, [pc, #448]	; (8001e24 <UART_RX_Complete_Callback+0x230>)
 8001c62:	f003 fada 	bl	800521a <HAL_UART_Transmit>
		  sprintf(spr_buffer , "order  err\r\n");
	      printf(" %s\n", spr_buffer);
	      HAL_UART_Transmit(&huart1,(uint8_t *)spr_buffer,strlen(spr_buffer),0xffff);
    }

}
 8001c66:	e0cd      	b.n	8001e04 <UART_RX_Complete_Callback+0x210>
    else if(!strcmp( data , "GET_P\n"))
 8001c68:	496f      	ldr	r1, [pc, #444]	; (8001e28 <UART_RX_Complete_Callback+0x234>)
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7fe fad0 	bl	8000210 <strcmp>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d124      	bne.n	8001cc0 <UART_RX_Complete_Callback+0xcc>
    	  read_bmp280_presse(&comp_presse_ptr);
 8001c76:	486d      	ldr	r0, [pc, #436]	; (8001e2c <UART_RX_Complete_Callback+0x238>)
 8001c78:	f7ff fcba 	bl	80015f0 <read_bmp280_presse>
    	  memset(spr_buffer, 0, sizeof(spr_buffer));
 8001c7c:	2232      	movs	r2, #50	; 0x32
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4864      	ldr	r0, [pc, #400]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001c82:	f005 f9b1 	bl	8006fe8 <memset>
    	  sprintf(spr_buffer , "P=%06dPa\r\n",(int)comp_presse_ptr/100);
 8001c86:	4b69      	ldr	r3, [pc, #420]	; (8001e2c <UART_RX_Complete_Callback+0x238>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a63      	ldr	r2, [pc, #396]	; (8001e18 <UART_RX_Complete_Callback+0x224>)
 8001c8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c90:	1152      	asrs	r2, r2, #5
 8001c92:	17db      	asrs	r3, r3, #31
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	4965      	ldr	r1, [pc, #404]	; (8001e30 <UART_RX_Complete_Callback+0x23c>)
 8001c9a:	485e      	ldr	r0, [pc, #376]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001c9c:	f005 f87e 	bl	8006d9c <siprintf>
    	  printf("send_press_data: %s\n", spr_buffer);
 8001ca0:	495c      	ldr	r1, [pc, #368]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001ca2:	4864      	ldr	r0, [pc, #400]	; (8001e34 <UART_RX_Complete_Callback+0x240>)
 8001ca4:	f005 f80c 	bl	8006cc0 <iprintf>
    	  HAL_UART_Transmit(&huart1,(uint8_t *)spr_buffer,strlen(spr_buffer),0xffff);
 8001ca8:	485a      	ldr	r0, [pc, #360]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001caa:	f7fe fb11 	bl	80002d0 <strlen>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb6:	4957      	ldr	r1, [pc, #348]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001cb8:	485a      	ldr	r0, [pc, #360]	; (8001e24 <UART_RX_Complete_Callback+0x230>)
 8001cba:	f003 faae 	bl	800521a <HAL_UART_Transmit>
}
 8001cbe:	e0a1      	b.n	8001e04 <UART_RX_Complete_Callback+0x210>
    else if(!strcmp( data , "GET_A\n"))
 8001cc0:	495d      	ldr	r1, [pc, #372]	; (8001e38 <UART_RX_Complete_Callback+0x244>)
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe faa4 	bl	8000210 <strcmp>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d11f      	bne.n	8001d0e <UART_RX_Complete_Callback+0x11a>
       	  memset(spr_buffer, 0, sizeof(spr_buffer));
 8001cce:	2232      	movs	r2, #50	; 0x32
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4850      	ldr	r0, [pc, #320]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001cd4:	f005 f988 	bl	8006fe8 <memset>
       	  sprintf(spr_buffer , "A=%7.4f\r\n", Angle);
 8001cd8:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <UART_RX_Complete_Callback+0x248>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc63 	bl	80005a8 <__aeabi_f2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4956      	ldr	r1, [pc, #344]	; (8001e40 <UART_RX_Complete_Callback+0x24c>)
 8001ce8:	484a      	ldr	r0, [pc, #296]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001cea:	f005 f857 	bl	8006d9c <siprintf>
          printf("send_Angle_data: %s\n", spr_buffer);
 8001cee:	4949      	ldr	r1, [pc, #292]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001cf0:	4854      	ldr	r0, [pc, #336]	; (8001e44 <UART_RX_Complete_Callback+0x250>)
 8001cf2:	f004 ffe5 	bl	8006cc0 <iprintf>
       	  HAL_UART_Transmit(&huart1,(uint8_t *)spr_buffer,strlen(spr_buffer),0xffff);
 8001cf6:	4847      	ldr	r0, [pc, #284]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001cf8:	f7fe faea 	bl	80002d0 <strlen>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d04:	4943      	ldr	r1, [pc, #268]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001d06:	4847      	ldr	r0, [pc, #284]	; (8001e24 <UART_RX_Complete_Callback+0x230>)
 8001d08:	f003 fa87 	bl	800521a <HAL_UART_Transmit>
}
 8001d0c:	e07a      	b.n	8001e04 <UART_RX_Complete_Callback+0x210>
    else if (!strcmp( data , "GET_K\n"))
 8001d0e:	494e      	ldr	r1, [pc, #312]	; (8001e48 <UART_RX_Complete_Callback+0x254>)
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7fe fa7d 	bl	8000210 <strcmp>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d11f      	bne.n	8001d5c <UART_RX_Complete_Callback+0x168>
      	  memset(spr_buffer, 0, sizeof(spr_buffer));
 8001d1c:	2232      	movs	r2, #50	; 0x32
 8001d1e:	2100      	movs	r1, #0
 8001d20:	483c      	ldr	r0, [pc, #240]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001d22:	f005 f961 	bl	8006fe8 <memset>
          sprintf(spr_buffer , "K=%7.5f\r\n",coefficient_K);
 8001d26:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <UART_RX_Complete_Callback+0x258>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fc3c 	bl	80005a8 <__aeabi_f2d>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4946      	ldr	r1, [pc, #280]	; (8001e50 <UART_RX_Complete_Callback+0x25c>)
 8001d36:	4837      	ldr	r0, [pc, #220]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001d38:	f005 f830 	bl	8006d9c <siprintf>
          printf("k: %s\n", spr_buffer);
 8001d3c:	4935      	ldr	r1, [pc, #212]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001d3e:	4845      	ldr	r0, [pc, #276]	; (8001e54 <UART_RX_Complete_Callback+0x260>)
 8001d40:	f004 ffbe 	bl	8006cc0 <iprintf>
          HAL_UART_Transmit(&huart1,(uint8_t *)spr_buffer,strlen(spr_buffer),0xffff);
 8001d44:	4833      	ldr	r0, [pc, #204]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001d46:	f7fe fac3 	bl	80002d0 <strlen>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d52:	4930      	ldr	r1, [pc, #192]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001d54:	4833      	ldr	r0, [pc, #204]	; (8001e24 <UART_RX_Complete_Callback+0x230>)
 8001d56:	f003 fa60 	bl	800521a <HAL_UART_Transmit>
}
 8001d5a:	e053      	b.n	8001e04 <UART_RX_Complete_Callback+0x210>
    else if(sscanf(data, "SET_K=%d", &value) == 1 && value >= 0 && value < 256)
 8001d5c:	4a3e      	ldr	r2, [pc, #248]	; (8001e58 <UART_RX_Complete_Callback+0x264>)
 8001d5e:	493f      	ldr	r1, [pc, #252]	; (8001e5c <UART_RX_Complete_Callback+0x268>)
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f005 f83b 	bl	8006ddc <siscanf>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d133      	bne.n	8001dd4 <UART_RX_Complete_Callback+0x1e0>
 8001d6c:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <UART_RX_Complete_Callback+0x264>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db2f      	blt.n	8001dd4 <UART_RX_Complete_Callback+0x1e0>
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <UART_RX_Complete_Callback+0x264>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2bff      	cmp	r3, #255	; 0xff
 8001d7a:	dc2b      	bgt.n	8001dd4 <UART_RX_Complete_Callback+0x1e0>
    	  coefficient_K = (float) value / 100 ;
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <UART_RX_Complete_Callback+0x264>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d88:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001e60 <UART_RX_Complete_Callback+0x26c>
 8001d8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <UART_RX_Complete_Callback+0x258>)
 8001d92:	edc3 7a00 	vstr	s15, [r3]
    	  printf("K is valid  %f\n", coefficient_K );
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <UART_RX_Complete_Callback+0x258>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fc04 	bl	80005a8 <__aeabi_f2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	482f      	ldr	r0, [pc, #188]	; (8001e64 <UART_RX_Complete_Callback+0x270>)
 8001da6:	f004 ff8b 	bl	8006cc0 <iprintf>
          memset(spr_buffer, 0, sizeof(spr_buffer));
 8001daa:	2232      	movs	r2, #50	; 0x32
 8001dac:	2100      	movs	r1, #0
 8001dae:	4819      	ldr	r0, [pc, #100]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001db0:	f005 f91a 	bl	8006fe8 <memset>
          sprintf(spr_buffer , "SET_K=OK\r\n");
 8001db4:	492c      	ldr	r1, [pc, #176]	; (8001e68 <UART_RX_Complete_Callback+0x274>)
 8001db6:	4817      	ldr	r0, [pc, #92]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001db8:	f004 fff0 	bl	8006d9c <siprintf>
          HAL_UART_Transmit(&huart1,(uint8_t *)spr_buffer,strlen(spr_buffer),0xffff);
 8001dbc:	4815      	ldr	r0, [pc, #84]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001dbe:	f7fe fa87 	bl	80002d0 <strlen>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dca:	4912      	ldr	r1, [pc, #72]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001dcc:	4815      	ldr	r0, [pc, #84]	; (8001e24 <UART_RX_Complete_Callback+0x230>)
 8001dce:	f003 fa24 	bl	800521a <HAL_UART_Transmit>
}
 8001dd2:	e017      	b.n	8001e04 <UART_RX_Complete_Callback+0x210>
		  memset(spr_buffer, 0, sizeof(spr_buffer));
 8001dd4:	2232      	movs	r2, #50	; 0x32
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	480e      	ldr	r0, [pc, #56]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001dda:	f005 f905 	bl	8006fe8 <memset>
		  sprintf(spr_buffer , "order  err\r\n");
 8001dde:	4923      	ldr	r1, [pc, #140]	; (8001e6c <UART_RX_Complete_Callback+0x278>)
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001de2:	f004 ffdb 	bl	8006d9c <siprintf>
	      printf(" %s\n", spr_buffer);
 8001de6:	490b      	ldr	r1, [pc, #44]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001de8:	4821      	ldr	r0, [pc, #132]	; (8001e70 <UART_RX_Complete_Callback+0x27c>)
 8001dea:	f004 ff69 	bl	8006cc0 <iprintf>
	      HAL_UART_Transmit(&huart1,(uint8_t *)spr_buffer,strlen(spr_buffer),0xffff);
 8001dee:	4809      	ldr	r0, [pc, #36]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001df0:	f7fe fa6e 	bl	80002d0 <strlen>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dfc:	4905      	ldr	r1, [pc, #20]	; (8001e14 <UART_RX_Complete_Callback+0x220>)
 8001dfe:	4809      	ldr	r0, [pc, #36]	; (8001e24 <UART_RX_Complete_Callback+0x230>)
 8001e00:	f003 fa0b 	bl	800521a <HAL_UART_Transmit>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	08009cdc 	.word	0x08009cdc
 8001e10:	2000039c 	.word	0x2000039c
 8001e14:	200002e8 	.word	0x200002e8
 8001e18:	51eb851f 	.word	0x51eb851f
 8001e1c:	08009ce4 	.word	0x08009ce4
 8001e20:	08009cf8 	.word	0x08009cf8
 8001e24:	200003d0 	.word	0x200003d0
 8001e28:	08009d0c 	.word	0x08009d0c
 8001e2c:	200003a4 	.word	0x200003a4
 8001e30:	08009d14 	.word	0x08009d14
 8001e34:	08009d20 	.word	0x08009d20
 8001e38:	08009d38 	.word	0x08009d38
 8001e3c:	20000388 	.word	0x20000388
 8001e40:	08009d40 	.word	0x08009d40
 8001e44:	08009d4c 	.word	0x08009d4c
 8001e48:	08009d64 	.word	0x08009d64
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	08009d6c 	.word	0x08009d6c
 8001e54:	08009d78 	.word	0x08009d78
 8001e58:	20000384 	.word	0x20000384
 8001e5c:	08009d80 	.word	0x08009d80
 8001e60:	42c80000 	.word	0x42c80000
 8001e64:	08009d8c 	.word	0x08009d8c
 8001e68:	08009d9c 	.word	0x08009d9c
 8001e6c:	08009da8 	.word	0x08009da8
 8001e70:	08009db8 	.word	0x08009db8

08001e74 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <HAL_UART_RxCpltCallback+0x5c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d11f      	bne.n	8001ec6 <HAL_UART_RxCpltCallback+0x52>
        rxBuffer[rxIndex++] = rxData;
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_UART_RxCpltCallback+0x60>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	b291      	uxth	r1, r2
 8001e8e:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <HAL_UART_RxCpltCallback+0x60>)
 8001e90:	8011      	strh	r1, [r2, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_UART_RxCpltCallback+0x64>)
 8001e96:	7819      	ldrb	r1, [r3, #0]
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_UART_RxCpltCallback+0x68>)
 8001e9a:	5499      	strb	r1, [r3, r2]
       if (rxData == '\n') { 
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <HAL_UART_RxCpltCallback+0x64>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b0a      	cmp	r3, #10
 8001ea2:	d10b      	bne.n	8001ebc <HAL_UART_RxCpltCallback+0x48>
        rxBuffer[rxIndex] = '\0'; 
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_UART_RxCpltCallback+0x60>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_UART_RxCpltCallback+0x68>)
 8001eac:	2100      	movs	r1, #0
 8001eae:	5499      	strb	r1, [r3, r2]
        rxIndex = 0;         
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_UART_RxCpltCallback+0x60>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	801a      	strh	r2, [r3, #0]
        //printf("Received data: %s\n", rxBuffer);
        UART_RX_Complete_Callback(rxBuffer);
 8001eb6:	4809      	ldr	r0, [pc, #36]	; (8001edc <HAL_UART_RxCpltCallback+0x68>)
 8001eb8:	f7ff fe9c 	bl	8001bf4 <UART_RX_Complete_Callback>
        }
        HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4906      	ldr	r1, [pc, #24]	; (8001ed8 <HAL_UART_RxCpltCallback+0x64>)
 8001ec0:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <HAL_UART_RxCpltCallback+0x6c>)
 8001ec2:	f003 fa3c 	bl	800533e <HAL_UART_Receive_IT>
    }
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40011000 	.word	0x40011000
 8001ed4:	20000392 	.word	0x20000392
 8001ed8:	2000038c 	.word	0x2000038c
 8001edc:	2000031c 	.word	0x2000031c
 8001ee0:	200003d0 	.word	0x200003d0

08001ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eea:	f000 fd9f 	bl	8002a2c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eee:	f000 f8a1 	bl	8002034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef2:	f7ff fd17 	bl	8001924 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ef6:	f000 fcb9 	bl	800286c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001efa:	f7ff fd81 	bl	8001a00 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001efe:	f7ff fdad 	bl	8001a5c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001f02:	f000 fc89 	bl	8002818 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8001f06:	f7ff fc55 	bl	80017b4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  MPU9250_Init();
 8001f0a:	f000 f907 	bl	800211c <MPU9250_Init>
  BMP280_Init();
 8001f0e:	f7ff f849 	bl	8000fa4 <BMP280_Init>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001f12:	2201      	movs	r2, #1
 8001f14:	493b      	ldr	r1, [pc, #236]	; (8002004 <main+0x120>)
 8001f16:	483c      	ldr	r0, [pc, #240]	; (8002008 <main+0x124>)
 8001f18:	f003 fa11 	bl	800533e <HAL_UART_Receive_IT>
  MPU_calibrateGyro(1500);
 8001f1c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001f20:	f000 fabc 	bl	800249c <MPU_calibrateGyro>
  HAL_CAN_Start(&hcan1);
 8001f24:	4839      	ldr	r0, [pc, #228]	; (800200c <main+0x128>)
 8001f26:	f000 ff12 	bl	8002d4e <HAL_CAN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  read_bmp280_temperature(&comp_temp_ptr);
 8001f2a:	4839      	ldr	r0, [pc, #228]	; (8002010 <main+0x12c>)
 8001f2c:	f7ff faee 	bl	800150c <read_bmp280_temperature>
  HAL_Delay(1000);
 8001f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f34:	f000 fdec 	bl	8002b10 <HAL_Delay>
  read_bmp280_temperature(&new_comp_temp_ptr);
 8001f38:	4836      	ldr	r0, [pc, #216]	; (8002014 <main+0x130>)
 8001f3a:	f7ff fae7 	bl	800150c <read_bmp280_temperature>
  temp_diff = abs(new_comp_temp_ptr - comp_temp_ptr);
 8001f3e:	4b35      	ldr	r3, [pc, #212]	; (8002014 <main+0x130>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b33      	ldr	r3, [pc, #204]	; (8002010 <main+0x12c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bfb8      	it	lt
 8001f4c:	425b      	neglt	r3, r3
 8001f4e:	4a32      	ldr	r2, [pc, #200]	; (8002018 <main+0x134>)
 8001f50:	6013      	str	r3, [r2, #0]
  Angle = round(((float)temp_diff/10) * ((float)coefficient_K));
 8001f52:	4b31      	ldr	r3, [pc, #196]	; (8002018 <main+0x134>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <main+0x138>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f70:	ee17 0a90 	vmov	r0, s15
 8001f74:	f7fe fb18 	bl	80005a8 <__aeabi_f2d>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	ec43 2b10 	vmov	d0, r2, r3
 8001f80:	f007 fd24 	bl	80099cc <round>
 8001f84:	ec53 2b10 	vmov	r2, r3, d0
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe fe3c 	bl	8000c08 <__aeabi_d2f>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4a23      	ldr	r2, [pc, #140]	; (8002020 <main+0x13c>)
 8001f94:	6013      	str	r3, [r2, #0]
  can_buf[0] = (Angle > UINT8_MAX) ? UINT8_MAX : (uint8_t)Angle;
 8001f96:	4b22      	ldr	r3, [pc, #136]	; (8002020 <main+0x13c>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002024 <main+0x140>
 8001fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa8:	dd01      	ble.n	8001fae <main+0xca>
 8001faa:	23ff      	movs	r3, #255	; 0xff
 8001fac:	e008      	b.n	8001fc0 <main+0xdc>
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <main+0x13c>)
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8001fbc:	793b      	ldrb	r3, [r7, #4]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	4a19      	ldr	r2, [pc, #100]	; (8002028 <main+0x144>)
 8001fc2:	7013      	strb	r3, [r2, #0]
  printf("can_buf[0]: %x\n",  can_buf[0]);
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <main+0x144>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4818      	ldr	r0, [pc, #96]	; (800202c <main+0x148>)
 8001fcc:	f004 fe78 	bl	8006cc0 <iprintf>
  can_buf[1] = 0x00;
 8001fd0:	4b15      	ldr	r3, [pc, #84]	; (8002028 <main+0x144>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	705a      	strb	r2, [r3, #1]
  CAN_TX_Message(can_buf, length) ;
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <main+0x14c>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4812      	ldr	r0, [pc, #72]	; (8002028 <main+0x144>)
 8001fde:	f7ff fc69 	bl	80018b4 <CAN_TX_Message>
  can_buf[1] = 0x01;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <main+0x144>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
  printf("can_buf[0]: %x\n",  can_buf[0]);
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <main+0x144>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	480f      	ldr	r0, [pc, #60]	; (800202c <main+0x148>)
 8001ff0:	f004 fe66 	bl	8006cc0 <iprintf>
  CAN_TX_Message(can_buf, length) ;
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <main+0x14c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480b      	ldr	r0, [pc, #44]	; (8002028 <main+0x144>)
 8001ffc:	f7ff fc5a 	bl	80018b4 <CAN_TX_Message>
  read_bmp280_temperature(&comp_temp_ptr);
 8002000:	e793      	b.n	8001f2a <main+0x46>
 8002002:	bf00      	nop
 8002004:	2000038c 	.word	0x2000038c
 8002008:	200003d0 	.word	0x200003d0
 800200c:	20000218 	.word	0x20000218
 8002010:	2000039c 	.word	0x2000039c
 8002014:	200003a0 	.word	0x200003a0
 8002018:	20000380 	.word	0x20000380
 800201c:	20000000 	.word	0x20000000
 8002020:	20000388 	.word	0x20000388
 8002024:	437f0000 	.word	0x437f0000
 8002028:	20000390 	.word	0x20000390
 800202c:	08009dc0 	.word	0x08009dc0
 8002030:	20000004 	.word	0x20000004

08002034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b094      	sub	sp, #80	; 0x50
 8002038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800203a:	f107 031c 	add.w	r3, r7, #28
 800203e:	2234      	movs	r2, #52	; 0x34
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f004 ffd0 	bl	8006fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002048:	f107 0308 	add.w	r3, r7, #8
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <SystemClock_Config+0xd4>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	4a29      	ldr	r2, [pc, #164]	; (8002108 <SystemClock_Config+0xd4>)
 8002062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002066:	6413      	str	r3, [r2, #64]	; 0x40
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <SystemClock_Config+0xd4>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002074:	2300      	movs	r3, #0
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	4b24      	ldr	r3, [pc, #144]	; (800210c <SystemClock_Config+0xd8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <SystemClock_Config+0xd8>)
 8002082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b20      	ldr	r3, [pc, #128]	; (800210c <SystemClock_Config+0xd8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002094:	2302      	movs	r3, #2
 8002096:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002098:	2301      	movs	r3, #1
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800209c:	2310      	movs	r3, #16
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020a0:	2302      	movs	r3, #2
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020a4:	2300      	movs	r3, #0
 80020a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80020a8:	2310      	movs	r3, #16
 80020aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80020ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80020b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80020b2:	2304      	movs	r3, #4
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80020b6:	2302      	movs	r3, #2
 80020b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020ba:	2302      	movs	r3, #2
 80020bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4618      	mov	r0, r3
 80020c4:	f002 fdbe 	bl	8004c44 <HAL_RCC_OscConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80020ce:	f000 f81f 	bl	8002110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d2:	230f      	movs	r3, #15
 80020d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d6:	2302      	movs	r3, #2
 80020d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020e8:	f107 0308 	add.w	r3, r7, #8
 80020ec:	2102      	movs	r1, #2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 fa5e 	bl	80045b0 <HAL_RCC_ClockConfig>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80020fa:	f000 f809 	bl	8002110 <Error_Handler>
  }
}
 80020fe:	bf00      	nop
 8002100:	3750      	adds	r7, #80	; 0x50
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	40007000 	.word	0x40007000

08002110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002114:	b672      	cpsid	i
}
 8002116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002118:	e7fe      	b.n	8002118 <Error_Handler+0x8>
	...

0800211c <MPU9250_Init>:
  * @brief: Initialize MPU9250
  * @retval:  Return value: 0 for success
             Other values represent error codes
  */
uint8_t MPU9250_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af04      	add	r7, sp, #16
	uint8_t res=0;
 8002122:	2300      	movs	r3, #0
 8002124:	71fb      	strb	r3, [r7, #7]

	uint8_t mode_addr_val[6] = {resetval,wakeval,closeval,modebypass,clesel,signlemes};
 8002126:	4a61      	ldr	r2, [pc, #388]	; (80022ac <MPU9250_Init+0x190>)
 8002128:	463b      	mov	r3, r7
 800212a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800212e:	6018      	str	r0, [r3, #0]
 8002130:	3304      	adds	r3, #4
 8002132:	8019      	strh	r1, [r3, #0]

  HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU_PWR_MGMT1_REG,1,mode_addr_val,1,1000);  //reset
 8002134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002138:	9302      	str	r3, [sp, #8]
 800213a:	2301      	movs	r3, #1
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	463b      	mov	r3, r7
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2301      	movs	r3, #1
 8002144:	226b      	movs	r2, #107	; 0x6b
 8002146:	21d0      	movs	r1, #208	; 0xd0
 8002148:	4859      	ldr	r0, [pc, #356]	; (80022b0 <MPU9250_Init+0x194>)
 800214a:	f001 fbb5 	bl	80038b8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 800214e:	2064      	movs	r0, #100	; 0x64
 8002150:	f000 fcde 	bl	8002b10 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU_PWR_MGMT1_REG,1,&mode_addr_val[1],1,1000); //wake up mpu9250
 8002154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	2301      	movs	r3, #1
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	463b      	mov	r3, r7
 8002160:	3301      	adds	r3, #1
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2301      	movs	r3, #1
 8002166:	226b      	movs	r2, #107	; 0x6b
 8002168:	21d0      	movs	r1, #208	; 0xd0
 800216a:	4851      	ldr	r0, [pc, #324]	; (80022b0 <MPU9250_Init+0x194>)
 800216c:	f001 fba4 	bl	80038b8 <HAL_I2C_Mem_Write>

  MPU_Set_Gyro_Fsr(1);					        	//±500dps=±500°/s   ±32768
 8002170:	2001      	movs	r0, #1
 8002172:	f000 f8a3 	bl	80022bc <MPU_Set_Gyro_Fsr>
  MPU_Set_Accel_Fsr(0);					       	 	//±2g=±2*9.8m/s2    ±32768
 8002176:	2000      	movs	r0, #0
 8002178:	f000 f8be 	bl	80022f8 <MPU_Set_Accel_Fsr>
  MPU_Set_Rate(50);						       	 	//50Hz
 800217c:	2032      	movs	r0, #50	; 0x32
 800217e:	f000 f915 	bl	80023ac <MPU_Set_Rate>


  HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU_INT_EN_REG,1,&mode_addr_val[2],1,1000);   //Disable all interrupts
 8002182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002186:	9302      	str	r3, [sp, #8]
 8002188:	2301      	movs	r3, #1
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	463b      	mov	r3, r7
 800218e:	3302      	adds	r3, #2
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	2301      	movs	r3, #1
 8002194:	2238      	movs	r2, #56	; 0x38
 8002196:	21d0      	movs	r1, #208	; 0xd0
 8002198:	4845      	ldr	r0, [pc, #276]	; (80022b0 <MPU9250_Init+0x194>)
 800219a:	f001 fb8d 	bl	80038b8 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU_USER_CTRL_REG,1,&mode_addr_val[2],1,1000);//Disable I2C master mod
 800219e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a2:	9302      	str	r3, [sp, #8]
 80021a4:	2301      	movs	r3, #1
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	463b      	mov	r3, r7
 80021aa:	3302      	adds	r3, #2
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2301      	movs	r3, #1
 80021b0:	226a      	movs	r2, #106	; 0x6a
 80021b2:	21d0      	movs	r1, #208	; 0xd0
 80021b4:	483e      	ldr	r0, [pc, #248]	; (80022b0 <MPU9250_Init+0x194>)
 80021b6:	f001 fb7f 	bl	80038b8 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU_FIFO_EN_REG,1,&mode_addr_val[2],1,1000);//Disable FIFO
 80021ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	2301      	movs	r3, #1
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	463b      	mov	r3, r7
 80021c6:	3302      	adds	r3, #2
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2301      	movs	r3, #1
 80021cc:	2223      	movs	r2, #35	; 0x23
 80021ce:	21d0      	movs	r1, #208	; 0xd0
 80021d0:	4837      	ldr	r0, [pc, #220]	; (80022b0 <MPU9250_Init+0x194>)
 80021d2:	f001 fb71 	bl	80038b8 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU_INTBP_CFG_REG,1,&mode_addr_val[3],1,1000);//Enable bypass mode
 80021d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	2301      	movs	r3, #1
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	463b      	mov	r3, r7
 80021e2:	3303      	adds	r3, #3
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2301      	movs	r3, #1
 80021e8:	2237      	movs	r2, #55	; 0x37
 80021ea:	21d0      	movs	r1, #208	; 0xd0
 80021ec:	4830      	ldr	r0, [pc, #192]	; (80022b0 <MPU9250_Init+0x194>)
 80021ee:	f001 fb63 	bl	80038b8 <HAL_I2C_Mem_Write>

   HAL_I2C_Mem_Read(&hi2c1,MPU9250_ADDR,MPU_DEVICE_ID_REG,1,&res,1,1000);
 80021f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	2301      	movs	r3, #1
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	1dfb      	adds	r3, r7, #7
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2301      	movs	r3, #1
 8002202:	2275      	movs	r2, #117	; 0x75
 8002204:	21d0      	movs	r1, #208	; 0xd0
 8002206:	482a      	ldr	r0, [pc, #168]	; (80022b0 <MPU9250_Init+0x194>)
 8002208:	f001 fc50 	bl	8003aac <HAL_I2C_Mem_Read>
    if(res==MPU6500_ID)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	2b71      	cmp	r3, #113	; 0x71
 8002210:	d132      	bne.n	8002278 <MPU9250_Init+0x15c>
    {
       printf("read MPU9250ID OK\r\n");
 8002212:	4828      	ldr	r0, [pc, #160]	; (80022b4 <MPU9250_Init+0x198>)
 8002214:	f004 fdba 	bl	8006d8c <puts>
       HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU_PWR_MGMT1_REG,1,&mode_addr_val[4],1,1000);//Set CLKSEL with PLL X-axis as reference.
 8002218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221c:	9302      	str	r3, [sp, #8]
 800221e:	2301      	movs	r3, #1
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	463b      	mov	r3, r7
 8002224:	3304      	adds	r3, #4
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2301      	movs	r3, #1
 800222a:	226b      	movs	r2, #107	; 0x6b
 800222c:	21d0      	movs	r1, #208	; 0xd0
 800222e:	4820      	ldr	r0, [pc, #128]	; (80022b0 <MPU9250_Init+0x194>)
 8002230:	f001 fb42 	bl	80038b8 <HAL_I2C_Mem_Write>
       HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU_PWR_MGMT2_REG,1,&mode_addr_val[2],1,1000);//Acceleration and gyroscope are both operational
 8002234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002238:	9302      	str	r3, [sp, #8]
 800223a:	2301      	movs	r3, #1
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	463b      	mov	r3, r7
 8002240:	3302      	adds	r3, #2
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2301      	movs	r3, #1
 8002246:	226c      	movs	r2, #108	; 0x6c
 8002248:	21d0      	movs	r1, #208	; 0xd0
 800224a:	4819      	ldr	r0, [pc, #100]	; (80022b0 <MPU9250_Init+0x194>)
 800224c:	f001 fb34 	bl	80038b8 <HAL_I2C_Mem_Write>
	   MPU_Set_Rate(50);						       	//Set the sampling rate to 50Hz.
 8002250:	2032      	movs	r0, #50	; 0x32
 8002252:	f000 f8ab 	bl	80023ac <MPU_Set_Rate>
    }
	else return 1;
  HAL_I2C_Mem_Read(&hi2c1,AK8963_ADDR,MAG_WIA,1,&res,1,1000);
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	9302      	str	r3, [sp, #8]
 800225c:	2301      	movs	r3, #1
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	1dfb      	adds	r3, r7, #7
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2301      	movs	r3, #1
 8002266:	2200      	movs	r2, #0
 8002268:	2118      	movs	r1, #24
 800226a:	4811      	ldr	r0, [pc, #68]	; (80022b0 <MPU9250_Init+0x194>)
 800226c:	f001 fc1e 	bl	8003aac <HAL_I2C_Mem_Read>
    if(res==AK8963_ID)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	2b48      	cmp	r3, #72	; 0x48
 8002274:	d115      	bne.n	80022a2 <MPU9250_Init+0x186>
 8002276:	e001      	b.n	800227c <MPU9250_Init+0x160>
	else return 1;
 8002278:	2301      	movs	r3, #1
 800227a:	e013      	b.n	80022a4 <MPU9250_Init+0x188>
    {
    	printf("read AK8963 ok\r\n");
 800227c:	480e      	ldr	r0, [pc, #56]	; (80022b8 <MPU9250_Init+0x19c>)
 800227e:	f004 fd85 	bl	8006d8c <puts>
        HAL_I2C_Mem_Write(&hi2c1,AK8963_ADDR,MAG_CNTL1,1,&mode_addr_val[5],1,1000);//Set AK8963 to single measurement mode.'
 8002282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002286:	9302      	str	r3, [sp, #8]
 8002288:	2301      	movs	r3, #1
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	463b      	mov	r3, r7
 800228e:	3305      	adds	r3, #5
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2301      	movs	r3, #1
 8002294:	220a      	movs	r2, #10
 8002296:	2118      	movs	r1, #24
 8002298:	4805      	ldr	r0, [pc, #20]	; (80022b0 <MPU9250_Init+0x194>)
 800229a:	f001 fb0d 	bl	80038b8 <HAL_I2C_Mem_Write>
    }
	else return 1;

    return 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <MPU9250_Init+0x188>
	else return 1;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	08009df4 	.word	0x08009df4
 80022b0:	20000240 	.word	0x20000240
 80022b4:	08009dd0 	.word	0x08009dd0
 80022b8:	08009de4 	.word	0x08009de4

080022bc <MPU_Set_Gyro_Fsr>:
  * @param: fsr: 0 for ±250dps, 1 for ±500dps, 2 for ±1000dps, 3 for ±2000dps
  * @retval:  Return value: 0 for successful setting
              Other values indicate a failure to set
  */
uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af04      	add	r7, sp, #16
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
	uint8_t fsrval = (fsr<<3) ;
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	73fb      	strb	r3, [r7, #15]
	return  HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU_GYRO_CFG_REG,1,&fsrval,1,1000);//设置陀螺仪满量程范围
 80022ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d2:	9302      	str	r3, [sp, #8]
 80022d4:	2301      	movs	r3, #1
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	f107 030f 	add.w	r3, r7, #15
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2301      	movs	r3, #1
 80022e0:	221b      	movs	r2, #27
 80022e2:	21d0      	movs	r1, #208	; 0xd0
 80022e4:	4803      	ldr	r0, [pc, #12]	; (80022f4 <MPU_Set_Gyro_Fsr+0x38>)
 80022e6:	f001 fae7 	bl	80038b8 <HAL_I2C_Mem_Write>
 80022ea:	4603      	mov	r3, r0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000240 	.word	0x20000240

080022f8 <MPU_Set_Accel_Fsr>:
//设置MPU9250加速度传感器满量程范围
//fsr:0,±2g;1,±4g;2,±8g;3,±16g
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Accel_Fsr(uint8_t fsr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af04      	add	r7, sp, #16
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
	uint8_t fsrval = (fsr<<3) ;
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	73fb      	strb	r3, [r7, #15]
	return  HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU_ACCEL_CFG_REG,1,&fsrval,1,1000);//设置加速度传感器满量程范围
 800230a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	2301      	movs	r3, #1
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	f107 030f 	add.w	r3, r7, #15
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2301      	movs	r3, #1
 800231c:	221c      	movs	r2, #28
 800231e:	21d0      	movs	r1, #208	; 0xd0
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <MPU_Set_Accel_Fsr+0x38>)
 8002322:	f001 fac9 	bl	80038b8 <HAL_I2C_Mem_Write>
 8002326:	4603      	mov	r3, r0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000240 	.word	0x20000240

08002334 <MPU_Set_LPF>:
  * @param: lpf: Digital low-pass filter frequency (Hz)
  * @retval: Return value: 0 for successful setting
  *               Other values indicate a failure to set
  */
uint8_t MPU_Set_LPF(uint16_t lpf)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af04      	add	r7, sp, #16
 800233a:	4603      	mov	r3, r0
 800233c:	80fb      	strh	r3, [r7, #6]
	uint8_t data=0;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
	if(lpf>=188)data=1;
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	2bbb      	cmp	r3, #187	; 0xbb
 8002346:	d902      	bls.n	800234e <MPU_Set_LPF+0x1a>
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e019      	b.n	8002382 <MPU_Set_LPF+0x4e>
	else if(lpf>=98)data=2;
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	2b61      	cmp	r3, #97	; 0x61
 8002352:	d902      	bls.n	800235a <MPU_Set_LPF+0x26>
 8002354:	2302      	movs	r3, #2
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e013      	b.n	8002382 <MPU_Set_LPF+0x4e>
	else if(lpf>=42)data=3;
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	2b29      	cmp	r3, #41	; 0x29
 800235e:	d902      	bls.n	8002366 <MPU_Set_LPF+0x32>
 8002360:	2303      	movs	r3, #3
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	e00d      	b.n	8002382 <MPU_Set_LPF+0x4e>
	else if(lpf>=20)data=4;
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	2b13      	cmp	r3, #19
 800236a:	d902      	bls.n	8002372 <MPU_Set_LPF+0x3e>
 800236c:	2304      	movs	r3, #4
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e007      	b.n	8002382 <MPU_Set_LPF+0x4e>
	else if(lpf>=10)data=5;
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	2b09      	cmp	r3, #9
 8002376:	d902      	bls.n	800237e <MPU_Set_LPF+0x4a>
 8002378:	2305      	movs	r3, #5
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e001      	b.n	8002382 <MPU_Set_LPF+0x4e>
	else data=6;
 800237e:	2306      	movs	r3, #6
 8002380:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU_CFG_REG,1,&data,1,1000);
 8002382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002386:	9302      	str	r3, [sp, #8]
 8002388:	2301      	movs	r3, #1
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	f107 030f 	add.w	r3, r7, #15
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2301      	movs	r3, #1
 8002394:	221a      	movs	r2, #26
 8002396:	21d0      	movs	r1, #208	; 0xd0
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <MPU_Set_LPF+0x74>)
 800239a:	f001 fa8d 	bl	80038b8 <HAL_I2C_Mem_Write>
 800239e:	4603      	mov	r3, r0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000240 	.word	0x20000240

080023ac <MPU_Set_Rate>:
  * @param rate: Sampling rate in the range of 4 to 1000 Hz
  * @retval 0 for successful setting
  *         Other values indicate a failure to set
  */
uint8_t MPU_Set_Rate(uint16_t rate)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af04      	add	r7, sp, #16
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	if(rate>1000)rate=1000;
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023bc:	d902      	bls.n	80023c4 <MPU_Set_Rate+0x18>
 80023be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c2:	80fb      	strh	r3, [r7, #6]
	if(rate<4)rate=4;
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d801      	bhi.n	80023ce <MPU_Set_Rate+0x22>
 80023ca:	2304      	movs	r3, #4
 80023cc:	80fb      	strh	r3, [r7, #6]
	data=1000/rate-1;
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	73fb      	strb	r3, [r7, #15]
	data = HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU_SAMPLE_RATE_REG,1,&data,1,1000);
 80023e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e4:	9302      	str	r3, [sp, #8]
 80023e6:	2301      	movs	r3, #1
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	f107 030f 	add.w	r3, r7, #15
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2301      	movs	r3, #1
 80023f2:	2219      	movs	r2, #25
 80023f4:	21d0      	movs	r1, #208	; 0xd0
 80023f6:	4808      	ldr	r0, [pc, #32]	; (8002418 <MPU_Set_Rate+0x6c>)
 80023f8:	f001 fa5e 	bl	80038b8 <HAL_I2C_Mem_Write>
 80023fc:	4603      	mov	r3, r0
 80023fe:	73fb      	strb	r3, [r7, #15]
 	return MPU_Set_LPF(rate/2);	//自动设置LPF为采样率的一半
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	085b      	lsrs	r3, r3, #1
 8002404:	b29b      	uxth	r3, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff94 	bl	8002334 <MPU_Set_LPF>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000240 	.word	0x20000240

0800241c <MPU_Get_Gyroscope>:
  * @param gyro[2]: Gyroscope raw reading for the z-axis (signed)
  * @retval 0 for success
  *         Other values indicate an error code
  */
uint8_t MPU_Get_Gyroscope(uint16_t *gyro)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af04      	add	r7, sp, #16
 8002422:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    HAL_StatusTypeDef res = 0x00;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]
	res = HAL_I2C_Mem_Read(&hi2c1,MPU9250_ADDR,MPU_GYRO_XOUTH_REG,1,buf,6,1000);
 8002428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242c:	9302      	str	r3, [sp, #8]
 800242e:	2306      	movs	r3, #6
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2301      	movs	r3, #1
 800243a:	2243      	movs	r2, #67	; 0x43
 800243c:	21d0      	movs	r1, #208	; 0xd0
 800243e:	4816      	ldr	r0, [pc, #88]	; (8002498 <MPU_Get_Gyroscope+0x7c>)
 8002440:	f001 fb34 	bl	8003aac <HAL_I2C_Mem_Read>
 8002444:	4603      	mov	r3, r0
 8002446:	73fb      	strb	r3, [r7, #15]
	if(HAL_OK == res)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11f      	bne.n	800248e <MPU_Get_Gyroscope+0x72>
	{
		gyro[0] =(((uint16_t)buf[0]<<8)|buf[1]);
 800244e:	7a3b      	ldrb	r3, [r7, #8]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	b21a      	sxth	r2, r3
 8002454:	7a7b      	ldrb	r3, [r7, #9]
 8002456:	b21b      	sxth	r3, r3
 8002458:	4313      	orrs	r3, r2
 800245a:	b21b      	sxth	r3, r3
 800245c:	b29a      	uxth	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	801a      	strh	r2, [r3, #0]
		gyro[1] =(((uint16_t)buf[2]<<8)|buf[3]);
 8002462:	7abb      	ldrb	r3, [r7, #10]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	b21a      	sxth	r2, r3
 8002468:	7afb      	ldrb	r3, [r7, #11]
 800246a:	b21b      	sxth	r3, r3
 800246c:	4313      	orrs	r3, r2
 800246e:	b21a      	sxth	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3302      	adds	r3, #2
 8002474:	b292      	uxth	r2, r2
 8002476:	801a      	strh	r2, [r3, #0]
		gyro[2] = (((uint16_t)buf[4]<<8)|buf[5]);
 8002478:	7b3b      	ldrb	r3, [r7, #12]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	b21a      	sxth	r2, r3
 800247e:	7b7b      	ldrb	r3, [r7, #13]
 8002480:	b21b      	sxth	r3, r3
 8002482:	4313      	orrs	r3, r2
 8002484:	b21a      	sxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3304      	adds	r3, #4
 800248a:	b292      	uxth	r2, r2
 800248c:	801a      	strh	r2, [r3, #0]
	}
/*	printf("Gyroscope Data:\r\n");
	printf("X: %d\r\n", gyro[0]);
	printf("Y: %d\r\n", gyro[1]);
	printf("Z: %d\r\n", gyro[2]);*/
    return res;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000240 	.word	0x20000240

0800249c <MPU_calibrateGyro>:
  * @brief Find offsets for each axis of the gyroscope.
  * @param I2Cx Pointer to the I2C structure configuration.
  * @param numCalPoints Number of data points to average.
  */
void MPU_calibrateGyro(uint16_t numCalPoints)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
   // Init
   int32_t x = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
   int32_t y = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
   int32_t z = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]

   // Zero guard
   if (numCalPoints == 0)
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <MPU_calibrateGyro+0x20>
   {
       numCalPoints = 1;
 80024b8:	2301      	movs	r3, #1
 80024ba:	80fb      	strh	r3, [r7, #6]
   }

   // Save specified number of points
   for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80024bc:	2300      	movs	r3, #0
 80024be:	817b      	strh	r3, [r7, #10]
 80024c0:	e01f      	b.n	8002502 <MPU_calibrateGyro+0x66>
   {
     //  MPU_readRawData(I2Cx);
       MPU_Get_Gyroscope(gyro);
 80024c2:	482a      	ldr	r0, [pc, #168]	; (800256c <MPU_calibrateGyro+0xd0>)
 80024c4:	f7ff ffaa 	bl	800241c <MPU_Get_Gyroscope>


       x += *(p_gyro+0);
 80024c8:	4b29      	ldr	r3, [pc, #164]	; (8002570 <MPU_calibrateGyro+0xd4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	4413      	add	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
       y += *(p_gyro+1);
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <MPU_calibrateGyro+0xd4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3302      	adds	r3, #2
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
       z += *(p_gyro+2);
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <MPU_calibrateGyro+0xd4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3304      	adds	r3, #4
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
       HAL_Delay(3);
 80024f6:	2003      	movs	r0, #3
 80024f8:	f000 fb0a 	bl	8002b10 <HAL_Delay>
   for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80024fc:	897b      	ldrh	r3, [r7, #10]
 80024fe:	3301      	adds	r3, #1
 8002500:	817b      	strh	r3, [r7, #10]
 8002502:	897a      	ldrh	r2, [r7, #10]
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	429a      	cmp	r2, r3
 8002508:	d3db      	bcc.n	80024c2 <MPU_calibrateGyro+0x26>
   }

   // Average the saved data points to find the gyroscope offset
   gyroCal.x = (float)x / (float)numCalPoints;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800251e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <MPU_calibrateGyro+0xd8>)
 8002524:	edc3 7a00 	vstr	s15, [r3]
   gyroCal.y = (float)y / (float)numCalPoints;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	ee07 3a90 	vmov	s15, r3
 8002538:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800253c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <MPU_calibrateGyro+0xd8>)
 8002542:	edc3 7a01 	vstr	s15, [r3, #4]
   gyroCal.z = (float)z / (float)numCalPoints;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	ee07 3a90 	vmov	s15, r3
 800254c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800255a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <MPU_calibrateGyro+0xd8>)
 8002560:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002564:	bf00      	nop
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000394 	.word	0x20000394
 8002570:	20000008 	.word	0x20000008
 8002574:	200003a8 	.word	0x200003a8

08002578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_MspInit+0x4c>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <HAL_MspInit+0x4c>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800258c:	6453      	str	r3, [r2, #68]	; 0x44
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <HAL_MspInit+0x4c>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_MspInit+0x4c>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <HAL_MspInit+0x4c>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_MspInit+0x4c>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025b6:	2007      	movs	r0, #7
 80025b8:	f000 fdb8 	bl	800312c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800

080025c8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80025d0:	1d39      	adds	r1, r7, #4
 80025d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025d6:	2201      	movs	r2, #1
 80025d8:	4803      	ldr	r0, [pc, #12]	; (80025e8 <__io_putchar+0x20>)
 80025da:	f002 fe1e 	bl	800521a <HAL_UART_Transmit>

  return ch;
 80025de:	687b      	ldr	r3, [r7, #4]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000414 	.word	0x20000414

080025ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <NMI_Handler+0x4>

080025f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f6:	e7fe      	b.n	80025f6 <HardFault_Handler+0x4>

080025f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <MemManage_Handler+0x4>

080025fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002602:	e7fe      	b.n	8002602 <BusFault_Handler+0x4>

08002604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <UsageFault_Handler+0x4>

0800260a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002638:	f000 fa4a 	bl	8002ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}

08002640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <USART1_IRQHandler+0x10>)
 8002646:	f002 feab 	bl	80053a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200003d0 	.word	0x200003d0

08002654 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <USART2_IRQHandler+0x10>)
 800265a:	f002 fea1 	bl	80053a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000414 	.word	0x20000414

08002668 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return 1;
 800266c:	2301      	movs	r3, #1
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_kill>:

int _kill(int pid, int sig)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002682:	f004 fd03 	bl	800708c <__errno>
 8002686:	4603      	mov	r3, r0
 8002688:	2216      	movs	r2, #22
 800268a:	601a      	str	r2, [r3, #0]
  return -1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <_exit>:

void _exit (int status)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ffe7 	bl	8002678 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026aa:	e7fe      	b.n	80026aa <_exit+0x12>

080026ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	e00a      	b.n	80026d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026be:	f3af 8000 	nop.w
 80026c2:	4601      	mov	r1, r0
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	60ba      	str	r2, [r7, #8]
 80026ca:	b2ca      	uxtb	r2, r1
 80026cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3301      	adds	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	dbf0      	blt.n	80026be <_read+0x12>
  }

  return len;
 80026dc:	687b      	ldr	r3, [r7, #4]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e009      	b.n	800270c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	60ba      	str	r2, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff61 	bl	80025c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	429a      	cmp	r2, r3
 8002712:	dbf1      	blt.n	80026f8 <_write+0x12>
  }
  return len;
 8002714:	687b      	ldr	r3, [r7, #4]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <_close>:

int _close(int file)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002746:	605a      	str	r2, [r3, #4]
  return 0;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_isatty>:

int _isatty(int file)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002790:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <_sbrk+0x5c>)
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <_sbrk+0x60>)
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <_sbrk+0x64>)
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <_sbrk+0x68>)
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d207      	bcs.n	80027c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b8:	f004 fc68 	bl	800708c <__errno>
 80027bc:	4603      	mov	r3, r0
 80027be:	220c      	movs	r2, #12
 80027c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	e009      	b.n	80027dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <_sbrk+0x64>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <_sbrk+0x64>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <_sbrk+0x64>)
 80027d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027da:	68fb      	ldr	r3, [r7, #12]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20020000 	.word	0x20020000
 80027e8:	00000400 	.word	0x00000400
 80027ec:	200003cc 	.word	0x200003cc
 80027f0:	200005a8 	.word	0x200005a8

080027f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <SystemInit+0x20>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <SystemInit+0x20>)
 8002800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <MX_USART1_UART_Init+0x4c>)
 800281e:	4a12      	ldr	r2, [pc, #72]	; (8002868 <MX_USART1_UART_Init+0x50>)
 8002820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <MX_USART1_UART_Init+0x4c>)
 8002824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <MX_USART1_UART_Init+0x4c>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <MX_USART1_UART_Init+0x4c>)
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <MX_USART1_UART_Init+0x4c>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <MX_USART1_UART_Init+0x4c>)
 800283e:	220c      	movs	r2, #12
 8002840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <MX_USART1_UART_Init+0x4c>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <MX_USART1_UART_Init+0x4c>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_USART1_UART_Init+0x4c>)
 8002850:	f002 fc96 	bl	8005180 <HAL_UART_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800285a:	f7ff fc59 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200003d0 	.word	0x200003d0
 8002868:	40011000 	.word	0x40011000

0800286c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 8002872:	4a12      	ldr	r2, [pc, #72]	; (80028bc <MX_USART2_UART_Init+0x50>)
 8002874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 8002878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800287c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 8002892:	220c      	movs	r2, #12
 8002894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028a2:	4805      	ldr	r0, [pc, #20]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 80028a4:	f002 fc6c 	bl	8005180 <HAL_UART_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028ae:	f7ff fc2f 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000414 	.word	0x20000414
 80028bc:	40004400 	.word	0x40004400

080028c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	; 0x30
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3a      	ldr	r2, [pc, #232]	; (80029c8 <HAL_UART_MspInit+0x108>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d135      	bne.n	800294e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	4b39      	ldr	r3, [pc, #228]	; (80029cc <HAL_UART_MspInit+0x10c>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	4a38      	ldr	r2, [pc, #224]	; (80029cc <HAL_UART_MspInit+0x10c>)
 80028ec:	f043 0310 	orr.w	r3, r3, #16
 80028f0:	6453      	str	r3, [r2, #68]	; 0x44
 80028f2:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_UART_MspInit+0x10c>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	4b32      	ldr	r3, [pc, #200]	; (80029cc <HAL_UART_MspInit+0x10c>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a31      	ldr	r2, [pc, #196]	; (80029cc <HAL_UART_MspInit+0x10c>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <HAL_UART_MspInit+0x10c>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800291a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800291e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800292c:	2307      	movs	r3, #7
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	f107 031c 	add.w	r3, r7, #28
 8002934:	4619      	mov	r1, r3
 8002936:	4826      	ldr	r0, [pc, #152]	; (80029d0 <HAL_UART_MspInit+0x110>)
 8002938:	f000 fccc 	bl	80032d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	2100      	movs	r1, #0
 8002940:	2025      	movs	r0, #37	; 0x25
 8002942:	f000 fbfe 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002946:	2025      	movs	r0, #37	; 0x25
 8002948:	f000 fc17 	bl	800317a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800294c:	e038      	b.n	80029c0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <HAL_UART_MspInit+0x114>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d133      	bne.n	80029c0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002958:	2300      	movs	r3, #0
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_UART_MspInit+0x10c>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	4a1a      	ldr	r2, [pc, #104]	; (80029cc <HAL_UART_MspInit+0x10c>)
 8002962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002966:	6413      	str	r3, [r2, #64]	; 0x40
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_UART_MspInit+0x10c>)
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_UART_MspInit+0x10c>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	4a13      	ldr	r2, [pc, #76]	; (80029cc <HAL_UART_MspInit+0x10c>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6313      	str	r3, [r2, #48]	; 0x30
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_UART_MspInit+0x10c>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002990:	230c      	movs	r3, #12
 8002992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029a0:	2307      	movs	r3, #7
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	4619      	mov	r1, r3
 80029aa:	4809      	ldr	r0, [pc, #36]	; (80029d0 <HAL_UART_MspInit+0x110>)
 80029ac:	f000 fc92 	bl	80032d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2100      	movs	r1, #0
 80029b4:	2026      	movs	r0, #38	; 0x26
 80029b6:	f000 fbc4 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029ba:	2026      	movs	r0, #38	; 0x26
 80029bc:	f000 fbdd 	bl	800317a <HAL_NVIC_EnableIRQ>
}
 80029c0:	bf00      	nop
 80029c2:	3730      	adds	r7, #48	; 0x30
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40011000 	.word	0x40011000
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40004400 	.word	0x40004400

080029d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029dc:	480d      	ldr	r0, [pc, #52]	; (8002a14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029de:	490e      	ldr	r1, [pc, #56]	; (8002a18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029e0:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e4:	e002      	b.n	80029ec <LoopCopyDataInit>

080029e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ea:	3304      	adds	r3, #4

080029ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f0:	d3f9      	bcc.n	80029e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f2:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029f4:	4c0b      	ldr	r4, [pc, #44]	; (8002a24 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f8:	e001      	b.n	80029fe <LoopFillZerobss>

080029fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029fc:	3204      	adds	r2, #4

080029fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a00:	d3fb      	bcc.n	80029fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a02:	f7ff fef7 	bl	80027f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a06:	f004 fb47 	bl	8007098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a0a:	f7ff fa6b 	bl	8001ee4 <main>
  bx  lr    
 8002a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a18:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002a1c:	0800a1e8 	.word	0x0800a1e8
  ldr r2, =_sbss
 8002a20:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002a24:	200005a8 	.word	0x200005a8

08002a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a28:	e7fe      	b.n	8002a28 <ADC_IRQHandler>
	...

08002a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <HAL_Init+0x40>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <HAL_Init+0x40>)
 8002a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_Init+0x40>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <HAL_Init+0x40>)
 8002a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <HAL_Init+0x40>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a54:	2003      	movs	r0, #3
 8002a56:	f000 fb69 	bl	800312c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f000 f808 	bl	8002a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a60:	f7ff fd8a 	bl	8002578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023c00 	.word	0x40023c00

08002a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_InitTick+0x54>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_InitTick+0x58>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fb81 	bl	8003196 <HAL_SYSTICK_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00e      	b.n	8002abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b0f      	cmp	r3, #15
 8002aa2:	d80a      	bhi.n	8002aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f000 fb49 	bl	8003142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab0:	4a06      	ldr	r2, [pc, #24]	; (8002acc <HAL_InitTick+0x5c>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e000      	b.n	8002abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	2000000c 	.word	0x2000000c
 8002ac8:	20000014 	.word	0x20000014
 8002acc:	20000010 	.word	0x20000010

08002ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_IncTick+0x20>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_IncTick+0x24>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <HAL_IncTick+0x24>)
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000014 	.word	0x20000014
 8002af4:	20000458 	.word	0x20000458

08002af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return uwTick;
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <HAL_GetTick+0x14>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000458 	.word	0x20000458

08002b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b18:	f7ff ffee 	bl	8002af8 <HAL_GetTick>
 8002b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d005      	beq.n	8002b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_Delay+0x44>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b36:	bf00      	nop
 8002b38:	f7ff ffde 	bl	8002af8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d8f7      	bhi.n	8002b38 <HAL_Delay+0x28>
  {
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000014 	.word	0x20000014

08002b58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e0ed      	b.n	8002d46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe fe54 	bl	8001824 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b8c:	f7ff ffb4 	bl	8002af8 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b92:	e012      	b.n	8002bba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b94:	f7ff ffb0 	bl	8002af8 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b0a      	cmp	r3, #10
 8002ba0:	d90b      	bls.n	8002bba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0c5      	b.n	8002d46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0e5      	beq.n	8002b94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0202 	bic.w	r2, r2, #2
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd8:	f7ff ff8e 	bl	8002af8 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bde:	e012      	b.n	8002c06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002be0:	f7ff ff8a 	bl	8002af8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b0a      	cmp	r3, #10
 8002bec:	d90b      	bls.n	8002c06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2205      	movs	r2, #5
 8002bfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e09f      	b.n	8002d46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e5      	bne.n	8002be0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7e1b      	ldrb	r3, [r3, #24]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d108      	bne.n	8002c2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e007      	b.n	8002c3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7e5b      	ldrb	r3, [r3, #25]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e007      	b.n	8002c68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7e9b      	ldrb	r3, [r3, #26]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d108      	bne.n	8002c82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0220 	orr.w	r2, r2, #32
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e007      	b.n	8002c92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0220 	bic.w	r2, r2, #32
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7edb      	ldrb	r3, [r3, #27]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d108      	bne.n	8002cac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0210 	bic.w	r2, r2, #16
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e007      	b.n	8002cbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0210 	orr.w	r2, r2, #16
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7f1b      	ldrb	r3, [r3, #28]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d108      	bne.n	8002cd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0208 	orr.w	r2, r2, #8
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e007      	b.n	8002ce6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0208 	bic.w	r2, r2, #8
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7f5b      	ldrb	r3, [r3, #29]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0204 	orr.w	r2, r2, #4
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e007      	b.n	8002d10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0204 	bic.w	r2, r2, #4
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	ea42 0103 	orr.w	r1, r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	1e5a      	subs	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d12e      	bne.n	8002dc0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d7a:	f7ff febd 	bl	8002af8 <HAL_GetTick>
 8002d7e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d80:	e012      	b.n	8002da8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d82:	f7ff feb9 	bl	8002af8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b0a      	cmp	r3, #10
 8002d8e:	d90b      	bls.n	8002da8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2205      	movs	r2, #5
 8002da0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e012      	b.n	8002dce <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1e5      	bne.n	8002d82 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e006      	b.n	8002dce <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b089      	sub	sp, #36	; 0x24
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dea:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002df4:	7ffb      	ldrb	r3, [r7, #31]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d003      	beq.n	8002e02 <HAL_CAN_AddTxMessage+0x2c>
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	f040 80b8 	bne.w	8002f72 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d105      	bne.n	8002e22 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80a0 	beq.w	8002f62 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	0e1b      	lsrs	r3, r3, #24
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d907      	bls.n	8002e42 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e09e      	b.n	8002f80 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e42:	2201      	movs	r2, #1
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	409a      	lsls	r2, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10d      	bne.n	8002e70 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e5e:	68f9      	ldr	r1, [r7, #12]
 8002e60:	6809      	ldr	r1, [r1, #0]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	3318      	adds	r3, #24
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	440b      	add	r3, r1
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e00f      	b.n	8002e90 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e7a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e80:	68f9      	ldr	r1, [r7, #12]
 8002e82:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002e84:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	3318      	adds	r3, #24
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	440b      	add	r3, r1
 8002e8e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6819      	ldr	r1, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3318      	adds	r3, #24
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	7d1b      	ldrb	r3, [r3, #20]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d111      	bne.n	8002ed0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3318      	adds	r3, #24
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	6811      	ldr	r1, [r2, #0]
 8002ec0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	3318      	adds	r3, #24
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	440b      	add	r3, r1
 8002ecc:	3304      	adds	r3, #4
 8002ece:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3307      	adds	r3, #7
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	061a      	lsls	r2, r3, #24
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3306      	adds	r3, #6
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3305      	adds	r3, #5
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	4313      	orrs	r3, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	3204      	adds	r2, #4
 8002ef0:	7812      	ldrb	r2, [r2, #0]
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	6811      	ldr	r1, [r2, #0]
 8002ef8:	ea43 0200 	orr.w	r2, r3, r0
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	440b      	add	r3, r1
 8002f02:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002f06:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3303      	adds	r3, #3
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	061a      	lsls	r2, r3, #24
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3302      	adds	r3, #2
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	041b      	lsls	r3, r3, #16
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	4313      	orrs	r3, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	7812      	ldrb	r2, [r2, #0]
 8002f28:	4610      	mov	r0, r2
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	6811      	ldr	r1, [r2, #0]
 8002f2e:	ea43 0200 	orr.w	r2, r3, r0
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	440b      	add	r3, r1
 8002f38:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002f3c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3318      	adds	r3, #24
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	4413      	add	r3, r2
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	6811      	ldr	r1, [r2, #0]
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3318      	adds	r3, #24
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	440b      	add	r3, r1
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e00e      	b.n	8002f80 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e006      	b.n	8002f80 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3724      	adds	r7, #36	; 0x24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fbe:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	60d3      	str	r3, [r2, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4907      	ldr	r1, [pc, #28]	; (8003028 <__NVIC_EnableIRQ+0x38>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0a      	blt.n	8003056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	490c      	ldr	r1, [pc, #48]	; (8003078 <__NVIC_SetPriority+0x4c>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	440b      	add	r3, r1
 8003050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003054:	e00a      	b.n	800306c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4908      	ldr	r1, [pc, #32]	; (800307c <__NVIC_SetPriority+0x50>)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	3b04      	subs	r3, #4
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	440b      	add	r3, r1
 800306a:	761a      	strb	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000e100 	.word	0xe000e100
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43d9      	mvns	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	4313      	orrs	r3, r2
         );
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f8:	d301      	bcc.n	80030fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00f      	b.n	800311e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <SysTick_Config+0x40>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003106:	210f      	movs	r1, #15
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	f7ff ff8e 	bl	800302c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <SysTick_Config+0x40>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <SysTick_Config+0x40>)
 8003118:	2207      	movs	r2, #7
 800311a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000e010 	.word	0xe000e010

0800312c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff29 	bl	8002f8c <__NVIC_SetPriorityGrouping>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003154:	f7ff ff3e 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 8003158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	6978      	ldr	r0, [r7, #20]
 8003160:	f7ff ff8e 	bl	8003080 <NVIC_EncodePriority>
 8003164:	4602      	mov	r2, r0
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff5d 	bl	800302c <__NVIC_SetPriority>
}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff31 	bl	8002ff0 <__NVIC_EnableIRQ>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ffa2 	bl	80030e8 <SysTick_Config>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031bc:	f7ff fc9c 	bl	8002af8 <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d008      	beq.n	80031e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e052      	b.n	8003286 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0216 	bic.w	r2, r2, #22
 80031ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d103      	bne.n	8003210 <HAL_DMA_Abort+0x62>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0208 	bic.w	r2, r2, #8
 800321e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003230:	e013      	b.n	800325a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003232:	f7ff fc61 	bl	8002af8 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b05      	cmp	r3, #5
 800323e:	d90c      	bls.n	800325a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2203      	movs	r2, #3
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e015      	b.n	8003286 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e4      	bne.n	8003232 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	223f      	movs	r2, #63	; 0x3f
 800326e:	409a      	lsls	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d004      	beq.n	80032ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e00c      	b.n	80032c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2205      	movs	r2, #5
 80032b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0201 	bic.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
 80032ee:	e165      	b.n	80035bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032f0:	2201      	movs	r2, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	429a      	cmp	r2, r3
 800330a:	f040 8154 	bne.w	80035b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d005      	beq.n	8003326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003322:	2b02      	cmp	r3, #2
 8003324:	d130      	bne.n	8003388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	2203      	movs	r2, #3
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800335c:	2201      	movs	r2, #1
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 0201 	and.w	r2, r3, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b03      	cmp	r3, #3
 8003392:	d017      	beq.n	80033c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d123      	bne.n	8003418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	08da      	lsrs	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3208      	adds	r2, #8
 80033d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	220f      	movs	r2, #15
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	08da      	lsrs	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3208      	adds	r2, #8
 8003412:	69b9      	ldr	r1, [r7, #24]
 8003414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0203 	and.w	r2, r3, #3
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80ae 	beq.w	80035b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	4b5d      	ldr	r3, [pc, #372]	; (80035d4 <HAL_GPIO_Init+0x300>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	4a5c      	ldr	r2, [pc, #368]	; (80035d4 <HAL_GPIO_Init+0x300>)
 8003464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003468:	6453      	str	r3, [r2, #68]	; 0x44
 800346a:	4b5a      	ldr	r3, [pc, #360]	; (80035d4 <HAL_GPIO_Init+0x300>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003476:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <HAL_GPIO_Init+0x304>)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3302      	adds	r3, #2
 800347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	220f      	movs	r2, #15
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a4f      	ldr	r2, [pc, #316]	; (80035dc <HAL_GPIO_Init+0x308>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d025      	beq.n	80034ee <HAL_GPIO_Init+0x21a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a4e      	ldr	r2, [pc, #312]	; (80035e0 <HAL_GPIO_Init+0x30c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01f      	beq.n	80034ea <HAL_GPIO_Init+0x216>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4d      	ldr	r2, [pc, #308]	; (80035e4 <HAL_GPIO_Init+0x310>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d019      	beq.n	80034e6 <HAL_GPIO_Init+0x212>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4c      	ldr	r2, [pc, #304]	; (80035e8 <HAL_GPIO_Init+0x314>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_GPIO_Init+0x20e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4b      	ldr	r2, [pc, #300]	; (80035ec <HAL_GPIO_Init+0x318>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00d      	beq.n	80034de <HAL_GPIO_Init+0x20a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4a      	ldr	r2, [pc, #296]	; (80035f0 <HAL_GPIO_Init+0x31c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <HAL_GPIO_Init+0x206>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a49      	ldr	r2, [pc, #292]	; (80035f4 <HAL_GPIO_Init+0x320>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_GPIO_Init+0x202>
 80034d2:	2306      	movs	r3, #6
 80034d4:	e00c      	b.n	80034f0 <HAL_GPIO_Init+0x21c>
 80034d6:	2307      	movs	r3, #7
 80034d8:	e00a      	b.n	80034f0 <HAL_GPIO_Init+0x21c>
 80034da:	2305      	movs	r3, #5
 80034dc:	e008      	b.n	80034f0 <HAL_GPIO_Init+0x21c>
 80034de:	2304      	movs	r3, #4
 80034e0:	e006      	b.n	80034f0 <HAL_GPIO_Init+0x21c>
 80034e2:	2303      	movs	r3, #3
 80034e4:	e004      	b.n	80034f0 <HAL_GPIO_Init+0x21c>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e002      	b.n	80034f0 <HAL_GPIO_Init+0x21c>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_GPIO_Init+0x21c>
 80034ee:	2300      	movs	r3, #0
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	f002 0203 	and.w	r2, r2, #3
 80034f6:	0092      	lsls	r2, r2, #2
 80034f8:	4093      	lsls	r3, r2
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003500:	4935      	ldr	r1, [pc, #212]	; (80035d8 <HAL_GPIO_Init+0x304>)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	3302      	adds	r3, #2
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800350e:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <HAL_GPIO_Init+0x324>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003532:	4a31      	ldr	r2, [pc, #196]	; (80035f8 <HAL_GPIO_Init+0x324>)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003538:	4b2f      	ldr	r3, [pc, #188]	; (80035f8 <HAL_GPIO_Init+0x324>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800355c:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <HAL_GPIO_Init+0x324>)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003562:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <HAL_GPIO_Init+0x324>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003586:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <HAL_GPIO_Init+0x324>)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <HAL_GPIO_Init+0x324>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035b0:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <HAL_GPIO_Init+0x324>)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3301      	adds	r3, #1
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	f67f ae96 	bls.w	80032f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3724      	adds	r7, #36	; 0x24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40013800 	.word	0x40013800
 80035dc:	40020000 	.word	0x40020000
 80035e0:	40020400 	.word	0x40020400
 80035e4:	40020800 	.word	0x40020800
 80035e8:	40020c00 	.word	0x40020c00
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40021400 	.word	0x40021400
 80035f4:	40021800 	.word	0x40021800
 80035f8:	40013c00 	.word	0x40013c00

080035fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
 8003608:	4613      	mov	r3, r2
 800360a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800360c:	787b      	ldrb	r3, [r7, #1]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003618:	e003      	b.n	8003622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	041a      	lsls	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	619a      	str	r2, [r3, #24]
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e12b      	b.n	800389a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fe fa2e 	bl	8001ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2224      	movs	r2, #36	; 0x24
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003682:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003692:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003694:	f001 f87e 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 8003698:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4a81      	ldr	r2, [pc, #516]	; (80038a4 <HAL_I2C_Init+0x274>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d807      	bhi.n	80036b4 <HAL_I2C_Init+0x84>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a80      	ldr	r2, [pc, #512]	; (80038a8 <HAL_I2C_Init+0x278>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bf94      	ite	ls
 80036ac:	2301      	movls	r3, #1
 80036ae:	2300      	movhi	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e006      	b.n	80036c2 <HAL_I2C_Init+0x92>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a7d      	ldr	r2, [pc, #500]	; (80038ac <HAL_I2C_Init+0x27c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	bf94      	ite	ls
 80036bc:	2301      	movls	r3, #1
 80036be:	2300      	movhi	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0e7      	b.n	800389a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a78      	ldr	r2, [pc, #480]	; (80038b0 <HAL_I2C_Init+0x280>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0c9b      	lsrs	r3, r3, #18
 80036d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a6a      	ldr	r2, [pc, #424]	; (80038a4 <HAL_I2C_Init+0x274>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d802      	bhi.n	8003704 <HAL_I2C_Init+0xd4>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3301      	adds	r3, #1
 8003702:	e009      	b.n	8003718 <HAL_I2C_Init+0xe8>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	4a69      	ldr	r2, [pc, #420]	; (80038b4 <HAL_I2C_Init+0x284>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	3301      	adds	r3, #1
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	430b      	orrs	r3, r1
 800371e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800372a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	495c      	ldr	r1, [pc, #368]	; (80038a4 <HAL_I2C_Init+0x274>)
 8003734:	428b      	cmp	r3, r1
 8003736:	d819      	bhi.n	800376c <HAL_I2C_Init+0x13c>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1e59      	subs	r1, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fbb1 f3f3 	udiv	r3, r1, r3
 8003746:	1c59      	adds	r1, r3, #1
 8003748:	f640 73fc 	movw	r3, #4092	; 0xffc
 800374c:	400b      	ands	r3, r1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_I2C_Init+0x138>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1e59      	subs	r1, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003760:	3301      	adds	r3, #1
 8003762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003766:	e051      	b.n	800380c <HAL_I2C_Init+0x1dc>
 8003768:	2304      	movs	r3, #4
 800376a:	e04f      	b.n	800380c <HAL_I2C_Init+0x1dc>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d111      	bne.n	8003798 <HAL_I2C_Init+0x168>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e58      	subs	r0, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e012      	b.n	80037be <HAL_I2C_Init+0x18e>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e58      	subs	r0, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	0099      	lsls	r1, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Init+0x196>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e022      	b.n	800380c <HAL_I2C_Init+0x1dc>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <HAL_I2C_Init+0x1bc>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1e58      	subs	r0, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	440b      	add	r3, r1
 80037dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e0:	3301      	adds	r3, #1
 80037e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ea:	e00f      	b.n	800380c <HAL_I2C_Init+0x1dc>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e58      	subs	r0, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	0099      	lsls	r1, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	6809      	ldr	r1, [r1, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800383a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6911      	ldr	r1, [r2, #16]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68d2      	ldr	r2, [r2, #12]
 8003846:	4311      	orrs	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	430b      	orrs	r3, r1
 800384e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	000186a0 	.word	0x000186a0
 80038a8:	001e847f 	.word	0x001e847f
 80038ac:	003d08ff 	.word	0x003d08ff
 80038b0:	431bde83 	.word	0x431bde83
 80038b4:	10624dd3 	.word	0x10624dd3

080038b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	4608      	mov	r0, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	461a      	mov	r2, r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	817b      	strh	r3, [r7, #10]
 80038ca:	460b      	mov	r3, r1
 80038cc:	813b      	strh	r3, [r7, #8]
 80038ce:	4613      	mov	r3, r2
 80038d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038d2:	f7ff f911 	bl	8002af8 <HAL_GetTick>
 80038d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	f040 80d9 	bne.w	8003a98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2319      	movs	r3, #25
 80038ec:	2201      	movs	r2, #1
 80038ee:	496d      	ldr	r1, [pc, #436]	; (8003aa4 <HAL_I2C_Mem_Write+0x1ec>)
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fc7f 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0cc      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_I2C_Mem_Write+0x56>
 800390a:	2302      	movs	r3, #2
 800390c:	e0c5      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d007      	beq.n	8003934 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003942:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2221      	movs	r2, #33	; 0x21
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2240      	movs	r2, #64	; 0x40
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a3a      	ldr	r2, [r7, #32]
 800395e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003964:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a4d      	ldr	r2, [pc, #308]	; (8003aa8 <HAL_I2C_Mem_Write+0x1f0>)
 8003974:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003976:	88f8      	ldrh	r0, [r7, #6]
 8003978:	893a      	ldrh	r2, [r7, #8]
 800397a:	8979      	ldrh	r1, [r7, #10]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4603      	mov	r3, r0
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fab6 	bl	8003ef8 <I2C_RequestMemoryWrite>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d052      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e081      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fd00 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d107      	bne.n	80039be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e06b      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	781a      	ldrb	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d11b      	bne.n	8003a38 <HAL_I2C_Mem_Write+0x180>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d017      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1aa      	bne.n	8003996 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 fcec 	bl	8004422 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00d      	beq.n	8003a6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d107      	bne.n	8003a68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e016      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	00100002 	.word	0x00100002
 8003aa8:	ffff0000 	.word	0xffff0000

08003aac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08c      	sub	sp, #48	; 0x30
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	817b      	strh	r3, [r7, #10]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	813b      	strh	r3, [r7, #8]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ac6:	f7ff f817 	bl	8002af8 <HAL_GetTick>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	f040 8208 	bne.w	8003eea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2319      	movs	r3, #25
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	497b      	ldr	r1, [pc, #492]	; (8003cd0 <HAL_I2C_Mem_Read+0x224>)
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 fb85 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
 8003af2:	e1fb      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_I2C_Mem_Read+0x56>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e1f4      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d007      	beq.n	8003b28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2222      	movs	r2, #34	; 0x22
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2240      	movs	r2, #64	; 0x40
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a5b      	ldr	r2, [pc, #364]	; (8003cd4 <HAL_I2C_Mem_Read+0x228>)
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b6a:	88f8      	ldrh	r0, [r7, #6]
 8003b6c:	893a      	ldrh	r2, [r7, #8]
 8003b6e:	8979      	ldrh	r1, [r7, #10]
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	4603      	mov	r3, r0
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fa52 	bl	8004024 <I2C_RequestMemoryRead>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e1b0      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d113      	bne.n	8003bba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b92:	2300      	movs	r3, #0
 8003b94:	623b      	str	r3, [r7, #32]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	623b      	str	r3, [r7, #32]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	623b      	str	r3, [r7, #32]
 8003ba6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e184      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d11b      	bne.n	8003bfa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e164      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d11b      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c22:	2300      	movs	r3, #0
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	e144      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c50:	e138      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	f200 80f1 	bhi.w	8003e3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d123      	bne.n	8003cac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 fc1b 	bl	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e139      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003caa:	e10b      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d14e      	bne.n	8003d52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cba:	2200      	movs	r2, #0
 8003cbc:	4906      	ldr	r1, [pc, #24]	; (8003cd8 <HAL_I2C_Mem_Read+0x22c>)
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fa98 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e10e      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
 8003cce:	bf00      	nop
 8003cd0:	00100002 	.word	0x00100002
 8003cd4:	ffff0000 	.word	0xffff0000
 8003cd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d50:	e0b8      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	2200      	movs	r2, #0
 8003d5a:	4966      	ldr	r1, [pc, #408]	; (8003ef4 <HAL_I2C_Mem_Read+0x448>)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fa49 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0bf      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	2200      	movs	r2, #0
 8003db6:	494f      	ldr	r1, [pc, #316]	; (8003ef4 <HAL_I2C_Mem_Read+0x448>)
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fa1b 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e091      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e3c:	e042      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fb2e 	bl	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e04c      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d118      	bne.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f47f aec2 	bne.w	8003c52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e000      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3728      	adds	r7, #40	; 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	00010004 	.word	0x00010004

08003ef8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	4608      	mov	r0, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	817b      	strh	r3, [r7, #10]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	813b      	strh	r3, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f960 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f48:	d103      	bne.n	8003f52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e05f      	b.n	8004016 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f56:	897b      	ldrh	r3, [r7, #10]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	6a3a      	ldr	r2, [r7, #32]
 8003f6a:	492d      	ldr	r1, [pc, #180]	; (8004020 <I2C_RequestMemoryWrite+0x128>)
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f998 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e04c      	b.n	8004016 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f94:	6a39      	ldr	r1, [r7, #32]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fa02 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d107      	bne.n	8003fba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e02b      	b.n	8004016 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d105      	bne.n	8003fd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc4:	893b      	ldrh	r3, [r7, #8]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	611a      	str	r2, [r3, #16]
 8003fce:	e021      	b.n	8004014 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fd0:	893b      	ldrh	r3, [r7, #8]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe0:	6a39      	ldr	r1, [r7, #32]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f9dc 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d107      	bne.n	8004006 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004004:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e005      	b.n	8004016 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800400a:	893b      	ldrh	r3, [r7, #8]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	00010002 	.word	0x00010002

08004024 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4603      	mov	r3, r0
 8004034:	817b      	strh	r3, [r7, #10]
 8004036:	460b      	mov	r3, r1
 8004038:	813b      	strh	r3, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800404c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800405c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	2200      	movs	r2, #0
 8004066:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f8c2 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004084:	d103      	bne.n	800408e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0aa      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004092:	897b      	ldrh	r3, [r7, #10]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	4952      	ldr	r1, [pc, #328]	; (80041f0 <I2C_RequestMemoryRead+0x1cc>)
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f8fa 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e097      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d0:	6a39      	ldr	r1, [r7, #32]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f964 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d107      	bne.n	80040f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e076      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d105      	bne.n	800410c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004100:	893b      	ldrh	r3, [r7, #8]
 8004102:	b2da      	uxtb	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	611a      	str	r2, [r3, #16]
 800410a:	e021      	b.n	8004150 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800410c:	893b      	ldrh	r3, [r7, #8]
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	b29b      	uxth	r3, r3
 8004112:	b2da      	uxtb	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	6a39      	ldr	r1, [r7, #32]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f93e 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b04      	cmp	r3, #4
 8004130:	d107      	bne.n	8004142 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004140:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e050      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004146:	893b      	ldrh	r3, [r7, #8]
 8004148:	b2da      	uxtb	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004152:	6a39      	ldr	r1, [r7, #32]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f923 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2b04      	cmp	r3, #4
 8004166:	d107      	bne.n	8004178 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004176:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e035      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	2200      	movs	r2, #0
 8004194:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f82b 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00d      	beq.n	80041c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b2:	d103      	bne.n	80041bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e013      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041c0:	897b      	ldrh	r3, [r7, #10]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	6a3a      	ldr	r2, [r7, #32]
 80041d4:	4906      	ldr	r1, [pc, #24]	; (80041f0 <I2C_RequestMemoryRead+0x1cc>)
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f863 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	00010002 	.word	0x00010002

080041f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004204:	e025      	b.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d021      	beq.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420e:	f7fe fc73 	bl	8002af8 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d302      	bcc.n	8004224 <I2C_WaitOnFlagUntilTimeout+0x30>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d116      	bne.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f043 0220 	orr.w	r2, r3, #32
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e023      	b.n	800429a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10d      	bne.n	8004278 <I2C_WaitOnFlagUntilTimeout+0x84>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4013      	ands	r3, r2
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	e00c      	b.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	429a      	cmp	r2, r3
 8004296:	d0b6      	beq.n	8004206 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042b0:	e051      	b.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c0:	d123      	bne.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f043 0204 	orr.w	r2, r3, #4
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e046      	b.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d021      	beq.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe fbf1 	bl	8002af8 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d116      	bne.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e020      	b.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d10c      	bne.n	800437a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	43da      	mvns	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4013      	ands	r3, r2
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf14      	ite	ne
 8004372:	2301      	movne	r3, #1
 8004374:	2300      	moveq	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	e00b      	b.n	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	43da      	mvns	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d18d      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ac:	e02d      	b.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f8ce 	bl	8004550 <I2C_IsAcknowledgeFailed>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e02d      	b.n	800441a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d021      	beq.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fe fb97 	bl	8002af8 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d116      	bne.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e007      	b.n	800441a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004414:	2b80      	cmp	r3, #128	; 0x80
 8004416:	d1ca      	bne.n	80043ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800442e:	e02d      	b.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f88d 	bl	8004550 <I2C_IsAcknowledgeFailed>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e02d      	b.n	800449c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d021      	beq.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004448:	f7fe fb56 	bl	8002af8 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	d302      	bcc.n	800445e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d116      	bne.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f043 0220 	orr.w	r2, r3, #32
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e007      	b.n	800449c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b04      	cmp	r3, #4
 8004498:	d1ca      	bne.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044b0:	e042      	b.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d119      	bne.n	80044f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0210 	mvn.w	r2, #16
 80044c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e029      	b.n	8004548 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f4:	f7fe fb00 	bl	8002af8 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	d302      	bcc.n	800450a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d116      	bne.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e007      	b.n	8004548 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d1b5      	bne.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004566:	d11b      	bne.n	80045a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004570:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f043 0204 	orr.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0cc      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045c4:	4b68      	ldr	r3, [pc, #416]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d90c      	bls.n	80045ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b65      	ldr	r3, [pc, #404]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b63      	ldr	r3, [pc, #396]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0b8      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d020      	beq.n	800463a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004604:	4b59      	ldr	r3, [pc, #356]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	4a58      	ldr	r2, [pc, #352]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800460e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800461c:	4b53      	ldr	r3, [pc, #332]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4a52      	ldr	r2, [pc, #328]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004628:	4b50      	ldr	r3, [pc, #320]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	494d      	ldr	r1, [pc, #308]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d044      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464e:	4b47      	ldr	r3, [pc, #284]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d119      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e07f      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d003      	beq.n	800466e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466a:	2b03      	cmp	r3, #3
 800466c:	d107      	bne.n	800467e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466e:	4b3f      	ldr	r3, [pc, #252]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e06f      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467e:	4b3b      	ldr	r3, [pc, #236]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e067      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 0203 	bic.w	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4934      	ldr	r1, [pc, #208]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	4313      	orrs	r3, r2
 800469e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a0:	f7fe fa2a 	bl	8002af8 <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a6:	e00a      	b.n	80046be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a8:	f7fe fa26 	bl	8002af8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e04f      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 020c 	and.w	r2, r3, #12
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d1eb      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d0:	4b25      	ldr	r3, [pc, #148]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d20c      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b22      	ldr	r3, [pc, #136]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b20      	ldr	r3, [pc, #128]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e032      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004704:	4b19      	ldr	r3, [pc, #100]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4916      	ldr	r1, [pc, #88]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	490e      	ldr	r1, [pc, #56]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	4313      	orrs	r3, r2
 8004734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004736:	f000 f855 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 800473a:	4602      	mov	r2, r0
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	490a      	ldr	r1, [pc, #40]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	5ccb      	ldrb	r3, [r1, r3]
 800474a:	fa22 f303 	lsr.w	r3, r2, r3
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004752:	4b09      	ldr	r3, [pc, #36]	; (8004778 <HAL_RCC_ClockConfig+0x1c8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe f98a 	bl	8002a70 <HAL_InitTick>

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40023c00 	.word	0x40023c00
 800476c:	40023800 	.word	0x40023800
 8004770:	08009e34 	.word	0x08009e34
 8004774:	2000000c 	.word	0x2000000c
 8004778:	20000010 	.word	0x20000010

0800477c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <HAL_RCC_GetHCLKFreq+0x14>)
 8004782:	681b      	ldr	r3, [r3, #0]
}
 8004784:	4618      	mov	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	2000000c 	.word	0x2000000c

08004794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004798:	f7ff fff0 	bl	800477c <HAL_RCC_GetHCLKFreq>
 800479c:	4602      	mov	r2, r0
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	0a9b      	lsrs	r3, r3, #10
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	4903      	ldr	r1, [pc, #12]	; (80047b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047aa:	5ccb      	ldrb	r3, [r1, r3]
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40023800 	.word	0x40023800
 80047b8:	08009e44 	.word	0x08009e44

080047bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047c0:	f7ff ffdc 	bl	800477c <HAL_RCC_GetHCLKFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	0b5b      	lsrs	r3, r3, #13
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4903      	ldr	r1, [pc, #12]	; (80047e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40023800 	.word	0x40023800
 80047e0:	08009e44 	.word	0x08009e44

080047e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e8:	b0ae      	sub	sp, #184	; 0xb8
 80047ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800480a:	4bcb      	ldr	r3, [pc, #812]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b0c      	cmp	r3, #12
 8004814:	f200 8206 	bhi.w	8004c24 <HAL_RCC_GetSysClockFreq+0x440>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <HAL_RCC_GetSysClockFreq+0x3c>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004855 	.word	0x08004855
 8004824:	08004c25 	.word	0x08004c25
 8004828:	08004c25 	.word	0x08004c25
 800482c:	08004c25 	.word	0x08004c25
 8004830:	0800485d 	.word	0x0800485d
 8004834:	08004c25 	.word	0x08004c25
 8004838:	08004c25 	.word	0x08004c25
 800483c:	08004c25 	.word	0x08004c25
 8004840:	08004865 	.word	0x08004865
 8004844:	08004c25 	.word	0x08004c25
 8004848:	08004c25 	.word	0x08004c25
 800484c:	08004c25 	.word	0x08004c25
 8004850:	08004a55 	.word	0x08004a55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004854:	4bb9      	ldr	r3, [pc, #740]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x358>)
 8004856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800485a:	e1e7      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800485c:	4bb8      	ldr	r3, [pc, #736]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x35c>)
 800485e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004862:	e1e3      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004864:	4bb4      	ldr	r3, [pc, #720]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800486c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004870:	4bb1      	ldr	r3, [pc, #708]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d071      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487c:	4bae      	ldr	r3, [pc, #696]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	099b      	lsrs	r3, r3, #6
 8004882:	2200      	movs	r2, #0
 8004884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004888:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800488c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004898:	2300      	movs	r3, #0
 800489a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800489e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	f04f 0000 	mov.w	r0, #0
 80048aa:	f04f 0100 	mov.w	r1, #0
 80048ae:	0159      	lsls	r1, r3, #5
 80048b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b4:	0150      	lsls	r0, r2, #5
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4621      	mov	r1, r4
 80048bc:	1a51      	subs	r1, r2, r1
 80048be:	6439      	str	r1, [r7, #64]	; 0x40
 80048c0:	4629      	mov	r1, r5
 80048c2:	eb63 0301 	sbc.w	r3, r3, r1
 80048c6:	647b      	str	r3, [r7, #68]	; 0x44
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80048d4:	4649      	mov	r1, r9
 80048d6:	018b      	lsls	r3, r1, #6
 80048d8:	4641      	mov	r1, r8
 80048da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048de:	4641      	mov	r1, r8
 80048e0:	018a      	lsls	r2, r1, #6
 80048e2:	4641      	mov	r1, r8
 80048e4:	1a51      	subs	r1, r2, r1
 80048e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80048e8:	4649      	mov	r1, r9
 80048ea:	eb63 0301 	sbc.w	r3, r3, r1
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80048fc:	4649      	mov	r1, r9
 80048fe:	00cb      	lsls	r3, r1, #3
 8004900:	4641      	mov	r1, r8
 8004902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004906:	4641      	mov	r1, r8
 8004908:	00ca      	lsls	r2, r1, #3
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	4603      	mov	r3, r0
 8004910:	4622      	mov	r2, r4
 8004912:	189b      	adds	r3, r3, r2
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
 8004916:	462b      	mov	r3, r5
 8004918:	460a      	mov	r2, r1
 800491a:	eb42 0303 	adc.w	r3, r2, r3
 800491e:	637b      	str	r3, [r7, #52]	; 0x34
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800492c:	4629      	mov	r1, r5
 800492e:	024b      	lsls	r3, r1, #9
 8004930:	4621      	mov	r1, r4
 8004932:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004936:	4621      	mov	r1, r4
 8004938:	024a      	lsls	r2, r1, #9
 800493a:	4610      	mov	r0, r2
 800493c:	4619      	mov	r1, r3
 800493e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004942:	2200      	movs	r2, #0
 8004944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004948:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800494c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004950:	f7fc f9aa 	bl	8000ca8 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800495e:	e067      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004960:	4b75      	ldr	r3, [pc, #468]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	2200      	movs	r2, #0
 8004968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800496c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004970:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004978:	67bb      	str	r3, [r7, #120]	; 0x78
 800497a:	2300      	movs	r3, #0
 800497c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800497e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004982:	4622      	mov	r2, r4
 8004984:	462b      	mov	r3, r5
 8004986:	f04f 0000 	mov.w	r0, #0
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	0159      	lsls	r1, r3, #5
 8004990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004994:	0150      	lsls	r0, r2, #5
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4621      	mov	r1, r4
 800499c:	1a51      	subs	r1, r2, r1
 800499e:	62b9      	str	r1, [r7, #40]	; 0x28
 80049a0:	4629      	mov	r1, r5
 80049a2:	eb63 0301 	sbc.w	r3, r3, r1
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80049b4:	4649      	mov	r1, r9
 80049b6:	018b      	lsls	r3, r1, #6
 80049b8:	4641      	mov	r1, r8
 80049ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049be:	4641      	mov	r1, r8
 80049c0:	018a      	lsls	r2, r1, #6
 80049c2:	4641      	mov	r1, r8
 80049c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80049c8:	4649      	mov	r1, r9
 80049ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049e2:	4692      	mov	sl, r2
 80049e4:	469b      	mov	fp, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	eb1a 0303 	adds.w	r3, sl, r3
 80049ec:	623b      	str	r3, [r7, #32]
 80049ee:	462b      	mov	r3, r5
 80049f0:	eb4b 0303 	adc.w	r3, fp, r3
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a02:	4629      	mov	r1, r5
 8004a04:	028b      	lsls	r3, r1, #10
 8004a06:	4621      	mov	r1, r4
 8004a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	028a      	lsls	r2, r1, #10
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a18:	2200      	movs	r2, #0
 8004a1a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a1c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004a22:	f7fc f941 	bl	8000ca8 <__aeabi_uldivmod>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a30:	4b41      	ldr	r3, [pc, #260]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a52:	e0eb      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a54:	4b38      	ldr	r3, [pc, #224]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a60:	4b35      	ldr	r3, [pc, #212]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d06b      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6c:	4b32      	ldr	r3, [pc, #200]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	099b      	lsrs	r3, r3, #6
 8004a72:	2200      	movs	r2, #0
 8004a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a80:	2300      	movs	r3, #0
 8004a82:	667b      	str	r3, [r7, #100]	; 0x64
 8004a84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004a88:	4622      	mov	r2, r4
 8004a8a:	462b      	mov	r3, r5
 8004a8c:	f04f 0000 	mov.w	r0, #0
 8004a90:	f04f 0100 	mov.w	r1, #0
 8004a94:	0159      	lsls	r1, r3, #5
 8004a96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a9a:	0150      	lsls	r0, r2, #5
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	1a51      	subs	r1, r2, r1
 8004aa4:	61b9      	str	r1, [r7, #24]
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	eb63 0301 	sbc.w	r3, r3, r1
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004aba:	4659      	mov	r1, fp
 8004abc:	018b      	lsls	r3, r1, #6
 8004abe:	4651      	mov	r1, sl
 8004ac0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac4:	4651      	mov	r1, sl
 8004ac6:	018a      	lsls	r2, r1, #6
 8004ac8:	4651      	mov	r1, sl
 8004aca:	ebb2 0801 	subs.w	r8, r2, r1
 8004ace:	4659      	mov	r1, fp
 8004ad0:	eb63 0901 	sbc.w	r9, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ae0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ae4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ae8:	4690      	mov	r8, r2
 8004aea:	4699      	mov	r9, r3
 8004aec:	4623      	mov	r3, r4
 8004aee:	eb18 0303 	adds.w	r3, r8, r3
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	462b      	mov	r3, r5
 8004af6:	eb49 0303 	adc.w	r3, r9, r3
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004b08:	4629      	mov	r1, r5
 8004b0a:	024b      	lsls	r3, r1, #9
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b12:	4621      	mov	r1, r4
 8004b14:	024a      	lsls	r2, r1, #9
 8004b16:	4610      	mov	r0, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b1e:	2200      	movs	r2, #0
 8004b20:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004b24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b28:	f7fc f8be 	bl	8000ca8 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b36:	e065      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x420>
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b44:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x458>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	099b      	lsrs	r3, r3, #6
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	4611      	mov	r1, r2
 8004b50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b54:	653b      	str	r3, [r7, #80]	; 0x50
 8004b56:	2300      	movs	r3, #0
 8004b58:	657b      	str	r3, [r7, #84]	; 0x54
 8004b5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004b5e:	4642      	mov	r2, r8
 8004b60:	464b      	mov	r3, r9
 8004b62:	f04f 0000 	mov.w	r0, #0
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	0159      	lsls	r1, r3, #5
 8004b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b70:	0150      	lsls	r0, r2, #5
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4641      	mov	r1, r8
 8004b78:	1a51      	subs	r1, r2, r1
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b90:	4659      	mov	r1, fp
 8004b92:	018b      	lsls	r3, r1, #6
 8004b94:	4651      	mov	r1, sl
 8004b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b9a:	4651      	mov	r1, sl
 8004b9c:	018a      	lsls	r2, r1, #6
 8004b9e:	4651      	mov	r1, sl
 8004ba0:	1a54      	subs	r4, r2, r1
 8004ba2:	4659      	mov	r1, fp
 8004ba4:	eb63 0501 	sbc.w	r5, r3, r1
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	00eb      	lsls	r3, r5, #3
 8004bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb6:	00e2      	lsls	r2, r4, #3
 8004bb8:	4614      	mov	r4, r2
 8004bba:	461d      	mov	r5, r3
 8004bbc:	4643      	mov	r3, r8
 8004bbe:	18e3      	adds	r3, r4, r3
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	eb45 0303 	adc.w	r3, r5, r3
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	028b      	lsls	r3, r1, #10
 8004bda:	4621      	mov	r1, r4
 8004bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004be0:	4621      	mov	r1, r4
 8004be2:	028a      	lsls	r2, r1, #10
 8004be4:	4610      	mov	r0, r2
 8004be6:	4619      	mov	r1, r3
 8004be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bec:	2200      	movs	r2, #0
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004bf2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bf6:	f7fc f857 	bl	8000ca8 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4613      	mov	r3, r2
 8004c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c04:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x458>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	0f1b      	lsrs	r3, r3, #28
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c22:	e003      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	37b8      	adds	r7, #184	; 0xb8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	00f42400 	.word	0x00f42400

08004c44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e28d      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8083 	beq.w	8004d6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c64:	4b94      	ldr	r3, [pc, #592]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d019      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c70:	4b91      	ldr	r3, [pc, #580]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c7c:	4b8e      	ldr	r3, [pc, #568]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c88:	d00c      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8a:	4b8b      	ldr	r3, [pc, #556]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d112      	bne.n	8004cbc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c96:	4b88      	ldr	r3, [pc, #544]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca2:	d10b      	bne.n	8004cbc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca4:	4b84      	ldr	r3, [pc, #528]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d05b      	beq.n	8004d68 <HAL_RCC_OscConfig+0x124>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d157      	bne.n	8004d68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e25a      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc4:	d106      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x90>
 8004cc6:	4b7c      	ldr	r3, [pc, #496]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a7b      	ldr	r2, [pc, #492]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e01d      	b.n	8004d10 <HAL_RCC_OscConfig+0xcc>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0xb4>
 8004cde:	4b76      	ldr	r3, [pc, #472]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a75      	ldr	r2, [pc, #468]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b73      	ldr	r3, [pc, #460]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a72      	ldr	r2, [pc, #456]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0xcc>
 8004cf8:	4b6f      	ldr	r3, [pc, #444]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a6e      	ldr	r2, [pc, #440]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b6c      	ldr	r3, [pc, #432]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a6b      	ldr	r2, [pc, #428]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d013      	beq.n	8004d40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fd feee 	bl	8002af8 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fd feea 	bl	8002af8 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e21f      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d32:	4b61      	ldr	r3, [pc, #388]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0xdc>
 8004d3e:	e014      	b.n	8004d6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd feda 	bl	8002af8 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fd fed6 	bl	8002af8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e20b      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5a:	4b57      	ldr	r3, [pc, #348]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x104>
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d06f      	beq.n	8004e56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d76:	4b50      	ldr	r3, [pc, #320]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d017      	beq.n	8004db2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d82:	4b4d      	ldr	r3, [pc, #308]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d105      	bne.n	8004d9a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d8e:	4b4a      	ldr	r3, [pc, #296]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9a:	4b47      	ldr	r3, [pc, #284]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004da2:	2b0c      	cmp	r3, #12
 8004da4:	d11c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004da6:	4b44      	ldr	r3, [pc, #272]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d116      	bne.n	8004de0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db2:	4b41      	ldr	r3, [pc, #260]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_RCC_OscConfig+0x186>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d001      	beq.n	8004dca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e1d3      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dca:	4b3b      	ldr	r3, [pc, #236]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4937      	ldr	r1, [pc, #220]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dde:	e03a      	b.n	8004e56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d020      	beq.n	8004e2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004de8:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <HAL_RCC_OscConfig+0x278>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dee:	f7fd fe83 	bl	8002af8 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004df6:	f7fd fe7f 	bl	8002af8 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e1b4      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e14:	4b28      	ldr	r3, [pc, #160]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4925      	ldr	r1, [pc, #148]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]
 8004e28:	e015      	b.n	8004e56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2a:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <HAL_RCC_OscConfig+0x278>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd fe62 	bl	8002af8 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e38:	f7fd fe5e 	bl	8002af8 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e193      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d036      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d016      	beq.n	8004e98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e6a:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <HAL_RCC_OscConfig+0x27c>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e70:	f7fd fe42 	bl	8002af8 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e78:	f7fd fe3e 	bl	8002af8 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e173      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0f0      	beq.n	8004e78 <HAL_RCC_OscConfig+0x234>
 8004e96:	e01b      	b.n	8004ed0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e98:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_RCC_OscConfig+0x27c>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9e:	f7fd fe2b 	bl	8002af8 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea4:	e00e      	b.n	8004ec4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea6:	f7fd fe27 	bl	8002af8 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d907      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e15c      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	42470000 	.word	0x42470000
 8004ec0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec4:	4b8a      	ldr	r3, [pc, #552]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ea      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8097 	beq.w	800500c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee2:	4b83      	ldr	r3, [pc, #524]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10f      	bne.n	8004f0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	4b7f      	ldr	r3, [pc, #508]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	4a7e      	ldr	r2, [pc, #504]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efc:	6413      	str	r3, [r2, #64]	; 0x40
 8004efe:	4b7c      	ldr	r3, [pc, #496]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0e:	4b79      	ldr	r3, [pc, #484]	; (80050f4 <HAL_RCC_OscConfig+0x4b0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d118      	bne.n	8004f4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1a:	4b76      	ldr	r3, [pc, #472]	; (80050f4 <HAL_RCC_OscConfig+0x4b0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a75      	ldr	r2, [pc, #468]	; (80050f4 <HAL_RCC_OscConfig+0x4b0>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f26:	f7fd fde7 	bl	8002af8 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2e:	f7fd fde3 	bl	8002af8 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e118      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	4b6c      	ldr	r3, [pc, #432]	; (80050f4 <HAL_RCC_OscConfig+0x4b0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d106      	bne.n	8004f62 <HAL_RCC_OscConfig+0x31e>
 8004f54:	4b66      	ldr	r3, [pc, #408]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	4a65      	ldr	r2, [pc, #404]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f60:	e01c      	b.n	8004f9c <HAL_RCC_OscConfig+0x358>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCC_OscConfig+0x340>
 8004f6a:	4b61      	ldr	r3, [pc, #388]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	4a60      	ldr	r2, [pc, #384]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	6713      	str	r3, [r2, #112]	; 0x70
 8004f76:	4b5e      	ldr	r3, [pc, #376]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	4a5d      	ldr	r2, [pc, #372]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	6713      	str	r3, [r2, #112]	; 0x70
 8004f82:	e00b      	b.n	8004f9c <HAL_RCC_OscConfig+0x358>
 8004f84:	4b5a      	ldr	r3, [pc, #360]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	4a59      	ldr	r2, [pc, #356]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f90:	4b57      	ldr	r3, [pc, #348]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f94:	4a56      	ldr	r2, [pc, #344]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f96:	f023 0304 	bic.w	r3, r3, #4
 8004f9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d015      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fd fda8 	bl	8002af8 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004faa:	e00a      	b.n	8004fc2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fac:	f7fd fda4 	bl	8002af8 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e0d7      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc2:	4b4b      	ldr	r3, [pc, #300]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0ee      	beq.n	8004fac <HAL_RCC_OscConfig+0x368>
 8004fce:	e014      	b.n	8004ffa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fd fd92 	bl	8002af8 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd8:	f7fd fd8e 	bl	8002af8 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e0c1      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fee:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1ee      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d105      	bne.n	800500c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005000:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	4a3a      	ldr	r2, [pc, #232]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8005006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800500a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80ad 	beq.w	8005170 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005016:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	2b08      	cmp	r3, #8
 8005020:	d060      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d145      	bne.n	80050b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502a:	4b33      	ldr	r3, [pc, #204]	; (80050f8 <HAL_RCC_OscConfig+0x4b4>)
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fd fd62 	bl	8002af8 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005038:	f7fd fd5e 	bl	8002af8 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e093      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	4b29      	ldr	r3, [pc, #164]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	019b      	lsls	r3, r3, #6
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	3b01      	subs	r3, #1
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	061b      	lsls	r3, r3, #24
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	071b      	lsls	r3, r3, #28
 8005082:	491b      	ldr	r1, [pc, #108]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_RCC_OscConfig+0x4b4>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508e:	f7fd fd33 	bl	8002af8 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005096:	f7fd fd2f 	bl	8002af8 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e064      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a8:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x452>
 80050b4:	e05c      	b.n	8005170 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <HAL_RCC_OscConfig+0x4b4>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fd fd1c 	bl	8002af8 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fd fd18 	bl	8002af8 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e04d      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x480>
 80050e2:	e045      	b.n	8005170 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e040      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40007000 	.word	0x40007000
 80050f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050fc:	4b1f      	ldr	r3, [pc, #124]	; (800517c <HAL_RCC_OscConfig+0x538>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d030      	beq.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d129      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d122      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005134:	4293      	cmp	r3, r2
 8005136:	d119      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	3b01      	subs	r3, #1
 8005146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d10f      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d107      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800

08005180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e03f      	b.n	8005212 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd fb8a 	bl	80028c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2224      	movs	r2, #36	; 0x24
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fddf 	bl	8005d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b08a      	sub	sp, #40	; 0x28
 800521e:	af02      	add	r7, sp, #8
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	603b      	str	r3, [r7, #0]
 8005226:	4613      	mov	r3, r2
 8005228:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b20      	cmp	r3, #32
 8005238:	d17c      	bne.n	8005334 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_UART_Transmit+0x2c>
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e075      	b.n	8005336 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_UART_Transmit+0x3e>
 8005254:	2302      	movs	r3, #2
 8005256:	e06e      	b.n	8005336 <HAL_UART_Transmit+0x11c>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2221      	movs	r2, #33	; 0x21
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800526e:	f7fd fc43 	bl	8002af8 <HAL_GetTick>
 8005272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005288:	d108      	bne.n	800529c <HAL_UART_Transmit+0x82>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e003      	b.n	80052a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052ac:	e02a      	b.n	8005304 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2180      	movs	r1, #128	; 0x80
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fb1f 	bl	80058fc <UART_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e036      	b.n	8005336 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	3302      	adds	r3, #2
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	e007      	b.n	80052f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	781a      	ldrb	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3301      	adds	r3, #1
 80052f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1cf      	bne.n	80052ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	2140      	movs	r1, #64	; 0x40
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 faef 	bl	80058fc <UART_WaitOnFlagUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e006      	b.n	8005336 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	e000      	b.n	8005336 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005334:	2302      	movs	r3, #2
  }
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	4613      	mov	r3, r2
 800534a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b20      	cmp	r3, #32
 8005356:	d11d      	bne.n	8005394 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_UART_Receive_IT+0x26>
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e016      	b.n	8005396 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_UART_Receive_IT+0x38>
 8005372:	2302      	movs	r3, #2
 8005374:	e00f      	b.n	8005396 <HAL_UART_Receive_IT+0x58>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	461a      	mov	r2, r3
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fb24 	bl	80059d8 <UART_Start_Receive_IT>
 8005390:	4603      	mov	r3, r0
 8005392:	e000      	b.n	8005396 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005394:	2302      	movs	r3, #2
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b0ba      	sub	sp, #232	; 0xe8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10f      	bne.n	8005406 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <HAL_UART_IRQHandler+0x66>
 80053f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fc07 	bl	8005c12 <UART_Receive_IT>
      return;
 8005404:	e256      	b.n	80058b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80de 	beq.w	80055cc <HAL_UART_IRQHandler+0x22c>
 8005410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800541c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005420:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80d1 	beq.w	80055cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00b      	beq.n	800544e <HAL_UART_IRQHandler+0xae>
 8005436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f043 0201 	orr.w	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_UART_IRQHandler+0xd2>
 800545a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f043 0202 	orr.w	r2, r3, #2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <HAL_UART_IRQHandler+0xf6>
 800547e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f043 0204 	orr.w	r2, r3, #4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d011      	beq.n	80054c6 <HAL_UART_IRQHandler+0x126>
 80054a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	f043 0208 	orr.w	r2, r3, #8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 81ed 	beq.w	80058aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_UART_IRQHandler+0x14e>
 80054dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fb92 	bl	8005c12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b40      	cmp	r3, #64	; 0x40
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d103      	bne.n	800551a <HAL_UART_IRQHandler+0x17a>
 8005512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005516:	2b00      	cmp	r3, #0
 8005518:	d04f      	beq.n	80055ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa9a 	bl	8005a54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d141      	bne.n	80055b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3314      	adds	r3, #20
 8005534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800554c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3314      	adds	r3, #20
 8005556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800555a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800555e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1d9      	bne.n	800552e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	2b00      	cmp	r3, #0
 8005580:	d013      	beq.n	80055aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	4a7d      	ldr	r2, [pc, #500]	; (800577c <HAL_UART_IRQHandler+0x3dc>)
 8005588:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	4618      	mov	r0, r3
 8005590:	f7fd fe7d 	bl	800328e <HAL_DMA_Abort_IT>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d016      	beq.n	80055c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055a4:	4610      	mov	r0, r2
 80055a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	e00e      	b.n	80055c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f990 	bl	80058d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	e00a      	b.n	80055c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f98c 	bl	80058d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	e006      	b.n	80055c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f988 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055c6:	e170      	b.n	80058aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	bf00      	nop
    return;
 80055ca:	e16e      	b.n	80058aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f040 814a 	bne.w	800586a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8143 	beq.w	800586a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 813c 	beq.w	800586a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055f2:	2300      	movs	r3, #0
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	f040 80b4 	bne.w	8005780 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8140 	beq.w	80058ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005636:	429a      	cmp	r2, r3
 8005638:	f080 8139 	bcs.w	80058ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005642:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564e:	f000 8088 	beq.w	8005762 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800566c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800567e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800568a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1d9      	bne.n	8005652 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e1      	bne.n	800569e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3314      	adds	r3, #20
 80056e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3314      	adds	r3, #20
 80056fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005700:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005704:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800570c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e3      	bne.n	80056da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005732:	f023 0310 	bic.w	r3, r3, #16
 8005736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	330c      	adds	r3, #12
 8005740:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005744:	65ba      	str	r2, [r7, #88]	; 0x58
 8005746:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800574a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e3      	bne.n	8005720 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	4618      	mov	r0, r3
 800575e:	f7fd fd26 	bl	80031ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800576a:	b29b      	uxth	r3, r3
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	b29b      	uxth	r3, r3
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f8b6 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005778:	e099      	b.n	80058ae <HAL_UART_IRQHandler+0x50e>
 800577a:	bf00      	nop
 800577c:	08005b1b 	.word	0x08005b1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005788:	b29b      	uxth	r3, r3
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 808b 	beq.w	80058b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800579c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8086 	beq.w	80058b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057ca:	647a      	str	r2, [r7, #68]	; 0x44
 80057cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d2:	e841 2300 	strex	r3, r2, [r1]
 80057d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1e3      	bne.n	80057a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3314      	adds	r3, #20
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	623b      	str	r3, [r7, #32]
   return(result);
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3314      	adds	r3, #20
 80057fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005802:	633a      	str	r2, [r7, #48]	; 0x30
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e3      	bne.n	80057de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	60fb      	str	r3, [r7, #12]
   return(result);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0310 	bic.w	r3, r3, #16
 800583a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005848:	61fa      	str	r2, [r7, #28]
 800584a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	69b9      	ldr	r1, [r7, #24]
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	617b      	str	r3, [r7, #20]
   return(result);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e3      	bne.n	8005824 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800585c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f83e 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005868:	e023      	b.n	80058b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <HAL_UART_IRQHandler+0x4ea>
 8005876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f95d 	bl	8005b42 <UART_Transmit_IT>
    return;
 8005888:	e014      	b.n	80058b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800588a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00e      	beq.n	80058b4 <HAL_UART_IRQHandler+0x514>
 8005896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f99d 	bl	8005be2 <UART_EndTransmit_IT>
    return;
 80058a8:	e004      	b.n	80058b4 <HAL_UART_IRQHandler+0x514>
    return;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <HAL_UART_IRQHandler+0x514>
      return;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_UART_IRQHandler+0x514>
      return;
 80058b2:	bf00      	nop
  }
}
 80058b4:	37e8      	adds	r7, #232	; 0xe8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop

080058bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b090      	sub	sp, #64	; 0x40
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590c:	e050      	b.n	80059b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d04c      	beq.n	80059b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005918:	2b00      	cmp	r3, #0
 800591a:	d007      	beq.n	800592c <UART_WaitOnFlagUntilTimeout+0x30>
 800591c:	f7fd f8ec 	bl	8002af8 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005928:	429a      	cmp	r2, r3
 800592a:	d241      	bcs.n	80059b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800594c:	637a      	str	r2, [r7, #52]	; 0x34
 800594e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e5      	bne.n	800592c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3314      	adds	r3, #20
 8005966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	613b      	str	r3, [r7, #16]
   return(result);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	63bb      	str	r3, [r7, #56]	; 0x38
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005980:	623a      	str	r2, [r7, #32]
 8005982:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	69f9      	ldr	r1, [r7, #28]
 8005986:	6a3a      	ldr	r2, [r7, #32]
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	61bb      	str	r3, [r7, #24]
   return(result);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e5      	bne.n	8005960 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e00f      	b.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4013      	ands	r3, r2
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	429a      	cmp	r2, r3
 80059be:	bf0c      	ite	eq
 80059c0:	2301      	moveq	r3, #1
 80059c2:	2300      	movne	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d09f      	beq.n	800590e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3740      	adds	r7, #64	; 0x40
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	4613      	mov	r3, r2
 80059e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	88fa      	ldrh	r2, [r7, #6]
 80059f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	88fa      	ldrh	r2, [r7, #6]
 80059f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2222      	movs	r2, #34	; 0x22
 8005a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d007      	beq.n	8005a26 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0201 	orr.w	r2, r2, #1
 8005a34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0220 	orr.w	r2, r2, #32
 8005a44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b095      	sub	sp, #84	; 0x54
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	330c      	adds	r3, #12
 8005a7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a7c:	643a      	str	r2, [r7, #64]	; 0x40
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e5      	bne.n	8005a5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3314      	adds	r3, #20
 8005a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f023 0301 	bic.w	r3, r3, #1
 8005aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3314      	adds	r3, #20
 8005aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e5      	bne.n	8005a90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d119      	bne.n	8005b00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f023 0310 	bic.w	r3, r3, #16
 8005ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aec:	61ba      	str	r2, [r7, #24]
 8005aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	613b      	str	r3, [r7, #16]
   return(result);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b0e:	bf00      	nop
 8005b10:	3754      	adds	r7, #84	; 0x54
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff fecb 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b21      	cmp	r3, #33	; 0x21
 8005b54:	d13e      	bne.n	8005bd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5e:	d114      	bne.n	8005b8a <UART_Transmit_IT+0x48>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d110      	bne.n	8005b8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	1c9a      	adds	r2, r3, #2
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	621a      	str	r2, [r3, #32]
 8005b88:	e008      	b.n	8005b9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	1c59      	adds	r1, r3, #1
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6211      	str	r1, [r2, #32]
 8005b94:	781a      	ldrb	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10f      	bne.n	8005bd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e000      	b.n	8005bd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bd4:	2302      	movs	r3, #2
  }
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff fe5a 	bl	80058bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b08c      	sub	sp, #48	; 0x30
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b22      	cmp	r3, #34	; 0x22
 8005c24:	f040 80ab 	bne.w	8005d7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c30:	d117      	bne.n	8005c62 <UART_Receive_IT+0x50>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d113      	bne.n	8005c62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	1c9a      	adds	r2, r3, #2
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c60:	e026      	b.n	8005cb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c74:	d007      	beq.n	8005c86 <UART_Receive_IT+0x74>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <UART_Receive_IT+0x82>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	e008      	b.n	8005ca6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d15a      	bne.n	8005d7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0220 	bic.w	r2, r2, #32
 8005cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695a      	ldr	r2, [r3, #20]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0201 	bic.w	r2, r2, #1
 8005cf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d135      	bne.n	8005d70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f023 0310 	bic.w	r3, r3, #16
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	330c      	adds	r3, #12
 8005d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2a:	623a      	str	r2, [r7, #32]
 8005d2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	69f9      	ldr	r1, [r7, #28]
 8005d30:	6a3a      	ldr	r2, [r7, #32]
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e5      	bne.n	8005d0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d10a      	bne.n	8005d62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff fdbb 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
 8005d6e:	e002      	b.n	8005d76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7fc f87f 	bl	8001e74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e002      	b.n	8005d80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e000      	b.n	8005d80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d7e:	2302      	movs	r3, #2
  }
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3730      	adds	r7, #48	; 0x30
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d8c:	b0c0      	sub	sp, #256	; 0x100
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da4:	68d9      	ldr	r1, [r3, #12]
 8005da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	ea40 0301 	orr.w	r3, r0, r1
 8005db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005de0:	f021 010c 	bic.w	r1, r1, #12
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005dee:	430b      	orrs	r3, r1
 8005df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e02:	6999      	ldr	r1, [r3, #24]
 8005e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	ea40 0301 	orr.w	r3, r0, r1
 8005e0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b8f      	ldr	r3, [pc, #572]	; (8006054 <UART_SetConfig+0x2cc>)
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d005      	beq.n	8005e28 <UART_SetConfig+0xa0>
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4b8d      	ldr	r3, [pc, #564]	; (8006058 <UART_SetConfig+0x2d0>)
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d104      	bne.n	8005e32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e28:	f7fe fcc8 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 8005e2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e30:	e003      	b.n	8005e3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e32:	f7fe fcaf 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 8005e36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e44:	f040 810c 	bne.w	8006060 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	462b      	mov	r3, r5
 8005e5e:	1891      	adds	r1, r2, r2
 8005e60:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e62:	415b      	adcs	r3, r3
 8005e64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	eb12 0801 	adds.w	r8, r2, r1
 8005e70:	4629      	mov	r1, r5
 8005e72:	eb43 0901 	adc.w	r9, r3, r1
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e8a:	4690      	mov	r8, r2
 8005e8c:	4699      	mov	r9, r3
 8005e8e:	4623      	mov	r3, r4
 8005e90:	eb18 0303 	adds.w	r3, r8, r3
 8005e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e98:	462b      	mov	r3, r5
 8005e9a:	eb49 0303 	adc.w	r3, r9, r3
 8005e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005eae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005eb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	18db      	adds	r3, r3, r3
 8005eba:	653b      	str	r3, [r7, #80]	; 0x50
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	eb42 0303 	adc.w	r3, r2, r3
 8005ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ec4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ec8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ecc:	f7fa feec 	bl	8000ca8 <__aeabi_uldivmod>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4b61      	ldr	r3, [pc, #388]	; (800605c <UART_SetConfig+0x2d4>)
 8005ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	011c      	lsls	r4, r3, #4
 8005ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ee8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005eec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	1891      	adds	r1, r2, r2
 8005ef6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ef8:	415b      	adcs	r3, r3
 8005efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005efc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f00:	4641      	mov	r1, r8
 8005f02:	eb12 0a01 	adds.w	sl, r2, r1
 8005f06:	4649      	mov	r1, r9
 8005f08:	eb43 0b01 	adc.w	fp, r3, r1
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f20:	4692      	mov	sl, r2
 8005f22:	469b      	mov	fp, r3
 8005f24:	4643      	mov	r3, r8
 8005f26:	eb1a 0303 	adds.w	r3, sl, r3
 8005f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	eb4b 0303 	adc.w	r3, fp, r3
 8005f34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	18db      	adds	r3, r3, r3
 8005f50:	643b      	str	r3, [r7, #64]	; 0x40
 8005f52:	4613      	mov	r3, r2
 8005f54:	eb42 0303 	adc.w	r3, r2, r3
 8005f58:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f62:	f7fa fea1 	bl	8000ca8 <__aeabi_uldivmod>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	4b3b      	ldr	r3, [pc, #236]	; (800605c <UART_SetConfig+0x2d4>)
 8005f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	2264      	movs	r2, #100	; 0x64
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	1acb      	subs	r3, r1, r3
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f82:	4b36      	ldr	r3, [pc, #216]	; (800605c <UART_SetConfig+0x2d4>)
 8005f84:	fba3 2302 	umull	r2, r3, r3, r2
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f90:	441c      	add	r4, r3
 8005f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	1891      	adds	r1, r2, r2
 8005faa:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fac:	415b      	adcs	r3, r3
 8005fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	1851      	adds	r1, r2, r1
 8005fb8:	6339      	str	r1, [r7, #48]	; 0x30
 8005fba:	4649      	mov	r1, r9
 8005fbc:	414b      	adcs	r3, r1
 8005fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fcc:	4659      	mov	r1, fp
 8005fce:	00cb      	lsls	r3, r1, #3
 8005fd0:	4651      	mov	r1, sl
 8005fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fd6:	4651      	mov	r1, sl
 8005fd8:	00ca      	lsls	r2, r1, #3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	189b      	adds	r3, r3, r2
 8005fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fe8:	464b      	mov	r3, r9
 8005fea:	460a      	mov	r2, r1
 8005fec:	eb42 0303 	adc.w	r3, r2, r3
 8005ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006000:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006004:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006008:	460b      	mov	r3, r1
 800600a:	18db      	adds	r3, r3, r3
 800600c:	62bb      	str	r3, [r7, #40]	; 0x28
 800600e:	4613      	mov	r3, r2
 8006010:	eb42 0303 	adc.w	r3, r2, r3
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800601a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800601e:	f7fa fe43 	bl	8000ca8 <__aeabi_uldivmod>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4b0d      	ldr	r3, [pc, #52]	; (800605c <UART_SetConfig+0x2d4>)
 8006028:	fba3 1302 	umull	r1, r3, r3, r2
 800602c:	095b      	lsrs	r3, r3, #5
 800602e:	2164      	movs	r1, #100	; 0x64
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	3332      	adds	r3, #50	; 0x32
 800603a:	4a08      	ldr	r2, [pc, #32]	; (800605c <UART_SetConfig+0x2d4>)
 800603c:	fba2 2303 	umull	r2, r3, r2, r3
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	f003 0207 	and.w	r2, r3, #7
 8006046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4422      	add	r2, r4
 800604e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006050:	e106      	b.n	8006260 <UART_SetConfig+0x4d8>
 8006052:	bf00      	nop
 8006054:	40011000 	.word	0x40011000
 8006058:	40011400 	.word	0x40011400
 800605c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006064:	2200      	movs	r2, #0
 8006066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800606a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800606e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006072:	4642      	mov	r2, r8
 8006074:	464b      	mov	r3, r9
 8006076:	1891      	adds	r1, r2, r2
 8006078:	6239      	str	r1, [r7, #32]
 800607a:	415b      	adcs	r3, r3
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
 800607e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006082:	4641      	mov	r1, r8
 8006084:	1854      	adds	r4, r2, r1
 8006086:	4649      	mov	r1, r9
 8006088:	eb43 0501 	adc.w	r5, r3, r1
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	00eb      	lsls	r3, r5, #3
 8006096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800609a:	00e2      	lsls	r2, r4, #3
 800609c:	4614      	mov	r4, r2
 800609e:	461d      	mov	r5, r3
 80060a0:	4643      	mov	r3, r8
 80060a2:	18e3      	adds	r3, r4, r3
 80060a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060a8:	464b      	mov	r3, r9
 80060aa:	eb45 0303 	adc.w	r3, r5, r3
 80060ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060ce:	4629      	mov	r1, r5
 80060d0:	008b      	lsls	r3, r1, #2
 80060d2:	4621      	mov	r1, r4
 80060d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060d8:	4621      	mov	r1, r4
 80060da:	008a      	lsls	r2, r1, #2
 80060dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060e0:	f7fa fde2 	bl	8000ca8 <__aeabi_uldivmod>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4b60      	ldr	r3, [pc, #384]	; (800626c <UART_SetConfig+0x4e4>)
 80060ea:	fba3 2302 	umull	r2, r3, r3, r2
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	011c      	lsls	r4, r3, #4
 80060f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006100:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006104:	4642      	mov	r2, r8
 8006106:	464b      	mov	r3, r9
 8006108:	1891      	adds	r1, r2, r2
 800610a:	61b9      	str	r1, [r7, #24]
 800610c:	415b      	adcs	r3, r3
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006114:	4641      	mov	r1, r8
 8006116:	1851      	adds	r1, r2, r1
 8006118:	6139      	str	r1, [r7, #16]
 800611a:	4649      	mov	r1, r9
 800611c:	414b      	adcs	r3, r1
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800612c:	4659      	mov	r1, fp
 800612e:	00cb      	lsls	r3, r1, #3
 8006130:	4651      	mov	r1, sl
 8006132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006136:	4651      	mov	r1, sl
 8006138:	00ca      	lsls	r2, r1, #3
 800613a:	4610      	mov	r0, r2
 800613c:	4619      	mov	r1, r3
 800613e:	4603      	mov	r3, r0
 8006140:	4642      	mov	r2, r8
 8006142:	189b      	adds	r3, r3, r2
 8006144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006148:	464b      	mov	r3, r9
 800614a:	460a      	mov	r2, r1
 800614c:	eb42 0303 	adc.w	r3, r2, r3
 8006150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	67bb      	str	r3, [r7, #120]	; 0x78
 800615e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800616c:	4649      	mov	r1, r9
 800616e:	008b      	lsls	r3, r1, #2
 8006170:	4641      	mov	r1, r8
 8006172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006176:	4641      	mov	r1, r8
 8006178:	008a      	lsls	r2, r1, #2
 800617a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800617e:	f7fa fd93 	bl	8000ca8 <__aeabi_uldivmod>
 8006182:	4602      	mov	r2, r0
 8006184:	460b      	mov	r3, r1
 8006186:	4611      	mov	r1, r2
 8006188:	4b38      	ldr	r3, [pc, #224]	; (800626c <UART_SetConfig+0x4e4>)
 800618a:	fba3 2301 	umull	r2, r3, r3, r1
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	2264      	movs	r2, #100	; 0x64
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	1acb      	subs	r3, r1, r3
 8006198:	011b      	lsls	r3, r3, #4
 800619a:	3332      	adds	r3, #50	; 0x32
 800619c:	4a33      	ldr	r2, [pc, #204]	; (800626c <UART_SetConfig+0x4e4>)
 800619e:	fba2 2303 	umull	r2, r3, r2, r3
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061a8:	441c      	add	r4, r3
 80061aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ae:	2200      	movs	r2, #0
 80061b0:	673b      	str	r3, [r7, #112]	; 0x70
 80061b2:	677a      	str	r2, [r7, #116]	; 0x74
 80061b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	1891      	adds	r1, r2, r2
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	415b      	adcs	r3, r3
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061c8:	4641      	mov	r1, r8
 80061ca:	1851      	adds	r1, r2, r1
 80061cc:	6039      	str	r1, [r7, #0]
 80061ce:	4649      	mov	r1, r9
 80061d0:	414b      	adcs	r3, r1
 80061d2:	607b      	str	r3, [r7, #4]
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061e0:	4659      	mov	r1, fp
 80061e2:	00cb      	lsls	r3, r1, #3
 80061e4:	4651      	mov	r1, sl
 80061e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ea:	4651      	mov	r1, sl
 80061ec:	00ca      	lsls	r2, r1, #3
 80061ee:	4610      	mov	r0, r2
 80061f0:	4619      	mov	r1, r3
 80061f2:	4603      	mov	r3, r0
 80061f4:	4642      	mov	r2, r8
 80061f6:	189b      	adds	r3, r3, r2
 80061f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80061fa:	464b      	mov	r3, r9
 80061fc:	460a      	mov	r2, r1
 80061fe:	eb42 0303 	adc.w	r3, r2, r3
 8006202:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	663b      	str	r3, [r7, #96]	; 0x60
 800620e:	667a      	str	r2, [r7, #100]	; 0x64
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800621c:	4649      	mov	r1, r9
 800621e:	008b      	lsls	r3, r1, #2
 8006220:	4641      	mov	r1, r8
 8006222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006226:	4641      	mov	r1, r8
 8006228:	008a      	lsls	r2, r1, #2
 800622a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800622e:	f7fa fd3b 	bl	8000ca8 <__aeabi_uldivmod>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4b0d      	ldr	r3, [pc, #52]	; (800626c <UART_SetConfig+0x4e4>)
 8006238:	fba3 1302 	umull	r1, r3, r3, r2
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	2164      	movs	r1, #100	; 0x64
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	3332      	adds	r3, #50	; 0x32
 800624a:	4a08      	ldr	r2, [pc, #32]	; (800626c <UART_SetConfig+0x4e4>)
 800624c:	fba2 2303 	umull	r2, r3, r2, r3
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	f003 020f 	and.w	r2, r3, #15
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4422      	add	r2, r4
 800625e:	609a      	str	r2, [r3, #8]
}
 8006260:	bf00      	nop
 8006262:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006266:	46bd      	mov	sp, r7
 8006268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800626c:	51eb851f 	.word	0x51eb851f

08006270 <__cvt>:
 8006270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	ec55 4b10 	vmov	r4, r5, d0
 8006278:	2d00      	cmp	r5, #0
 800627a:	460e      	mov	r6, r1
 800627c:	4619      	mov	r1, r3
 800627e:	462b      	mov	r3, r5
 8006280:	bfbb      	ittet	lt
 8006282:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006286:	461d      	movlt	r5, r3
 8006288:	2300      	movge	r3, #0
 800628a:	232d      	movlt	r3, #45	; 0x2d
 800628c:	700b      	strb	r3, [r1, #0]
 800628e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006290:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006294:	4691      	mov	r9, r2
 8006296:	f023 0820 	bic.w	r8, r3, #32
 800629a:	bfbc      	itt	lt
 800629c:	4622      	movlt	r2, r4
 800629e:	4614      	movlt	r4, r2
 80062a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062a4:	d005      	beq.n	80062b2 <__cvt+0x42>
 80062a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062aa:	d100      	bne.n	80062ae <__cvt+0x3e>
 80062ac:	3601      	adds	r6, #1
 80062ae:	2102      	movs	r1, #2
 80062b0:	e000      	b.n	80062b4 <__cvt+0x44>
 80062b2:	2103      	movs	r1, #3
 80062b4:	ab03      	add	r3, sp, #12
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	ab02      	add	r3, sp, #8
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	ec45 4b10 	vmov	d0, r4, r5
 80062c0:	4653      	mov	r3, sl
 80062c2:	4632      	mov	r2, r6
 80062c4:	f000 ff98 	bl	80071f8 <_dtoa_r>
 80062c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062cc:	4607      	mov	r7, r0
 80062ce:	d102      	bne.n	80062d6 <__cvt+0x66>
 80062d0:	f019 0f01 	tst.w	r9, #1
 80062d4:	d022      	beq.n	800631c <__cvt+0xac>
 80062d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062da:	eb07 0906 	add.w	r9, r7, r6
 80062de:	d110      	bne.n	8006302 <__cvt+0x92>
 80062e0:	783b      	ldrb	r3, [r7, #0]
 80062e2:	2b30      	cmp	r3, #48	; 0x30
 80062e4:	d10a      	bne.n	80062fc <__cvt+0x8c>
 80062e6:	2200      	movs	r2, #0
 80062e8:	2300      	movs	r3, #0
 80062ea:	4620      	mov	r0, r4
 80062ec:	4629      	mov	r1, r5
 80062ee:	f7fa fc1b 	bl	8000b28 <__aeabi_dcmpeq>
 80062f2:	b918      	cbnz	r0, 80062fc <__cvt+0x8c>
 80062f4:	f1c6 0601 	rsb	r6, r6, #1
 80062f8:	f8ca 6000 	str.w	r6, [sl]
 80062fc:	f8da 3000 	ldr.w	r3, [sl]
 8006300:	4499      	add	r9, r3
 8006302:	2200      	movs	r2, #0
 8006304:	2300      	movs	r3, #0
 8006306:	4620      	mov	r0, r4
 8006308:	4629      	mov	r1, r5
 800630a:	f7fa fc0d 	bl	8000b28 <__aeabi_dcmpeq>
 800630e:	b108      	cbz	r0, 8006314 <__cvt+0xa4>
 8006310:	f8cd 900c 	str.w	r9, [sp, #12]
 8006314:	2230      	movs	r2, #48	; 0x30
 8006316:	9b03      	ldr	r3, [sp, #12]
 8006318:	454b      	cmp	r3, r9
 800631a:	d307      	bcc.n	800632c <__cvt+0xbc>
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006320:	1bdb      	subs	r3, r3, r7
 8006322:	4638      	mov	r0, r7
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	b004      	add	sp, #16
 8006328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800632c:	1c59      	adds	r1, r3, #1
 800632e:	9103      	str	r1, [sp, #12]
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	e7f0      	b.n	8006316 <__cvt+0xa6>

08006334 <__exponent>:
 8006334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006336:	4603      	mov	r3, r0
 8006338:	2900      	cmp	r1, #0
 800633a:	bfb8      	it	lt
 800633c:	4249      	neglt	r1, r1
 800633e:	f803 2b02 	strb.w	r2, [r3], #2
 8006342:	bfb4      	ite	lt
 8006344:	222d      	movlt	r2, #45	; 0x2d
 8006346:	222b      	movge	r2, #43	; 0x2b
 8006348:	2909      	cmp	r1, #9
 800634a:	7042      	strb	r2, [r0, #1]
 800634c:	dd2a      	ble.n	80063a4 <__exponent+0x70>
 800634e:	f10d 0207 	add.w	r2, sp, #7
 8006352:	4617      	mov	r7, r2
 8006354:	260a      	movs	r6, #10
 8006356:	4694      	mov	ip, r2
 8006358:	fb91 f5f6 	sdiv	r5, r1, r6
 800635c:	fb06 1415 	mls	r4, r6, r5, r1
 8006360:	3430      	adds	r4, #48	; 0x30
 8006362:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006366:	460c      	mov	r4, r1
 8006368:	2c63      	cmp	r4, #99	; 0x63
 800636a:	f102 32ff 	add.w	r2, r2, #4294967295
 800636e:	4629      	mov	r1, r5
 8006370:	dcf1      	bgt.n	8006356 <__exponent+0x22>
 8006372:	3130      	adds	r1, #48	; 0x30
 8006374:	f1ac 0402 	sub.w	r4, ip, #2
 8006378:	f802 1c01 	strb.w	r1, [r2, #-1]
 800637c:	1c41      	adds	r1, r0, #1
 800637e:	4622      	mov	r2, r4
 8006380:	42ba      	cmp	r2, r7
 8006382:	d30a      	bcc.n	800639a <__exponent+0x66>
 8006384:	f10d 0209 	add.w	r2, sp, #9
 8006388:	eba2 020c 	sub.w	r2, r2, ip
 800638c:	42bc      	cmp	r4, r7
 800638e:	bf88      	it	hi
 8006390:	2200      	movhi	r2, #0
 8006392:	4413      	add	r3, r2
 8006394:	1a18      	subs	r0, r3, r0
 8006396:	b003      	add	sp, #12
 8006398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800639a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800639e:	f801 5f01 	strb.w	r5, [r1, #1]!
 80063a2:	e7ed      	b.n	8006380 <__exponent+0x4c>
 80063a4:	2330      	movs	r3, #48	; 0x30
 80063a6:	3130      	adds	r1, #48	; 0x30
 80063a8:	7083      	strb	r3, [r0, #2]
 80063aa:	70c1      	strb	r1, [r0, #3]
 80063ac:	1d03      	adds	r3, r0, #4
 80063ae:	e7f1      	b.n	8006394 <__exponent+0x60>

080063b0 <_printf_float>:
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	ed2d 8b02 	vpush	{d8}
 80063b8:	b08d      	sub	sp, #52	; 0x34
 80063ba:	460c      	mov	r4, r1
 80063bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063c0:	4616      	mov	r6, r2
 80063c2:	461f      	mov	r7, r3
 80063c4:	4605      	mov	r5, r0
 80063c6:	f000 fe17 	bl	8006ff8 <_localeconv_r>
 80063ca:	f8d0 a000 	ldr.w	sl, [r0]
 80063ce:	4650      	mov	r0, sl
 80063d0:	f7f9 ff7e 	bl	80002d0 <strlen>
 80063d4:	2300      	movs	r3, #0
 80063d6:	930a      	str	r3, [sp, #40]	; 0x28
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	9305      	str	r3, [sp, #20]
 80063dc:	f8d8 3000 	ldr.w	r3, [r8]
 80063e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80063e4:	3307      	adds	r3, #7
 80063e6:	f023 0307 	bic.w	r3, r3, #7
 80063ea:	f103 0208 	add.w	r2, r3, #8
 80063ee:	f8c8 2000 	str.w	r2, [r8]
 80063f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80063fa:	9307      	str	r3, [sp, #28]
 80063fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006400:	ee08 0a10 	vmov	s16, r0
 8006404:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006408:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800640c:	4b9e      	ldr	r3, [pc, #632]	; (8006688 <_printf_float+0x2d8>)
 800640e:	f04f 32ff 	mov.w	r2, #4294967295
 8006412:	f7fa fbbb 	bl	8000b8c <__aeabi_dcmpun>
 8006416:	bb88      	cbnz	r0, 800647c <_printf_float+0xcc>
 8006418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800641c:	4b9a      	ldr	r3, [pc, #616]	; (8006688 <_printf_float+0x2d8>)
 800641e:	f04f 32ff 	mov.w	r2, #4294967295
 8006422:	f7fa fb95 	bl	8000b50 <__aeabi_dcmple>
 8006426:	bb48      	cbnz	r0, 800647c <_printf_float+0xcc>
 8006428:	2200      	movs	r2, #0
 800642a:	2300      	movs	r3, #0
 800642c:	4640      	mov	r0, r8
 800642e:	4649      	mov	r1, r9
 8006430:	f7fa fb84 	bl	8000b3c <__aeabi_dcmplt>
 8006434:	b110      	cbz	r0, 800643c <_printf_float+0x8c>
 8006436:	232d      	movs	r3, #45	; 0x2d
 8006438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643c:	4a93      	ldr	r2, [pc, #588]	; (800668c <_printf_float+0x2dc>)
 800643e:	4b94      	ldr	r3, [pc, #592]	; (8006690 <_printf_float+0x2e0>)
 8006440:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006444:	bf94      	ite	ls
 8006446:	4690      	movls	r8, r2
 8006448:	4698      	movhi	r8, r3
 800644a:	2303      	movs	r3, #3
 800644c:	6123      	str	r3, [r4, #16]
 800644e:	9b05      	ldr	r3, [sp, #20]
 8006450:	f023 0304 	bic.w	r3, r3, #4
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	f04f 0900 	mov.w	r9, #0
 800645a:	9700      	str	r7, [sp, #0]
 800645c:	4633      	mov	r3, r6
 800645e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006460:	4621      	mov	r1, r4
 8006462:	4628      	mov	r0, r5
 8006464:	f000 f9da 	bl	800681c <_printf_common>
 8006468:	3001      	adds	r0, #1
 800646a:	f040 8090 	bne.w	800658e <_printf_float+0x1de>
 800646e:	f04f 30ff 	mov.w	r0, #4294967295
 8006472:	b00d      	add	sp, #52	; 0x34
 8006474:	ecbd 8b02 	vpop	{d8}
 8006478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647c:	4642      	mov	r2, r8
 800647e:	464b      	mov	r3, r9
 8006480:	4640      	mov	r0, r8
 8006482:	4649      	mov	r1, r9
 8006484:	f7fa fb82 	bl	8000b8c <__aeabi_dcmpun>
 8006488:	b140      	cbz	r0, 800649c <_printf_float+0xec>
 800648a:	464b      	mov	r3, r9
 800648c:	2b00      	cmp	r3, #0
 800648e:	bfbc      	itt	lt
 8006490:	232d      	movlt	r3, #45	; 0x2d
 8006492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006496:	4a7f      	ldr	r2, [pc, #508]	; (8006694 <_printf_float+0x2e4>)
 8006498:	4b7f      	ldr	r3, [pc, #508]	; (8006698 <_printf_float+0x2e8>)
 800649a:	e7d1      	b.n	8006440 <_printf_float+0x90>
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064a2:	9206      	str	r2, [sp, #24]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	d13f      	bne.n	8006528 <_printf_float+0x178>
 80064a8:	2306      	movs	r3, #6
 80064aa:	6063      	str	r3, [r4, #4]
 80064ac:	9b05      	ldr	r3, [sp, #20]
 80064ae:	6861      	ldr	r1, [r4, #4]
 80064b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064b4:	2300      	movs	r3, #0
 80064b6:	9303      	str	r3, [sp, #12]
 80064b8:	ab0a      	add	r3, sp, #40	; 0x28
 80064ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064be:	ab09      	add	r3, sp, #36	; 0x24
 80064c0:	ec49 8b10 	vmov	d0, r8, r9
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	6022      	str	r2, [r4, #0]
 80064c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064cc:	4628      	mov	r0, r5
 80064ce:	f7ff fecf 	bl	8006270 <__cvt>
 80064d2:	9b06      	ldr	r3, [sp, #24]
 80064d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064d6:	2b47      	cmp	r3, #71	; 0x47
 80064d8:	4680      	mov	r8, r0
 80064da:	d108      	bne.n	80064ee <_printf_float+0x13e>
 80064dc:	1cc8      	adds	r0, r1, #3
 80064de:	db02      	blt.n	80064e6 <_printf_float+0x136>
 80064e0:	6863      	ldr	r3, [r4, #4]
 80064e2:	4299      	cmp	r1, r3
 80064e4:	dd41      	ble.n	800656a <_printf_float+0x1ba>
 80064e6:	f1ab 0302 	sub.w	r3, fp, #2
 80064ea:	fa5f fb83 	uxtb.w	fp, r3
 80064ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064f2:	d820      	bhi.n	8006536 <_printf_float+0x186>
 80064f4:	3901      	subs	r1, #1
 80064f6:	465a      	mov	r2, fp
 80064f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064fc:	9109      	str	r1, [sp, #36]	; 0x24
 80064fe:	f7ff ff19 	bl	8006334 <__exponent>
 8006502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006504:	1813      	adds	r3, r2, r0
 8006506:	2a01      	cmp	r2, #1
 8006508:	4681      	mov	r9, r0
 800650a:	6123      	str	r3, [r4, #16]
 800650c:	dc02      	bgt.n	8006514 <_printf_float+0x164>
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	07d2      	lsls	r2, r2, #31
 8006512:	d501      	bpl.n	8006518 <_printf_float+0x168>
 8006514:	3301      	adds	r3, #1
 8006516:	6123      	str	r3, [r4, #16]
 8006518:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800651c:	2b00      	cmp	r3, #0
 800651e:	d09c      	beq.n	800645a <_printf_float+0xaa>
 8006520:	232d      	movs	r3, #45	; 0x2d
 8006522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006526:	e798      	b.n	800645a <_printf_float+0xaa>
 8006528:	9a06      	ldr	r2, [sp, #24]
 800652a:	2a47      	cmp	r2, #71	; 0x47
 800652c:	d1be      	bne.n	80064ac <_printf_float+0xfc>
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1bc      	bne.n	80064ac <_printf_float+0xfc>
 8006532:	2301      	movs	r3, #1
 8006534:	e7b9      	b.n	80064aa <_printf_float+0xfa>
 8006536:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800653a:	d118      	bne.n	800656e <_printf_float+0x1be>
 800653c:	2900      	cmp	r1, #0
 800653e:	6863      	ldr	r3, [r4, #4]
 8006540:	dd0b      	ble.n	800655a <_printf_float+0x1aa>
 8006542:	6121      	str	r1, [r4, #16]
 8006544:	b913      	cbnz	r3, 800654c <_printf_float+0x19c>
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	07d0      	lsls	r0, r2, #31
 800654a:	d502      	bpl.n	8006552 <_printf_float+0x1a2>
 800654c:	3301      	adds	r3, #1
 800654e:	440b      	add	r3, r1
 8006550:	6123      	str	r3, [r4, #16]
 8006552:	65a1      	str	r1, [r4, #88]	; 0x58
 8006554:	f04f 0900 	mov.w	r9, #0
 8006558:	e7de      	b.n	8006518 <_printf_float+0x168>
 800655a:	b913      	cbnz	r3, 8006562 <_printf_float+0x1b2>
 800655c:	6822      	ldr	r2, [r4, #0]
 800655e:	07d2      	lsls	r2, r2, #31
 8006560:	d501      	bpl.n	8006566 <_printf_float+0x1b6>
 8006562:	3302      	adds	r3, #2
 8006564:	e7f4      	b.n	8006550 <_printf_float+0x1a0>
 8006566:	2301      	movs	r3, #1
 8006568:	e7f2      	b.n	8006550 <_printf_float+0x1a0>
 800656a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800656e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006570:	4299      	cmp	r1, r3
 8006572:	db05      	blt.n	8006580 <_printf_float+0x1d0>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	6121      	str	r1, [r4, #16]
 8006578:	07d8      	lsls	r0, r3, #31
 800657a:	d5ea      	bpl.n	8006552 <_printf_float+0x1a2>
 800657c:	1c4b      	adds	r3, r1, #1
 800657e:	e7e7      	b.n	8006550 <_printf_float+0x1a0>
 8006580:	2900      	cmp	r1, #0
 8006582:	bfd4      	ite	le
 8006584:	f1c1 0202 	rsble	r2, r1, #2
 8006588:	2201      	movgt	r2, #1
 800658a:	4413      	add	r3, r2
 800658c:	e7e0      	b.n	8006550 <_printf_float+0x1a0>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	055a      	lsls	r2, r3, #21
 8006592:	d407      	bmi.n	80065a4 <_printf_float+0x1f4>
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	4642      	mov	r2, r8
 8006598:	4631      	mov	r1, r6
 800659a:	4628      	mov	r0, r5
 800659c:	47b8      	blx	r7
 800659e:	3001      	adds	r0, #1
 80065a0:	d12c      	bne.n	80065fc <_printf_float+0x24c>
 80065a2:	e764      	b.n	800646e <_printf_float+0xbe>
 80065a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065a8:	f240 80e0 	bls.w	800676c <_printf_float+0x3bc>
 80065ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065b0:	2200      	movs	r2, #0
 80065b2:	2300      	movs	r3, #0
 80065b4:	f7fa fab8 	bl	8000b28 <__aeabi_dcmpeq>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d034      	beq.n	8006626 <_printf_float+0x276>
 80065bc:	4a37      	ldr	r2, [pc, #220]	; (800669c <_printf_float+0x2ec>)
 80065be:	2301      	movs	r3, #1
 80065c0:	4631      	mov	r1, r6
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b8      	blx	r7
 80065c6:	3001      	adds	r0, #1
 80065c8:	f43f af51 	beq.w	800646e <_printf_float+0xbe>
 80065cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065d0:	429a      	cmp	r2, r3
 80065d2:	db02      	blt.n	80065da <_printf_float+0x22a>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	07d8      	lsls	r0, r3, #31
 80065d8:	d510      	bpl.n	80065fc <_printf_float+0x24c>
 80065da:	ee18 3a10 	vmov	r3, s16
 80065de:	4652      	mov	r2, sl
 80065e0:	4631      	mov	r1, r6
 80065e2:	4628      	mov	r0, r5
 80065e4:	47b8      	blx	r7
 80065e6:	3001      	adds	r0, #1
 80065e8:	f43f af41 	beq.w	800646e <_printf_float+0xbe>
 80065ec:	f04f 0800 	mov.w	r8, #0
 80065f0:	f104 091a 	add.w	r9, r4, #26
 80065f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f6:	3b01      	subs	r3, #1
 80065f8:	4543      	cmp	r3, r8
 80065fa:	dc09      	bgt.n	8006610 <_printf_float+0x260>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	079b      	lsls	r3, r3, #30
 8006600:	f100 8107 	bmi.w	8006812 <_printf_float+0x462>
 8006604:	68e0      	ldr	r0, [r4, #12]
 8006606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006608:	4298      	cmp	r0, r3
 800660a:	bfb8      	it	lt
 800660c:	4618      	movlt	r0, r3
 800660e:	e730      	b.n	8006472 <_printf_float+0xc2>
 8006610:	2301      	movs	r3, #1
 8006612:	464a      	mov	r2, r9
 8006614:	4631      	mov	r1, r6
 8006616:	4628      	mov	r0, r5
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	f43f af27 	beq.w	800646e <_printf_float+0xbe>
 8006620:	f108 0801 	add.w	r8, r8, #1
 8006624:	e7e6      	b.n	80065f4 <_printf_float+0x244>
 8006626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006628:	2b00      	cmp	r3, #0
 800662a:	dc39      	bgt.n	80066a0 <_printf_float+0x2f0>
 800662c:	4a1b      	ldr	r2, [pc, #108]	; (800669c <_printf_float+0x2ec>)
 800662e:	2301      	movs	r3, #1
 8006630:	4631      	mov	r1, r6
 8006632:	4628      	mov	r0, r5
 8006634:	47b8      	blx	r7
 8006636:	3001      	adds	r0, #1
 8006638:	f43f af19 	beq.w	800646e <_printf_float+0xbe>
 800663c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006640:	4313      	orrs	r3, r2
 8006642:	d102      	bne.n	800664a <_printf_float+0x29a>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	07d9      	lsls	r1, r3, #31
 8006648:	d5d8      	bpl.n	80065fc <_printf_float+0x24c>
 800664a:	ee18 3a10 	vmov	r3, s16
 800664e:	4652      	mov	r2, sl
 8006650:	4631      	mov	r1, r6
 8006652:	4628      	mov	r0, r5
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f af09 	beq.w	800646e <_printf_float+0xbe>
 800665c:	f04f 0900 	mov.w	r9, #0
 8006660:	f104 0a1a 	add.w	sl, r4, #26
 8006664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006666:	425b      	negs	r3, r3
 8006668:	454b      	cmp	r3, r9
 800666a:	dc01      	bgt.n	8006670 <_printf_float+0x2c0>
 800666c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800666e:	e792      	b.n	8006596 <_printf_float+0x1e6>
 8006670:	2301      	movs	r3, #1
 8006672:	4652      	mov	r2, sl
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f aef7 	beq.w	800646e <_printf_float+0xbe>
 8006680:	f109 0901 	add.w	r9, r9, #1
 8006684:	e7ee      	b.n	8006664 <_printf_float+0x2b4>
 8006686:	bf00      	nop
 8006688:	7fefffff 	.word	0x7fefffff
 800668c:	08009e4c 	.word	0x08009e4c
 8006690:	08009e50 	.word	0x08009e50
 8006694:	08009e54 	.word	0x08009e54
 8006698:	08009e58 	.word	0x08009e58
 800669c:	0800a08b 	.word	0x0800a08b
 80066a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066a4:	429a      	cmp	r2, r3
 80066a6:	bfa8      	it	ge
 80066a8:	461a      	movge	r2, r3
 80066aa:	2a00      	cmp	r2, #0
 80066ac:	4691      	mov	r9, r2
 80066ae:	dc37      	bgt.n	8006720 <_printf_float+0x370>
 80066b0:	f04f 0b00 	mov.w	fp, #0
 80066b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066b8:	f104 021a 	add.w	r2, r4, #26
 80066bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066be:	9305      	str	r3, [sp, #20]
 80066c0:	eba3 0309 	sub.w	r3, r3, r9
 80066c4:	455b      	cmp	r3, fp
 80066c6:	dc33      	bgt.n	8006730 <_printf_float+0x380>
 80066c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066cc:	429a      	cmp	r2, r3
 80066ce:	db3b      	blt.n	8006748 <_printf_float+0x398>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	07da      	lsls	r2, r3, #31
 80066d4:	d438      	bmi.n	8006748 <_printf_float+0x398>
 80066d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80066da:	eba2 0903 	sub.w	r9, r2, r3
 80066de:	9b05      	ldr	r3, [sp, #20]
 80066e0:	1ad2      	subs	r2, r2, r3
 80066e2:	4591      	cmp	r9, r2
 80066e4:	bfa8      	it	ge
 80066e6:	4691      	movge	r9, r2
 80066e8:	f1b9 0f00 	cmp.w	r9, #0
 80066ec:	dc35      	bgt.n	800675a <_printf_float+0x3aa>
 80066ee:	f04f 0800 	mov.w	r8, #0
 80066f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066f6:	f104 0a1a 	add.w	sl, r4, #26
 80066fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	eba3 0309 	sub.w	r3, r3, r9
 8006704:	4543      	cmp	r3, r8
 8006706:	f77f af79 	ble.w	80065fc <_printf_float+0x24c>
 800670a:	2301      	movs	r3, #1
 800670c:	4652      	mov	r2, sl
 800670e:	4631      	mov	r1, r6
 8006710:	4628      	mov	r0, r5
 8006712:	47b8      	blx	r7
 8006714:	3001      	adds	r0, #1
 8006716:	f43f aeaa 	beq.w	800646e <_printf_float+0xbe>
 800671a:	f108 0801 	add.w	r8, r8, #1
 800671e:	e7ec      	b.n	80066fa <_printf_float+0x34a>
 8006720:	4613      	mov	r3, r2
 8006722:	4631      	mov	r1, r6
 8006724:	4642      	mov	r2, r8
 8006726:	4628      	mov	r0, r5
 8006728:	47b8      	blx	r7
 800672a:	3001      	adds	r0, #1
 800672c:	d1c0      	bne.n	80066b0 <_printf_float+0x300>
 800672e:	e69e      	b.n	800646e <_printf_float+0xbe>
 8006730:	2301      	movs	r3, #1
 8006732:	4631      	mov	r1, r6
 8006734:	4628      	mov	r0, r5
 8006736:	9205      	str	r2, [sp, #20]
 8006738:	47b8      	blx	r7
 800673a:	3001      	adds	r0, #1
 800673c:	f43f ae97 	beq.w	800646e <_printf_float+0xbe>
 8006740:	9a05      	ldr	r2, [sp, #20]
 8006742:	f10b 0b01 	add.w	fp, fp, #1
 8006746:	e7b9      	b.n	80066bc <_printf_float+0x30c>
 8006748:	ee18 3a10 	vmov	r3, s16
 800674c:	4652      	mov	r2, sl
 800674e:	4631      	mov	r1, r6
 8006750:	4628      	mov	r0, r5
 8006752:	47b8      	blx	r7
 8006754:	3001      	adds	r0, #1
 8006756:	d1be      	bne.n	80066d6 <_printf_float+0x326>
 8006758:	e689      	b.n	800646e <_printf_float+0xbe>
 800675a:	9a05      	ldr	r2, [sp, #20]
 800675c:	464b      	mov	r3, r9
 800675e:	4442      	add	r2, r8
 8006760:	4631      	mov	r1, r6
 8006762:	4628      	mov	r0, r5
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	d1c1      	bne.n	80066ee <_printf_float+0x33e>
 800676a:	e680      	b.n	800646e <_printf_float+0xbe>
 800676c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800676e:	2a01      	cmp	r2, #1
 8006770:	dc01      	bgt.n	8006776 <_printf_float+0x3c6>
 8006772:	07db      	lsls	r3, r3, #31
 8006774:	d53a      	bpl.n	80067ec <_printf_float+0x43c>
 8006776:	2301      	movs	r3, #1
 8006778:	4642      	mov	r2, r8
 800677a:	4631      	mov	r1, r6
 800677c:	4628      	mov	r0, r5
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	f43f ae74 	beq.w	800646e <_printf_float+0xbe>
 8006786:	ee18 3a10 	vmov	r3, s16
 800678a:	4652      	mov	r2, sl
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f ae6b 	beq.w	800646e <_printf_float+0xbe>
 8006798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800679c:	2200      	movs	r2, #0
 800679e:	2300      	movs	r3, #0
 80067a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80067a4:	f7fa f9c0 	bl	8000b28 <__aeabi_dcmpeq>
 80067a8:	b9d8      	cbnz	r0, 80067e2 <_printf_float+0x432>
 80067aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80067ae:	f108 0201 	add.w	r2, r8, #1
 80067b2:	4631      	mov	r1, r6
 80067b4:	4628      	mov	r0, r5
 80067b6:	47b8      	blx	r7
 80067b8:	3001      	adds	r0, #1
 80067ba:	d10e      	bne.n	80067da <_printf_float+0x42a>
 80067bc:	e657      	b.n	800646e <_printf_float+0xbe>
 80067be:	2301      	movs	r3, #1
 80067c0:	4652      	mov	r2, sl
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	f43f ae50 	beq.w	800646e <_printf_float+0xbe>
 80067ce:	f108 0801 	add.w	r8, r8, #1
 80067d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d4:	3b01      	subs	r3, #1
 80067d6:	4543      	cmp	r3, r8
 80067d8:	dcf1      	bgt.n	80067be <_printf_float+0x40e>
 80067da:	464b      	mov	r3, r9
 80067dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067e0:	e6da      	b.n	8006598 <_printf_float+0x1e8>
 80067e2:	f04f 0800 	mov.w	r8, #0
 80067e6:	f104 0a1a 	add.w	sl, r4, #26
 80067ea:	e7f2      	b.n	80067d2 <_printf_float+0x422>
 80067ec:	2301      	movs	r3, #1
 80067ee:	4642      	mov	r2, r8
 80067f0:	e7df      	b.n	80067b2 <_printf_float+0x402>
 80067f2:	2301      	movs	r3, #1
 80067f4:	464a      	mov	r2, r9
 80067f6:	4631      	mov	r1, r6
 80067f8:	4628      	mov	r0, r5
 80067fa:	47b8      	blx	r7
 80067fc:	3001      	adds	r0, #1
 80067fe:	f43f ae36 	beq.w	800646e <_printf_float+0xbe>
 8006802:	f108 0801 	add.w	r8, r8, #1
 8006806:	68e3      	ldr	r3, [r4, #12]
 8006808:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800680a:	1a5b      	subs	r3, r3, r1
 800680c:	4543      	cmp	r3, r8
 800680e:	dcf0      	bgt.n	80067f2 <_printf_float+0x442>
 8006810:	e6f8      	b.n	8006604 <_printf_float+0x254>
 8006812:	f04f 0800 	mov.w	r8, #0
 8006816:	f104 0919 	add.w	r9, r4, #25
 800681a:	e7f4      	b.n	8006806 <_printf_float+0x456>

0800681c <_printf_common>:
 800681c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006820:	4616      	mov	r6, r2
 8006822:	4699      	mov	r9, r3
 8006824:	688a      	ldr	r2, [r1, #8]
 8006826:	690b      	ldr	r3, [r1, #16]
 8006828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800682c:	4293      	cmp	r3, r2
 800682e:	bfb8      	it	lt
 8006830:	4613      	movlt	r3, r2
 8006832:	6033      	str	r3, [r6, #0]
 8006834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006838:	4607      	mov	r7, r0
 800683a:	460c      	mov	r4, r1
 800683c:	b10a      	cbz	r2, 8006842 <_printf_common+0x26>
 800683e:	3301      	adds	r3, #1
 8006840:	6033      	str	r3, [r6, #0]
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	0699      	lsls	r1, r3, #26
 8006846:	bf42      	ittt	mi
 8006848:	6833      	ldrmi	r3, [r6, #0]
 800684a:	3302      	addmi	r3, #2
 800684c:	6033      	strmi	r3, [r6, #0]
 800684e:	6825      	ldr	r5, [r4, #0]
 8006850:	f015 0506 	ands.w	r5, r5, #6
 8006854:	d106      	bne.n	8006864 <_printf_common+0x48>
 8006856:	f104 0a19 	add.w	sl, r4, #25
 800685a:	68e3      	ldr	r3, [r4, #12]
 800685c:	6832      	ldr	r2, [r6, #0]
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	42ab      	cmp	r3, r5
 8006862:	dc26      	bgt.n	80068b2 <_printf_common+0x96>
 8006864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006868:	1e13      	subs	r3, r2, #0
 800686a:	6822      	ldr	r2, [r4, #0]
 800686c:	bf18      	it	ne
 800686e:	2301      	movne	r3, #1
 8006870:	0692      	lsls	r2, r2, #26
 8006872:	d42b      	bmi.n	80068cc <_printf_common+0xb0>
 8006874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006878:	4649      	mov	r1, r9
 800687a:	4638      	mov	r0, r7
 800687c:	47c0      	blx	r8
 800687e:	3001      	adds	r0, #1
 8006880:	d01e      	beq.n	80068c0 <_printf_common+0xa4>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	6922      	ldr	r2, [r4, #16]
 8006886:	f003 0306 	and.w	r3, r3, #6
 800688a:	2b04      	cmp	r3, #4
 800688c:	bf02      	ittt	eq
 800688e:	68e5      	ldreq	r5, [r4, #12]
 8006890:	6833      	ldreq	r3, [r6, #0]
 8006892:	1aed      	subeq	r5, r5, r3
 8006894:	68a3      	ldr	r3, [r4, #8]
 8006896:	bf0c      	ite	eq
 8006898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800689c:	2500      	movne	r5, #0
 800689e:	4293      	cmp	r3, r2
 80068a0:	bfc4      	itt	gt
 80068a2:	1a9b      	subgt	r3, r3, r2
 80068a4:	18ed      	addgt	r5, r5, r3
 80068a6:	2600      	movs	r6, #0
 80068a8:	341a      	adds	r4, #26
 80068aa:	42b5      	cmp	r5, r6
 80068ac:	d11a      	bne.n	80068e4 <_printf_common+0xc8>
 80068ae:	2000      	movs	r0, #0
 80068b0:	e008      	b.n	80068c4 <_printf_common+0xa8>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4652      	mov	r2, sl
 80068b6:	4649      	mov	r1, r9
 80068b8:	4638      	mov	r0, r7
 80068ba:	47c0      	blx	r8
 80068bc:	3001      	adds	r0, #1
 80068be:	d103      	bne.n	80068c8 <_printf_common+0xac>
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c8:	3501      	adds	r5, #1
 80068ca:	e7c6      	b.n	800685a <_printf_common+0x3e>
 80068cc:	18e1      	adds	r1, r4, r3
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	2030      	movs	r0, #48	; 0x30
 80068d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068d6:	4422      	add	r2, r4
 80068d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068e0:	3302      	adds	r3, #2
 80068e2:	e7c7      	b.n	8006874 <_printf_common+0x58>
 80068e4:	2301      	movs	r3, #1
 80068e6:	4622      	mov	r2, r4
 80068e8:	4649      	mov	r1, r9
 80068ea:	4638      	mov	r0, r7
 80068ec:	47c0      	blx	r8
 80068ee:	3001      	adds	r0, #1
 80068f0:	d0e6      	beq.n	80068c0 <_printf_common+0xa4>
 80068f2:	3601      	adds	r6, #1
 80068f4:	e7d9      	b.n	80068aa <_printf_common+0x8e>
	...

080068f8 <_printf_i>:
 80068f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068fc:	7e0f      	ldrb	r7, [r1, #24]
 80068fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006900:	2f78      	cmp	r7, #120	; 0x78
 8006902:	4691      	mov	r9, r2
 8006904:	4680      	mov	r8, r0
 8006906:	460c      	mov	r4, r1
 8006908:	469a      	mov	sl, r3
 800690a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800690e:	d807      	bhi.n	8006920 <_printf_i+0x28>
 8006910:	2f62      	cmp	r7, #98	; 0x62
 8006912:	d80a      	bhi.n	800692a <_printf_i+0x32>
 8006914:	2f00      	cmp	r7, #0
 8006916:	f000 80d4 	beq.w	8006ac2 <_printf_i+0x1ca>
 800691a:	2f58      	cmp	r7, #88	; 0x58
 800691c:	f000 80c0 	beq.w	8006aa0 <_printf_i+0x1a8>
 8006920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006928:	e03a      	b.n	80069a0 <_printf_i+0xa8>
 800692a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800692e:	2b15      	cmp	r3, #21
 8006930:	d8f6      	bhi.n	8006920 <_printf_i+0x28>
 8006932:	a101      	add	r1, pc, #4	; (adr r1, 8006938 <_printf_i+0x40>)
 8006934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006938:	08006991 	.word	0x08006991
 800693c:	080069a5 	.word	0x080069a5
 8006940:	08006921 	.word	0x08006921
 8006944:	08006921 	.word	0x08006921
 8006948:	08006921 	.word	0x08006921
 800694c:	08006921 	.word	0x08006921
 8006950:	080069a5 	.word	0x080069a5
 8006954:	08006921 	.word	0x08006921
 8006958:	08006921 	.word	0x08006921
 800695c:	08006921 	.word	0x08006921
 8006960:	08006921 	.word	0x08006921
 8006964:	08006aa9 	.word	0x08006aa9
 8006968:	080069d1 	.word	0x080069d1
 800696c:	08006a63 	.word	0x08006a63
 8006970:	08006921 	.word	0x08006921
 8006974:	08006921 	.word	0x08006921
 8006978:	08006acb 	.word	0x08006acb
 800697c:	08006921 	.word	0x08006921
 8006980:	080069d1 	.word	0x080069d1
 8006984:	08006921 	.word	0x08006921
 8006988:	08006921 	.word	0x08006921
 800698c:	08006a6b 	.word	0x08006a6b
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	1d1a      	adds	r2, r3, #4
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	602a      	str	r2, [r5, #0]
 8006998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800699c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a0:	2301      	movs	r3, #1
 80069a2:	e09f      	b.n	8006ae4 <_printf_i+0x1ec>
 80069a4:	6820      	ldr	r0, [r4, #0]
 80069a6:	682b      	ldr	r3, [r5, #0]
 80069a8:	0607      	lsls	r7, r0, #24
 80069aa:	f103 0104 	add.w	r1, r3, #4
 80069ae:	6029      	str	r1, [r5, #0]
 80069b0:	d501      	bpl.n	80069b6 <_printf_i+0xbe>
 80069b2:	681e      	ldr	r6, [r3, #0]
 80069b4:	e003      	b.n	80069be <_printf_i+0xc6>
 80069b6:	0646      	lsls	r6, r0, #25
 80069b8:	d5fb      	bpl.n	80069b2 <_printf_i+0xba>
 80069ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069be:	2e00      	cmp	r6, #0
 80069c0:	da03      	bge.n	80069ca <_printf_i+0xd2>
 80069c2:	232d      	movs	r3, #45	; 0x2d
 80069c4:	4276      	negs	r6, r6
 80069c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ca:	485a      	ldr	r0, [pc, #360]	; (8006b34 <_printf_i+0x23c>)
 80069cc:	230a      	movs	r3, #10
 80069ce:	e012      	b.n	80069f6 <_printf_i+0xfe>
 80069d0:	682b      	ldr	r3, [r5, #0]
 80069d2:	6820      	ldr	r0, [r4, #0]
 80069d4:	1d19      	adds	r1, r3, #4
 80069d6:	6029      	str	r1, [r5, #0]
 80069d8:	0605      	lsls	r5, r0, #24
 80069da:	d501      	bpl.n	80069e0 <_printf_i+0xe8>
 80069dc:	681e      	ldr	r6, [r3, #0]
 80069de:	e002      	b.n	80069e6 <_printf_i+0xee>
 80069e0:	0641      	lsls	r1, r0, #25
 80069e2:	d5fb      	bpl.n	80069dc <_printf_i+0xe4>
 80069e4:	881e      	ldrh	r6, [r3, #0]
 80069e6:	4853      	ldr	r0, [pc, #332]	; (8006b34 <_printf_i+0x23c>)
 80069e8:	2f6f      	cmp	r7, #111	; 0x6f
 80069ea:	bf0c      	ite	eq
 80069ec:	2308      	moveq	r3, #8
 80069ee:	230a      	movne	r3, #10
 80069f0:	2100      	movs	r1, #0
 80069f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069f6:	6865      	ldr	r5, [r4, #4]
 80069f8:	60a5      	str	r5, [r4, #8]
 80069fa:	2d00      	cmp	r5, #0
 80069fc:	bfa2      	ittt	ge
 80069fe:	6821      	ldrge	r1, [r4, #0]
 8006a00:	f021 0104 	bicge.w	r1, r1, #4
 8006a04:	6021      	strge	r1, [r4, #0]
 8006a06:	b90e      	cbnz	r6, 8006a0c <_printf_i+0x114>
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	d04b      	beq.n	8006aa4 <_printf_i+0x1ac>
 8006a0c:	4615      	mov	r5, r2
 8006a0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a12:	fb03 6711 	mls	r7, r3, r1, r6
 8006a16:	5dc7      	ldrb	r7, [r0, r7]
 8006a18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a1c:	4637      	mov	r7, r6
 8006a1e:	42bb      	cmp	r3, r7
 8006a20:	460e      	mov	r6, r1
 8006a22:	d9f4      	bls.n	8006a0e <_printf_i+0x116>
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d10b      	bne.n	8006a40 <_printf_i+0x148>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	07de      	lsls	r6, r3, #31
 8006a2c:	d508      	bpl.n	8006a40 <_printf_i+0x148>
 8006a2e:	6923      	ldr	r3, [r4, #16]
 8006a30:	6861      	ldr	r1, [r4, #4]
 8006a32:	4299      	cmp	r1, r3
 8006a34:	bfde      	ittt	le
 8006a36:	2330      	movle	r3, #48	; 0x30
 8006a38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a40:	1b52      	subs	r2, r2, r5
 8006a42:	6122      	str	r2, [r4, #16]
 8006a44:	f8cd a000 	str.w	sl, [sp]
 8006a48:	464b      	mov	r3, r9
 8006a4a:	aa03      	add	r2, sp, #12
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f7ff fee4 	bl	800681c <_printf_common>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d14a      	bne.n	8006aee <_printf_i+0x1f6>
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5c:	b004      	add	sp, #16
 8006a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	f043 0320 	orr.w	r3, r3, #32
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	4833      	ldr	r0, [pc, #204]	; (8006b38 <_printf_i+0x240>)
 8006a6c:	2778      	movs	r7, #120	; 0x78
 8006a6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	6829      	ldr	r1, [r5, #0]
 8006a76:	061f      	lsls	r7, r3, #24
 8006a78:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a7c:	d402      	bmi.n	8006a84 <_printf_i+0x18c>
 8006a7e:	065f      	lsls	r7, r3, #25
 8006a80:	bf48      	it	mi
 8006a82:	b2b6      	uxthmi	r6, r6
 8006a84:	07df      	lsls	r7, r3, #31
 8006a86:	bf48      	it	mi
 8006a88:	f043 0320 	orrmi.w	r3, r3, #32
 8006a8c:	6029      	str	r1, [r5, #0]
 8006a8e:	bf48      	it	mi
 8006a90:	6023      	strmi	r3, [r4, #0]
 8006a92:	b91e      	cbnz	r6, 8006a9c <_printf_i+0x1a4>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	f023 0320 	bic.w	r3, r3, #32
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	e7a7      	b.n	80069f0 <_printf_i+0xf8>
 8006aa0:	4824      	ldr	r0, [pc, #144]	; (8006b34 <_printf_i+0x23c>)
 8006aa2:	e7e4      	b.n	8006a6e <_printf_i+0x176>
 8006aa4:	4615      	mov	r5, r2
 8006aa6:	e7bd      	b.n	8006a24 <_printf_i+0x12c>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	6826      	ldr	r6, [r4, #0]
 8006aac:	6961      	ldr	r1, [r4, #20]
 8006aae:	1d18      	adds	r0, r3, #4
 8006ab0:	6028      	str	r0, [r5, #0]
 8006ab2:	0635      	lsls	r5, r6, #24
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	d501      	bpl.n	8006abc <_printf_i+0x1c4>
 8006ab8:	6019      	str	r1, [r3, #0]
 8006aba:	e002      	b.n	8006ac2 <_printf_i+0x1ca>
 8006abc:	0670      	lsls	r0, r6, #25
 8006abe:	d5fb      	bpl.n	8006ab8 <_printf_i+0x1c0>
 8006ac0:	8019      	strh	r1, [r3, #0]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	4615      	mov	r5, r2
 8006ac8:	e7bc      	b.n	8006a44 <_printf_i+0x14c>
 8006aca:	682b      	ldr	r3, [r5, #0]
 8006acc:	1d1a      	adds	r2, r3, #4
 8006ace:	602a      	str	r2, [r5, #0]
 8006ad0:	681d      	ldr	r5, [r3, #0]
 8006ad2:	6862      	ldr	r2, [r4, #4]
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f7f9 fbaa 	bl	8000230 <memchr>
 8006adc:	b108      	cbz	r0, 8006ae2 <_printf_i+0x1ea>
 8006ade:	1b40      	subs	r0, r0, r5
 8006ae0:	6060      	str	r0, [r4, #4]
 8006ae2:	6863      	ldr	r3, [r4, #4]
 8006ae4:	6123      	str	r3, [r4, #16]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aec:	e7aa      	b.n	8006a44 <_printf_i+0x14c>
 8006aee:	6923      	ldr	r3, [r4, #16]
 8006af0:	462a      	mov	r2, r5
 8006af2:	4649      	mov	r1, r9
 8006af4:	4640      	mov	r0, r8
 8006af6:	47d0      	blx	sl
 8006af8:	3001      	adds	r0, #1
 8006afa:	d0ad      	beq.n	8006a58 <_printf_i+0x160>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	079b      	lsls	r3, r3, #30
 8006b00:	d413      	bmi.n	8006b2a <_printf_i+0x232>
 8006b02:	68e0      	ldr	r0, [r4, #12]
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	4298      	cmp	r0, r3
 8006b08:	bfb8      	it	lt
 8006b0a:	4618      	movlt	r0, r3
 8006b0c:	e7a6      	b.n	8006a5c <_printf_i+0x164>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4632      	mov	r2, r6
 8006b12:	4649      	mov	r1, r9
 8006b14:	4640      	mov	r0, r8
 8006b16:	47d0      	blx	sl
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d09d      	beq.n	8006a58 <_printf_i+0x160>
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	68e3      	ldr	r3, [r4, #12]
 8006b20:	9903      	ldr	r1, [sp, #12]
 8006b22:	1a5b      	subs	r3, r3, r1
 8006b24:	42ab      	cmp	r3, r5
 8006b26:	dcf2      	bgt.n	8006b0e <_printf_i+0x216>
 8006b28:	e7eb      	b.n	8006b02 <_printf_i+0x20a>
 8006b2a:	2500      	movs	r5, #0
 8006b2c:	f104 0619 	add.w	r6, r4, #25
 8006b30:	e7f5      	b.n	8006b1e <_printf_i+0x226>
 8006b32:	bf00      	nop
 8006b34:	08009e5c 	.word	0x08009e5c
 8006b38:	08009e6d 	.word	0x08009e6d

08006b3c <std>:
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	b510      	push	{r4, lr}
 8006b40:	4604      	mov	r4, r0
 8006b42:	e9c0 3300 	strd	r3, r3, [r0]
 8006b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b4a:	6083      	str	r3, [r0, #8]
 8006b4c:	8181      	strh	r1, [r0, #12]
 8006b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b50:	81c2      	strh	r2, [r0, #14]
 8006b52:	6183      	str	r3, [r0, #24]
 8006b54:	4619      	mov	r1, r3
 8006b56:	2208      	movs	r2, #8
 8006b58:	305c      	adds	r0, #92	; 0x5c
 8006b5a:	f000 fa45 	bl	8006fe8 <memset>
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <std+0x58>)
 8006b60:	6263      	str	r3, [r4, #36]	; 0x24
 8006b62:	4b0d      	ldr	r3, [pc, #52]	; (8006b98 <std+0x5c>)
 8006b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b66:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <std+0x60>)
 8006b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <std+0x64>)
 8006b6c:	6323      	str	r3, [r4, #48]	; 0x30
 8006b6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ba4 <std+0x68>)
 8006b70:	6224      	str	r4, [r4, #32]
 8006b72:	429c      	cmp	r4, r3
 8006b74:	d006      	beq.n	8006b84 <std+0x48>
 8006b76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b7a:	4294      	cmp	r4, r2
 8006b7c:	d002      	beq.n	8006b84 <std+0x48>
 8006b7e:	33d0      	adds	r3, #208	; 0xd0
 8006b80:	429c      	cmp	r4, r3
 8006b82:	d105      	bne.n	8006b90 <std+0x54>
 8006b84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b8c:	f000 baa8 	b.w	80070e0 <__retarget_lock_init_recursive>
 8006b90:	bd10      	pop	{r4, pc}
 8006b92:	bf00      	nop
 8006b94:	08006e35 	.word	0x08006e35
 8006b98:	08006e5b 	.word	0x08006e5b
 8006b9c:	08006e93 	.word	0x08006e93
 8006ba0:	08006eb7 	.word	0x08006eb7
 8006ba4:	2000045c 	.word	0x2000045c

08006ba8 <stdio_exit_handler>:
 8006ba8:	4a02      	ldr	r2, [pc, #8]	; (8006bb4 <stdio_exit_handler+0xc>)
 8006baa:	4903      	ldr	r1, [pc, #12]	; (8006bb8 <stdio_exit_handler+0x10>)
 8006bac:	4803      	ldr	r0, [pc, #12]	; (8006bbc <stdio_exit_handler+0x14>)
 8006bae:	f000 b869 	b.w	8006c84 <_fwalk_sglue>
 8006bb2:	bf00      	nop
 8006bb4:	20000018 	.word	0x20000018
 8006bb8:	08009359 	.word	0x08009359
 8006bbc:	20000024 	.word	0x20000024

08006bc0 <cleanup_stdio>:
 8006bc0:	6841      	ldr	r1, [r0, #4]
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <cleanup_stdio+0x34>)
 8006bc4:	4299      	cmp	r1, r3
 8006bc6:	b510      	push	{r4, lr}
 8006bc8:	4604      	mov	r4, r0
 8006bca:	d001      	beq.n	8006bd0 <cleanup_stdio+0x10>
 8006bcc:	f002 fbc4 	bl	8009358 <_fflush_r>
 8006bd0:	68a1      	ldr	r1, [r4, #8]
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <cleanup_stdio+0x38>)
 8006bd4:	4299      	cmp	r1, r3
 8006bd6:	d002      	beq.n	8006bde <cleanup_stdio+0x1e>
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f002 fbbd 	bl	8009358 <_fflush_r>
 8006bde:	68e1      	ldr	r1, [r4, #12]
 8006be0:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <cleanup_stdio+0x3c>)
 8006be2:	4299      	cmp	r1, r3
 8006be4:	d004      	beq.n	8006bf0 <cleanup_stdio+0x30>
 8006be6:	4620      	mov	r0, r4
 8006be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bec:	f002 bbb4 	b.w	8009358 <_fflush_r>
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	bf00      	nop
 8006bf4:	2000045c 	.word	0x2000045c
 8006bf8:	200004c4 	.word	0x200004c4
 8006bfc:	2000052c 	.word	0x2000052c

08006c00 <global_stdio_init.part.0>:
 8006c00:	b510      	push	{r4, lr}
 8006c02:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <global_stdio_init.part.0+0x30>)
 8006c04:	4c0b      	ldr	r4, [pc, #44]	; (8006c34 <global_stdio_init.part.0+0x34>)
 8006c06:	4a0c      	ldr	r2, [pc, #48]	; (8006c38 <global_stdio_init.part.0+0x38>)
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2104      	movs	r1, #4
 8006c10:	f7ff ff94 	bl	8006b3c <std>
 8006c14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c18:	2201      	movs	r2, #1
 8006c1a:	2109      	movs	r1, #9
 8006c1c:	f7ff ff8e 	bl	8006b3c <std>
 8006c20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c24:	2202      	movs	r2, #2
 8006c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c2a:	2112      	movs	r1, #18
 8006c2c:	f7ff bf86 	b.w	8006b3c <std>
 8006c30:	20000594 	.word	0x20000594
 8006c34:	2000045c 	.word	0x2000045c
 8006c38:	08006ba9 	.word	0x08006ba9

08006c3c <__sfp_lock_acquire>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	; (8006c44 <__sfp_lock_acquire+0x8>)
 8006c3e:	f000 ba50 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8006c42:	bf00      	nop
 8006c44:	2000059d 	.word	0x2000059d

08006c48 <__sfp_lock_release>:
 8006c48:	4801      	ldr	r0, [pc, #4]	; (8006c50 <__sfp_lock_release+0x8>)
 8006c4a:	f000 ba4b 	b.w	80070e4 <__retarget_lock_release_recursive>
 8006c4e:	bf00      	nop
 8006c50:	2000059d 	.word	0x2000059d

08006c54 <__sinit>:
 8006c54:	b510      	push	{r4, lr}
 8006c56:	4604      	mov	r4, r0
 8006c58:	f7ff fff0 	bl	8006c3c <__sfp_lock_acquire>
 8006c5c:	6a23      	ldr	r3, [r4, #32]
 8006c5e:	b11b      	cbz	r3, 8006c68 <__sinit+0x14>
 8006c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c64:	f7ff bff0 	b.w	8006c48 <__sfp_lock_release>
 8006c68:	4b04      	ldr	r3, [pc, #16]	; (8006c7c <__sinit+0x28>)
 8006c6a:	6223      	str	r3, [r4, #32]
 8006c6c:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <__sinit+0x2c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1f5      	bne.n	8006c60 <__sinit+0xc>
 8006c74:	f7ff ffc4 	bl	8006c00 <global_stdio_init.part.0>
 8006c78:	e7f2      	b.n	8006c60 <__sinit+0xc>
 8006c7a:	bf00      	nop
 8006c7c:	08006bc1 	.word	0x08006bc1
 8006c80:	20000594 	.word	0x20000594

08006c84 <_fwalk_sglue>:
 8006c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c88:	4607      	mov	r7, r0
 8006c8a:	4688      	mov	r8, r1
 8006c8c:	4614      	mov	r4, r2
 8006c8e:	2600      	movs	r6, #0
 8006c90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c94:	f1b9 0901 	subs.w	r9, r9, #1
 8006c98:	d505      	bpl.n	8006ca6 <_fwalk_sglue+0x22>
 8006c9a:	6824      	ldr	r4, [r4, #0]
 8006c9c:	2c00      	cmp	r4, #0
 8006c9e:	d1f7      	bne.n	8006c90 <_fwalk_sglue+0xc>
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca6:	89ab      	ldrh	r3, [r5, #12]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d907      	bls.n	8006cbc <_fwalk_sglue+0x38>
 8006cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	d003      	beq.n	8006cbc <_fwalk_sglue+0x38>
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	47c0      	blx	r8
 8006cba:	4306      	orrs	r6, r0
 8006cbc:	3568      	adds	r5, #104	; 0x68
 8006cbe:	e7e9      	b.n	8006c94 <_fwalk_sglue+0x10>

08006cc0 <iprintf>:
 8006cc0:	b40f      	push	{r0, r1, r2, r3}
 8006cc2:	b507      	push	{r0, r1, r2, lr}
 8006cc4:	4906      	ldr	r1, [pc, #24]	; (8006ce0 <iprintf+0x20>)
 8006cc6:	ab04      	add	r3, sp, #16
 8006cc8:	6808      	ldr	r0, [r1, #0]
 8006cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cce:	6881      	ldr	r1, [r0, #8]
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	f002 f853 	bl	8008d7c <_vfiprintf_r>
 8006cd6:	b003      	add	sp, #12
 8006cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cdc:	b004      	add	sp, #16
 8006cde:	4770      	bx	lr
 8006ce0:	20000070 	.word	0x20000070

08006ce4 <_puts_r>:
 8006ce4:	6a03      	ldr	r3, [r0, #32]
 8006ce6:	b570      	push	{r4, r5, r6, lr}
 8006ce8:	6884      	ldr	r4, [r0, #8]
 8006cea:	4605      	mov	r5, r0
 8006cec:	460e      	mov	r6, r1
 8006cee:	b90b      	cbnz	r3, 8006cf4 <_puts_r+0x10>
 8006cf0:	f7ff ffb0 	bl	8006c54 <__sinit>
 8006cf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cf6:	07db      	lsls	r3, r3, #31
 8006cf8:	d405      	bmi.n	8006d06 <_puts_r+0x22>
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	0598      	lsls	r0, r3, #22
 8006cfe:	d402      	bmi.n	8006d06 <_puts_r+0x22>
 8006d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d02:	f000 f9ee 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	0719      	lsls	r1, r3, #28
 8006d0a:	d513      	bpl.n	8006d34 <_puts_r+0x50>
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	b18b      	cbz	r3, 8006d34 <_puts_r+0x50>
 8006d10:	3e01      	subs	r6, #1
 8006d12:	68a3      	ldr	r3, [r4, #8]
 8006d14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	60a3      	str	r3, [r4, #8]
 8006d1c:	b9e9      	cbnz	r1, 8006d5a <_puts_r+0x76>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	da2e      	bge.n	8006d80 <_puts_r+0x9c>
 8006d22:	4622      	mov	r2, r4
 8006d24:	210a      	movs	r1, #10
 8006d26:	4628      	mov	r0, r5
 8006d28:	f000 f8c9 	bl	8006ebe <__swbuf_r>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d007      	beq.n	8006d40 <_puts_r+0x5c>
 8006d30:	250a      	movs	r5, #10
 8006d32:	e007      	b.n	8006d44 <_puts_r+0x60>
 8006d34:	4621      	mov	r1, r4
 8006d36:	4628      	mov	r0, r5
 8006d38:	f000 f8fe 	bl	8006f38 <__swsetup_r>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d0e7      	beq.n	8006d10 <_puts_r+0x2c>
 8006d40:	f04f 35ff 	mov.w	r5, #4294967295
 8006d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d46:	07da      	lsls	r2, r3, #31
 8006d48:	d405      	bmi.n	8006d56 <_puts_r+0x72>
 8006d4a:	89a3      	ldrh	r3, [r4, #12]
 8006d4c:	059b      	lsls	r3, r3, #22
 8006d4e:	d402      	bmi.n	8006d56 <_puts_r+0x72>
 8006d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d52:	f000 f9c7 	bl	80070e4 <__retarget_lock_release_recursive>
 8006d56:	4628      	mov	r0, r5
 8006d58:	bd70      	pop	{r4, r5, r6, pc}
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da04      	bge.n	8006d68 <_puts_r+0x84>
 8006d5e:	69a2      	ldr	r2, [r4, #24]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	dc06      	bgt.n	8006d72 <_puts_r+0x8e>
 8006d64:	290a      	cmp	r1, #10
 8006d66:	d004      	beq.n	8006d72 <_puts_r+0x8e>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	6022      	str	r2, [r4, #0]
 8006d6e:	7019      	strb	r1, [r3, #0]
 8006d70:	e7cf      	b.n	8006d12 <_puts_r+0x2e>
 8006d72:	4622      	mov	r2, r4
 8006d74:	4628      	mov	r0, r5
 8006d76:	f000 f8a2 	bl	8006ebe <__swbuf_r>
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d1c9      	bne.n	8006d12 <_puts_r+0x2e>
 8006d7e:	e7df      	b.n	8006d40 <_puts_r+0x5c>
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	250a      	movs	r5, #10
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	6022      	str	r2, [r4, #0]
 8006d88:	701d      	strb	r5, [r3, #0]
 8006d8a:	e7db      	b.n	8006d44 <_puts_r+0x60>

08006d8c <puts>:
 8006d8c:	4b02      	ldr	r3, [pc, #8]	; (8006d98 <puts+0xc>)
 8006d8e:	4601      	mov	r1, r0
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	f7ff bfa7 	b.w	8006ce4 <_puts_r>
 8006d96:	bf00      	nop
 8006d98:	20000070 	.word	0x20000070

08006d9c <siprintf>:
 8006d9c:	b40e      	push	{r1, r2, r3}
 8006d9e:	b500      	push	{lr}
 8006da0:	b09c      	sub	sp, #112	; 0x70
 8006da2:	ab1d      	add	r3, sp, #116	; 0x74
 8006da4:	9002      	str	r0, [sp, #8]
 8006da6:	9006      	str	r0, [sp, #24]
 8006da8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dac:	4809      	ldr	r0, [pc, #36]	; (8006dd4 <siprintf+0x38>)
 8006dae:	9107      	str	r1, [sp, #28]
 8006db0:	9104      	str	r1, [sp, #16]
 8006db2:	4909      	ldr	r1, [pc, #36]	; (8006dd8 <siprintf+0x3c>)
 8006db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006db8:	9105      	str	r1, [sp, #20]
 8006dba:	6800      	ldr	r0, [r0, #0]
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	a902      	add	r1, sp, #8
 8006dc0:	f001 fce2 	bl	8008788 <_svfiprintf_r>
 8006dc4:	9b02      	ldr	r3, [sp, #8]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	b01c      	add	sp, #112	; 0x70
 8006dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd0:	b003      	add	sp, #12
 8006dd2:	4770      	bx	lr
 8006dd4:	20000070 	.word	0x20000070
 8006dd8:	ffff0208 	.word	0xffff0208

08006ddc <siscanf>:
 8006ddc:	b40e      	push	{r1, r2, r3}
 8006dde:	b510      	push	{r4, lr}
 8006de0:	b09f      	sub	sp, #124	; 0x7c
 8006de2:	ac21      	add	r4, sp, #132	; 0x84
 8006de4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006de8:	f854 2b04 	ldr.w	r2, [r4], #4
 8006dec:	9201      	str	r2, [sp, #4]
 8006dee:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006df2:	9004      	str	r0, [sp, #16]
 8006df4:	9008      	str	r0, [sp, #32]
 8006df6:	f7f9 fa6b 	bl	80002d0 <strlen>
 8006dfa:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <siscanf+0x50>)
 8006dfc:	9005      	str	r0, [sp, #20]
 8006dfe:	9009      	str	r0, [sp, #36]	; 0x24
 8006e00:	930d      	str	r3, [sp, #52]	; 0x34
 8006e02:	480b      	ldr	r0, [pc, #44]	; (8006e30 <siscanf+0x54>)
 8006e04:	9a01      	ldr	r2, [sp, #4]
 8006e06:	6800      	ldr	r0, [r0, #0]
 8006e08:	9403      	str	r4, [sp, #12]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	9311      	str	r3, [sp, #68]	; 0x44
 8006e0e:	9316      	str	r3, [sp, #88]	; 0x58
 8006e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006e18:	a904      	add	r1, sp, #16
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	f001 fe0c 	bl	8008a38 <__ssvfiscanf_r>
 8006e20:	b01f      	add	sp, #124	; 0x7c
 8006e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e26:	b003      	add	sp, #12
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	08006e57 	.word	0x08006e57
 8006e30:	20000070 	.word	0x20000070

08006e34 <__sread>:
 8006e34:	b510      	push	{r4, lr}
 8006e36:	460c      	mov	r4, r1
 8006e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e3c:	f000 f902 	bl	8007044 <_read_r>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	bfab      	itete	ge
 8006e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e46:	89a3      	ldrhlt	r3, [r4, #12]
 8006e48:	181b      	addge	r3, r3, r0
 8006e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e4e:	bfac      	ite	ge
 8006e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e52:	81a3      	strhlt	r3, [r4, #12]
 8006e54:	bd10      	pop	{r4, pc}

08006e56 <__seofread>:
 8006e56:	2000      	movs	r0, #0
 8006e58:	4770      	bx	lr

08006e5a <__swrite>:
 8006e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e5e:	461f      	mov	r7, r3
 8006e60:	898b      	ldrh	r3, [r1, #12]
 8006e62:	05db      	lsls	r3, r3, #23
 8006e64:	4605      	mov	r5, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	4616      	mov	r6, r2
 8006e6a:	d505      	bpl.n	8006e78 <__swrite+0x1e>
 8006e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e70:	2302      	movs	r3, #2
 8006e72:	2200      	movs	r2, #0
 8006e74:	f000 f8d4 	bl	8007020 <_lseek_r>
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e82:	81a3      	strh	r3, [r4, #12]
 8006e84:	4632      	mov	r2, r6
 8006e86:	463b      	mov	r3, r7
 8006e88:	4628      	mov	r0, r5
 8006e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8e:	f000 b8eb 	b.w	8007068 <_write_r>

08006e92 <__sseek>:
 8006e92:	b510      	push	{r4, lr}
 8006e94:	460c      	mov	r4, r1
 8006e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9a:	f000 f8c1 	bl	8007020 <_lseek_r>
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	bf15      	itete	ne
 8006ea4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006eae:	81a3      	strheq	r3, [r4, #12]
 8006eb0:	bf18      	it	ne
 8006eb2:	81a3      	strhne	r3, [r4, #12]
 8006eb4:	bd10      	pop	{r4, pc}

08006eb6 <__sclose>:
 8006eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eba:	f000 b8a1 	b.w	8007000 <_close_r>

08006ebe <__swbuf_r>:
 8006ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec0:	460e      	mov	r6, r1
 8006ec2:	4614      	mov	r4, r2
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	b118      	cbz	r0, 8006ed0 <__swbuf_r+0x12>
 8006ec8:	6a03      	ldr	r3, [r0, #32]
 8006eca:	b90b      	cbnz	r3, 8006ed0 <__swbuf_r+0x12>
 8006ecc:	f7ff fec2 	bl	8006c54 <__sinit>
 8006ed0:	69a3      	ldr	r3, [r4, #24]
 8006ed2:	60a3      	str	r3, [r4, #8]
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	071a      	lsls	r2, r3, #28
 8006ed8:	d525      	bpl.n	8006f26 <__swbuf_r+0x68>
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	b31b      	cbz	r3, 8006f26 <__swbuf_r+0x68>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	6922      	ldr	r2, [r4, #16]
 8006ee2:	1a98      	subs	r0, r3, r2
 8006ee4:	6963      	ldr	r3, [r4, #20]
 8006ee6:	b2f6      	uxtb	r6, r6
 8006ee8:	4283      	cmp	r3, r0
 8006eea:	4637      	mov	r7, r6
 8006eec:	dc04      	bgt.n	8006ef8 <__swbuf_r+0x3a>
 8006eee:	4621      	mov	r1, r4
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f002 fa31 	bl	8009358 <_fflush_r>
 8006ef6:	b9e0      	cbnz	r0, 8006f32 <__swbuf_r+0x74>
 8006ef8:	68a3      	ldr	r3, [r4, #8]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	60a3      	str	r3, [r4, #8]
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	6022      	str	r2, [r4, #0]
 8006f04:	701e      	strb	r6, [r3, #0]
 8006f06:	6962      	ldr	r2, [r4, #20]
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d004      	beq.n	8006f18 <__swbuf_r+0x5a>
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	07db      	lsls	r3, r3, #31
 8006f12:	d506      	bpl.n	8006f22 <__swbuf_r+0x64>
 8006f14:	2e0a      	cmp	r6, #10
 8006f16:	d104      	bne.n	8006f22 <__swbuf_r+0x64>
 8006f18:	4621      	mov	r1, r4
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f002 fa1c 	bl	8009358 <_fflush_r>
 8006f20:	b938      	cbnz	r0, 8006f32 <__swbuf_r+0x74>
 8006f22:	4638      	mov	r0, r7
 8006f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f26:	4621      	mov	r1, r4
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f000 f805 	bl	8006f38 <__swsetup_r>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d0d5      	beq.n	8006ede <__swbuf_r+0x20>
 8006f32:	f04f 37ff 	mov.w	r7, #4294967295
 8006f36:	e7f4      	b.n	8006f22 <__swbuf_r+0x64>

08006f38 <__swsetup_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4b2a      	ldr	r3, [pc, #168]	; (8006fe4 <__swsetup_r+0xac>)
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	460c      	mov	r4, r1
 8006f42:	b118      	cbz	r0, 8006f4c <__swsetup_r+0x14>
 8006f44:	6a03      	ldr	r3, [r0, #32]
 8006f46:	b90b      	cbnz	r3, 8006f4c <__swsetup_r+0x14>
 8006f48:	f7ff fe84 	bl	8006c54 <__sinit>
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f52:	0718      	lsls	r0, r3, #28
 8006f54:	d422      	bmi.n	8006f9c <__swsetup_r+0x64>
 8006f56:	06d9      	lsls	r1, r3, #27
 8006f58:	d407      	bmi.n	8006f6a <__swsetup_r+0x32>
 8006f5a:	2309      	movs	r3, #9
 8006f5c:	602b      	str	r3, [r5, #0]
 8006f5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	e034      	b.n	8006fd4 <__swsetup_r+0x9c>
 8006f6a:	0758      	lsls	r0, r3, #29
 8006f6c:	d512      	bpl.n	8006f94 <__swsetup_r+0x5c>
 8006f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f70:	b141      	cbz	r1, 8006f84 <__swsetup_r+0x4c>
 8006f72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f76:	4299      	cmp	r1, r3
 8006f78:	d002      	beq.n	8006f80 <__swsetup_r+0x48>
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f000 ff2e 	bl	8007ddc <_free_r>
 8006f80:	2300      	movs	r3, #0
 8006f82:	6363      	str	r3, [r4, #52]	; 0x34
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6063      	str	r3, [r4, #4]
 8006f90:	6923      	ldr	r3, [r4, #16]
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	f043 0308 	orr.w	r3, r3, #8
 8006f9a:	81a3      	strh	r3, [r4, #12]
 8006f9c:	6923      	ldr	r3, [r4, #16]
 8006f9e:	b94b      	cbnz	r3, 8006fb4 <__swsetup_r+0x7c>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006faa:	d003      	beq.n	8006fb4 <__swsetup_r+0x7c>
 8006fac:	4621      	mov	r1, r4
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f002 fa20 	bl	80093f4 <__smakebuf_r>
 8006fb4:	89a0      	ldrh	r0, [r4, #12]
 8006fb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fba:	f010 0301 	ands.w	r3, r0, #1
 8006fbe:	d00a      	beq.n	8006fd6 <__swsetup_r+0x9e>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60a3      	str	r3, [r4, #8]
 8006fc4:	6963      	ldr	r3, [r4, #20]
 8006fc6:	425b      	negs	r3, r3
 8006fc8:	61a3      	str	r3, [r4, #24]
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	b943      	cbnz	r3, 8006fe0 <__swsetup_r+0xa8>
 8006fce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fd2:	d1c4      	bne.n	8006f5e <__swsetup_r+0x26>
 8006fd4:	bd38      	pop	{r3, r4, r5, pc}
 8006fd6:	0781      	lsls	r1, r0, #30
 8006fd8:	bf58      	it	pl
 8006fda:	6963      	ldrpl	r3, [r4, #20]
 8006fdc:	60a3      	str	r3, [r4, #8]
 8006fde:	e7f4      	b.n	8006fca <__swsetup_r+0x92>
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	e7f7      	b.n	8006fd4 <__swsetup_r+0x9c>
 8006fe4:	20000070 	.word	0x20000070

08006fe8 <memset>:
 8006fe8:	4402      	add	r2, r0
 8006fea:	4603      	mov	r3, r0
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d100      	bne.n	8006ff2 <memset+0xa>
 8006ff0:	4770      	bx	lr
 8006ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ff6:	e7f9      	b.n	8006fec <memset+0x4>

08006ff8 <_localeconv_r>:
 8006ff8:	4800      	ldr	r0, [pc, #0]	; (8006ffc <_localeconv_r+0x4>)
 8006ffa:	4770      	bx	lr
 8006ffc:	20000164 	.word	0x20000164

08007000 <_close_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	; (800701c <_close_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7fb fb87 	bl	800271e <_close>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_close_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_close_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	20000598 	.word	0x20000598

08007020 <_lseek_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d07      	ldr	r5, [pc, #28]	; (8007040 <_lseek_r+0x20>)
 8007024:	4604      	mov	r4, r0
 8007026:	4608      	mov	r0, r1
 8007028:	4611      	mov	r1, r2
 800702a:	2200      	movs	r2, #0
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	f7fb fb9c 	bl	800276c <_lseek>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_lseek_r+0x1e>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	b103      	cbz	r3, 800703e <_lseek_r+0x1e>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	20000598 	.word	0x20000598

08007044 <_read_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d07      	ldr	r5, [pc, #28]	; (8007064 <_read_r+0x20>)
 8007048:	4604      	mov	r4, r0
 800704a:	4608      	mov	r0, r1
 800704c:	4611      	mov	r1, r2
 800704e:	2200      	movs	r2, #0
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	f7fb fb2a 	bl	80026ac <_read>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_read_r+0x1e>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_read_r+0x1e>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20000598 	.word	0x20000598

08007068 <_write_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d07      	ldr	r5, [pc, #28]	; (8007088 <_write_r+0x20>)
 800706c:	4604      	mov	r4, r0
 800706e:	4608      	mov	r0, r1
 8007070:	4611      	mov	r1, r2
 8007072:	2200      	movs	r2, #0
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7fb fb35 	bl	80026e6 <_write>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_write_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_write_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20000598 	.word	0x20000598

0800708c <__errno>:
 800708c:	4b01      	ldr	r3, [pc, #4]	; (8007094 <__errno+0x8>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000070 	.word	0x20000070

08007098 <__libc_init_array>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4d0d      	ldr	r5, [pc, #52]	; (80070d0 <__libc_init_array+0x38>)
 800709c:	4c0d      	ldr	r4, [pc, #52]	; (80070d4 <__libc_init_array+0x3c>)
 800709e:	1b64      	subs	r4, r4, r5
 80070a0:	10a4      	asrs	r4, r4, #2
 80070a2:	2600      	movs	r6, #0
 80070a4:	42a6      	cmp	r6, r4
 80070a6:	d109      	bne.n	80070bc <__libc_init_array+0x24>
 80070a8:	4d0b      	ldr	r5, [pc, #44]	; (80070d8 <__libc_init_array+0x40>)
 80070aa:	4c0c      	ldr	r4, [pc, #48]	; (80070dc <__libc_init_array+0x44>)
 80070ac:	f002 fcd6 	bl	8009a5c <_init>
 80070b0:	1b64      	subs	r4, r4, r5
 80070b2:	10a4      	asrs	r4, r4, #2
 80070b4:	2600      	movs	r6, #0
 80070b6:	42a6      	cmp	r6, r4
 80070b8:	d105      	bne.n	80070c6 <__libc_init_array+0x2e>
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c0:	4798      	blx	r3
 80070c2:	3601      	adds	r6, #1
 80070c4:	e7ee      	b.n	80070a4 <__libc_init_array+0xc>
 80070c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ca:	4798      	blx	r3
 80070cc:	3601      	adds	r6, #1
 80070ce:	e7f2      	b.n	80070b6 <__libc_init_array+0x1e>
 80070d0:	0800a1e0 	.word	0x0800a1e0
 80070d4:	0800a1e0 	.word	0x0800a1e0
 80070d8:	0800a1e0 	.word	0x0800a1e0
 80070dc:	0800a1e4 	.word	0x0800a1e4

080070e0 <__retarget_lock_init_recursive>:
 80070e0:	4770      	bx	lr

080070e2 <__retarget_lock_acquire_recursive>:
 80070e2:	4770      	bx	lr

080070e4 <__retarget_lock_release_recursive>:
 80070e4:	4770      	bx	lr

080070e6 <quorem>:
 80070e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ea:	6903      	ldr	r3, [r0, #16]
 80070ec:	690c      	ldr	r4, [r1, #16]
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	4607      	mov	r7, r0
 80070f2:	db7e      	blt.n	80071f2 <quorem+0x10c>
 80070f4:	3c01      	subs	r4, #1
 80070f6:	f101 0814 	add.w	r8, r1, #20
 80070fa:	f100 0514 	add.w	r5, r0, #20
 80070fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800710c:	3301      	adds	r3, #1
 800710e:	429a      	cmp	r2, r3
 8007110:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007118:	fbb2 f6f3 	udiv	r6, r2, r3
 800711c:	d331      	bcc.n	8007182 <quorem+0x9c>
 800711e:	f04f 0e00 	mov.w	lr, #0
 8007122:	4640      	mov	r0, r8
 8007124:	46ac      	mov	ip, r5
 8007126:	46f2      	mov	sl, lr
 8007128:	f850 2b04 	ldr.w	r2, [r0], #4
 800712c:	b293      	uxth	r3, r2
 800712e:	fb06 e303 	mla	r3, r6, r3, lr
 8007132:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007136:	0c1a      	lsrs	r2, r3, #16
 8007138:	b29b      	uxth	r3, r3
 800713a:	ebaa 0303 	sub.w	r3, sl, r3
 800713e:	f8dc a000 	ldr.w	sl, [ip]
 8007142:	fa13 f38a 	uxtah	r3, r3, sl
 8007146:	fb06 220e 	mla	r2, r6, lr, r2
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	9b00      	ldr	r3, [sp, #0]
 800714e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007152:	b292      	uxth	r2, r2
 8007154:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800715c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007160:	4581      	cmp	r9, r0
 8007162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007166:	f84c 3b04 	str.w	r3, [ip], #4
 800716a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800716e:	d2db      	bcs.n	8007128 <quorem+0x42>
 8007170:	f855 300b 	ldr.w	r3, [r5, fp]
 8007174:	b92b      	cbnz	r3, 8007182 <quorem+0x9c>
 8007176:	9b01      	ldr	r3, [sp, #4]
 8007178:	3b04      	subs	r3, #4
 800717a:	429d      	cmp	r5, r3
 800717c:	461a      	mov	r2, r3
 800717e:	d32c      	bcc.n	80071da <quorem+0xf4>
 8007180:	613c      	str	r4, [r7, #16]
 8007182:	4638      	mov	r0, r7
 8007184:	f001 f9a6 	bl	80084d4 <__mcmp>
 8007188:	2800      	cmp	r0, #0
 800718a:	db22      	blt.n	80071d2 <quorem+0xec>
 800718c:	3601      	adds	r6, #1
 800718e:	4629      	mov	r1, r5
 8007190:	2000      	movs	r0, #0
 8007192:	f858 2b04 	ldr.w	r2, [r8], #4
 8007196:	f8d1 c000 	ldr.w	ip, [r1]
 800719a:	b293      	uxth	r3, r2
 800719c:	1ac3      	subs	r3, r0, r3
 800719e:	0c12      	lsrs	r2, r2, #16
 80071a0:	fa13 f38c 	uxtah	r3, r3, ip
 80071a4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80071a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071b2:	45c1      	cmp	r9, r8
 80071b4:	f841 3b04 	str.w	r3, [r1], #4
 80071b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071bc:	d2e9      	bcs.n	8007192 <quorem+0xac>
 80071be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071c6:	b922      	cbnz	r2, 80071d2 <quorem+0xec>
 80071c8:	3b04      	subs	r3, #4
 80071ca:	429d      	cmp	r5, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	d30a      	bcc.n	80071e6 <quorem+0x100>
 80071d0:	613c      	str	r4, [r7, #16]
 80071d2:	4630      	mov	r0, r6
 80071d4:	b003      	add	sp, #12
 80071d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	3b04      	subs	r3, #4
 80071de:	2a00      	cmp	r2, #0
 80071e0:	d1ce      	bne.n	8007180 <quorem+0x9a>
 80071e2:	3c01      	subs	r4, #1
 80071e4:	e7c9      	b.n	800717a <quorem+0x94>
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	3b04      	subs	r3, #4
 80071ea:	2a00      	cmp	r2, #0
 80071ec:	d1f0      	bne.n	80071d0 <quorem+0xea>
 80071ee:	3c01      	subs	r4, #1
 80071f0:	e7eb      	b.n	80071ca <quorem+0xe4>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e7ee      	b.n	80071d4 <quorem+0xee>
	...

080071f8 <_dtoa_r>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	ed2d 8b04 	vpush	{d8-d9}
 8007200:	69c5      	ldr	r5, [r0, #28]
 8007202:	b093      	sub	sp, #76	; 0x4c
 8007204:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007208:	ec57 6b10 	vmov	r6, r7, d0
 800720c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007210:	9107      	str	r1, [sp, #28]
 8007212:	4604      	mov	r4, r0
 8007214:	920a      	str	r2, [sp, #40]	; 0x28
 8007216:	930d      	str	r3, [sp, #52]	; 0x34
 8007218:	b975      	cbnz	r5, 8007238 <_dtoa_r+0x40>
 800721a:	2010      	movs	r0, #16
 800721c:	f000 fe2a 	bl	8007e74 <malloc>
 8007220:	4602      	mov	r2, r0
 8007222:	61e0      	str	r0, [r4, #28]
 8007224:	b920      	cbnz	r0, 8007230 <_dtoa_r+0x38>
 8007226:	4bae      	ldr	r3, [pc, #696]	; (80074e0 <_dtoa_r+0x2e8>)
 8007228:	21ef      	movs	r1, #239	; 0xef
 800722a:	48ae      	ldr	r0, [pc, #696]	; (80074e4 <_dtoa_r+0x2ec>)
 800722c:	f002 f9ec 	bl	8009608 <__assert_func>
 8007230:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007234:	6005      	str	r5, [r0, #0]
 8007236:	60c5      	str	r5, [r0, #12]
 8007238:	69e3      	ldr	r3, [r4, #28]
 800723a:	6819      	ldr	r1, [r3, #0]
 800723c:	b151      	cbz	r1, 8007254 <_dtoa_r+0x5c>
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	604a      	str	r2, [r1, #4]
 8007242:	2301      	movs	r3, #1
 8007244:	4093      	lsls	r3, r2
 8007246:	608b      	str	r3, [r1, #8]
 8007248:	4620      	mov	r0, r4
 800724a:	f000 ff07 	bl	800805c <_Bfree>
 800724e:	69e3      	ldr	r3, [r4, #28]
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	1e3b      	subs	r3, r7, #0
 8007256:	bfbb      	ittet	lt
 8007258:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800725c:	9303      	strlt	r3, [sp, #12]
 800725e:	2300      	movge	r3, #0
 8007260:	2201      	movlt	r2, #1
 8007262:	bfac      	ite	ge
 8007264:	f8c8 3000 	strge.w	r3, [r8]
 8007268:	f8c8 2000 	strlt.w	r2, [r8]
 800726c:	4b9e      	ldr	r3, [pc, #632]	; (80074e8 <_dtoa_r+0x2f0>)
 800726e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007272:	ea33 0308 	bics.w	r3, r3, r8
 8007276:	d11b      	bne.n	80072b0 <_dtoa_r+0xb8>
 8007278:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800727a:	f242 730f 	movw	r3, #9999	; 0x270f
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007284:	4333      	orrs	r3, r6
 8007286:	f000 8593 	beq.w	8007db0 <_dtoa_r+0xbb8>
 800728a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800728c:	b963      	cbnz	r3, 80072a8 <_dtoa_r+0xb0>
 800728e:	4b97      	ldr	r3, [pc, #604]	; (80074ec <_dtoa_r+0x2f4>)
 8007290:	e027      	b.n	80072e2 <_dtoa_r+0xea>
 8007292:	4b97      	ldr	r3, [pc, #604]	; (80074f0 <_dtoa_r+0x2f8>)
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	9800      	ldr	r0, [sp, #0]
 800729e:	b013      	add	sp, #76	; 0x4c
 80072a0:	ecbd 8b04 	vpop	{d8-d9}
 80072a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a8:	4b90      	ldr	r3, [pc, #576]	; (80074ec <_dtoa_r+0x2f4>)
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	3303      	adds	r3, #3
 80072ae:	e7f3      	b.n	8007298 <_dtoa_r+0xa0>
 80072b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072b4:	2200      	movs	r2, #0
 80072b6:	ec51 0b17 	vmov	r0, r1, d7
 80072ba:	eeb0 8a47 	vmov.f32	s16, s14
 80072be:	eef0 8a67 	vmov.f32	s17, s15
 80072c2:	2300      	movs	r3, #0
 80072c4:	f7f9 fc30 	bl	8000b28 <__aeabi_dcmpeq>
 80072c8:	4681      	mov	r9, r0
 80072ca:	b160      	cbz	r0, 80072e6 <_dtoa_r+0xee>
 80072cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072ce:	2301      	movs	r3, #1
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8568 	beq.w	8007daa <_dtoa_r+0xbb2>
 80072da:	4b86      	ldr	r3, [pc, #536]	; (80074f4 <_dtoa_r+0x2fc>)
 80072dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	e7da      	b.n	800729c <_dtoa_r+0xa4>
 80072e6:	aa10      	add	r2, sp, #64	; 0x40
 80072e8:	a911      	add	r1, sp, #68	; 0x44
 80072ea:	4620      	mov	r0, r4
 80072ec:	eeb0 0a48 	vmov.f32	s0, s16
 80072f0:	eef0 0a68 	vmov.f32	s1, s17
 80072f4:	f001 f994 	bl	8008620 <__d2b>
 80072f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80072fc:	4682      	mov	sl, r0
 80072fe:	2d00      	cmp	r5, #0
 8007300:	d07f      	beq.n	8007402 <_dtoa_r+0x20a>
 8007302:	ee18 3a90 	vmov	r3, s17
 8007306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800730a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800730e:	ec51 0b18 	vmov	r0, r1, d8
 8007312:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007316:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800731a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800731e:	4619      	mov	r1, r3
 8007320:	2200      	movs	r2, #0
 8007322:	4b75      	ldr	r3, [pc, #468]	; (80074f8 <_dtoa_r+0x300>)
 8007324:	f7f8 ffe0 	bl	80002e8 <__aeabi_dsub>
 8007328:	a367      	add	r3, pc, #412	; (adr r3, 80074c8 <_dtoa_r+0x2d0>)
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f7f9 f993 	bl	8000658 <__aeabi_dmul>
 8007332:	a367      	add	r3, pc, #412	; (adr r3, 80074d0 <_dtoa_r+0x2d8>)
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	f7f8 ffd8 	bl	80002ec <__adddf3>
 800733c:	4606      	mov	r6, r0
 800733e:	4628      	mov	r0, r5
 8007340:	460f      	mov	r7, r1
 8007342:	f7f9 f91f 	bl	8000584 <__aeabi_i2d>
 8007346:	a364      	add	r3, pc, #400	; (adr r3, 80074d8 <_dtoa_r+0x2e0>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	f7f9 f984 	bl	8000658 <__aeabi_dmul>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4630      	mov	r0, r6
 8007356:	4639      	mov	r1, r7
 8007358:	f7f8 ffc8 	bl	80002ec <__adddf3>
 800735c:	4606      	mov	r6, r0
 800735e:	460f      	mov	r7, r1
 8007360:	f7f9 fc2a 	bl	8000bb8 <__aeabi_d2iz>
 8007364:	2200      	movs	r2, #0
 8007366:	4683      	mov	fp, r0
 8007368:	2300      	movs	r3, #0
 800736a:	4630      	mov	r0, r6
 800736c:	4639      	mov	r1, r7
 800736e:	f7f9 fbe5 	bl	8000b3c <__aeabi_dcmplt>
 8007372:	b148      	cbz	r0, 8007388 <_dtoa_r+0x190>
 8007374:	4658      	mov	r0, fp
 8007376:	f7f9 f905 	bl	8000584 <__aeabi_i2d>
 800737a:	4632      	mov	r2, r6
 800737c:	463b      	mov	r3, r7
 800737e:	f7f9 fbd3 	bl	8000b28 <__aeabi_dcmpeq>
 8007382:	b908      	cbnz	r0, 8007388 <_dtoa_r+0x190>
 8007384:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007388:	f1bb 0f16 	cmp.w	fp, #22
 800738c:	d857      	bhi.n	800743e <_dtoa_r+0x246>
 800738e:	4b5b      	ldr	r3, [pc, #364]	; (80074fc <_dtoa_r+0x304>)
 8007390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	ec51 0b18 	vmov	r0, r1, d8
 800739c:	f7f9 fbce 	bl	8000b3c <__aeabi_dcmplt>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d04e      	beq.n	8007442 <_dtoa_r+0x24a>
 80073a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073a8:	2300      	movs	r3, #0
 80073aa:	930c      	str	r3, [sp, #48]	; 0x30
 80073ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073ae:	1b5b      	subs	r3, r3, r5
 80073b0:	1e5a      	subs	r2, r3, #1
 80073b2:	bf45      	ittet	mi
 80073b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80073b8:	9305      	strmi	r3, [sp, #20]
 80073ba:	2300      	movpl	r3, #0
 80073bc:	2300      	movmi	r3, #0
 80073be:	9206      	str	r2, [sp, #24]
 80073c0:	bf54      	ite	pl
 80073c2:	9305      	strpl	r3, [sp, #20]
 80073c4:	9306      	strmi	r3, [sp, #24]
 80073c6:	f1bb 0f00 	cmp.w	fp, #0
 80073ca:	db3c      	blt.n	8007446 <_dtoa_r+0x24e>
 80073cc:	9b06      	ldr	r3, [sp, #24]
 80073ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80073d2:	445b      	add	r3, fp
 80073d4:	9306      	str	r3, [sp, #24]
 80073d6:	2300      	movs	r3, #0
 80073d8:	9308      	str	r3, [sp, #32]
 80073da:	9b07      	ldr	r3, [sp, #28]
 80073dc:	2b09      	cmp	r3, #9
 80073de:	d868      	bhi.n	80074b2 <_dtoa_r+0x2ba>
 80073e0:	2b05      	cmp	r3, #5
 80073e2:	bfc4      	itt	gt
 80073e4:	3b04      	subgt	r3, #4
 80073e6:	9307      	strgt	r3, [sp, #28]
 80073e8:	9b07      	ldr	r3, [sp, #28]
 80073ea:	f1a3 0302 	sub.w	r3, r3, #2
 80073ee:	bfcc      	ite	gt
 80073f0:	2500      	movgt	r5, #0
 80073f2:	2501      	movle	r5, #1
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	f200 8085 	bhi.w	8007504 <_dtoa_r+0x30c>
 80073fa:	e8df f003 	tbb	[pc, r3]
 80073fe:	3b2e      	.short	0x3b2e
 8007400:	5839      	.short	0x5839
 8007402:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007406:	441d      	add	r5, r3
 8007408:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800740c:	2b20      	cmp	r3, #32
 800740e:	bfc1      	itttt	gt
 8007410:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007414:	fa08 f803 	lslgt.w	r8, r8, r3
 8007418:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800741c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007420:	bfd6      	itet	le
 8007422:	f1c3 0320 	rsble	r3, r3, #32
 8007426:	ea48 0003 	orrgt.w	r0, r8, r3
 800742a:	fa06 f003 	lslle.w	r0, r6, r3
 800742e:	f7f9 f899 	bl	8000564 <__aeabi_ui2d>
 8007432:	2201      	movs	r2, #1
 8007434:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007438:	3d01      	subs	r5, #1
 800743a:	920e      	str	r2, [sp, #56]	; 0x38
 800743c:	e76f      	b.n	800731e <_dtoa_r+0x126>
 800743e:	2301      	movs	r3, #1
 8007440:	e7b3      	b.n	80073aa <_dtoa_r+0x1b2>
 8007442:	900c      	str	r0, [sp, #48]	; 0x30
 8007444:	e7b2      	b.n	80073ac <_dtoa_r+0x1b4>
 8007446:	9b05      	ldr	r3, [sp, #20]
 8007448:	eba3 030b 	sub.w	r3, r3, fp
 800744c:	9305      	str	r3, [sp, #20]
 800744e:	f1cb 0300 	rsb	r3, fp, #0
 8007452:	9308      	str	r3, [sp, #32]
 8007454:	2300      	movs	r3, #0
 8007456:	930b      	str	r3, [sp, #44]	; 0x2c
 8007458:	e7bf      	b.n	80073da <_dtoa_r+0x1e2>
 800745a:	2300      	movs	r3, #0
 800745c:	9309      	str	r3, [sp, #36]	; 0x24
 800745e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007460:	2b00      	cmp	r3, #0
 8007462:	dc52      	bgt.n	800750a <_dtoa_r+0x312>
 8007464:	2301      	movs	r3, #1
 8007466:	9301      	str	r3, [sp, #4]
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	461a      	mov	r2, r3
 800746c:	920a      	str	r2, [sp, #40]	; 0x28
 800746e:	e00b      	b.n	8007488 <_dtoa_r+0x290>
 8007470:	2301      	movs	r3, #1
 8007472:	e7f3      	b.n	800745c <_dtoa_r+0x264>
 8007474:	2300      	movs	r3, #0
 8007476:	9309      	str	r3, [sp, #36]	; 0x24
 8007478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747a:	445b      	add	r3, fp
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	3301      	adds	r3, #1
 8007480:	2b01      	cmp	r3, #1
 8007482:	9304      	str	r3, [sp, #16]
 8007484:	bfb8      	it	lt
 8007486:	2301      	movlt	r3, #1
 8007488:	69e0      	ldr	r0, [r4, #28]
 800748a:	2100      	movs	r1, #0
 800748c:	2204      	movs	r2, #4
 800748e:	f102 0614 	add.w	r6, r2, #20
 8007492:	429e      	cmp	r6, r3
 8007494:	d93d      	bls.n	8007512 <_dtoa_r+0x31a>
 8007496:	6041      	str	r1, [r0, #4]
 8007498:	4620      	mov	r0, r4
 800749a:	f000 fd9f 	bl	8007fdc <_Balloc>
 800749e:	9000      	str	r0, [sp, #0]
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d139      	bne.n	8007518 <_dtoa_r+0x320>
 80074a4:	4b16      	ldr	r3, [pc, #88]	; (8007500 <_dtoa_r+0x308>)
 80074a6:	4602      	mov	r2, r0
 80074a8:	f240 11af 	movw	r1, #431	; 0x1af
 80074ac:	e6bd      	b.n	800722a <_dtoa_r+0x32>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e7e1      	b.n	8007476 <_dtoa_r+0x27e>
 80074b2:	2501      	movs	r5, #1
 80074b4:	2300      	movs	r3, #0
 80074b6:	9307      	str	r3, [sp, #28]
 80074b8:	9509      	str	r5, [sp, #36]	; 0x24
 80074ba:	f04f 33ff 	mov.w	r3, #4294967295
 80074be:	9301      	str	r3, [sp, #4]
 80074c0:	9304      	str	r3, [sp, #16]
 80074c2:	2200      	movs	r2, #0
 80074c4:	2312      	movs	r3, #18
 80074c6:	e7d1      	b.n	800746c <_dtoa_r+0x274>
 80074c8:	636f4361 	.word	0x636f4361
 80074cc:	3fd287a7 	.word	0x3fd287a7
 80074d0:	8b60c8b3 	.word	0x8b60c8b3
 80074d4:	3fc68a28 	.word	0x3fc68a28
 80074d8:	509f79fb 	.word	0x509f79fb
 80074dc:	3fd34413 	.word	0x3fd34413
 80074e0:	08009e8b 	.word	0x08009e8b
 80074e4:	08009ea2 	.word	0x08009ea2
 80074e8:	7ff00000 	.word	0x7ff00000
 80074ec:	08009e87 	.word	0x08009e87
 80074f0:	08009e7e 	.word	0x08009e7e
 80074f4:	0800a08c 	.word	0x0800a08c
 80074f8:	3ff80000 	.word	0x3ff80000
 80074fc:	08009f90 	.word	0x08009f90
 8007500:	08009efa 	.word	0x08009efa
 8007504:	2301      	movs	r3, #1
 8007506:	9309      	str	r3, [sp, #36]	; 0x24
 8007508:	e7d7      	b.n	80074ba <_dtoa_r+0x2c2>
 800750a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800750c:	9301      	str	r3, [sp, #4]
 800750e:	9304      	str	r3, [sp, #16]
 8007510:	e7ba      	b.n	8007488 <_dtoa_r+0x290>
 8007512:	3101      	adds	r1, #1
 8007514:	0052      	lsls	r2, r2, #1
 8007516:	e7ba      	b.n	800748e <_dtoa_r+0x296>
 8007518:	69e3      	ldr	r3, [r4, #28]
 800751a:	9a00      	ldr	r2, [sp, #0]
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	2b0e      	cmp	r3, #14
 8007522:	f200 80a8 	bhi.w	8007676 <_dtoa_r+0x47e>
 8007526:	2d00      	cmp	r5, #0
 8007528:	f000 80a5 	beq.w	8007676 <_dtoa_r+0x47e>
 800752c:	f1bb 0f00 	cmp.w	fp, #0
 8007530:	dd38      	ble.n	80075a4 <_dtoa_r+0x3ac>
 8007532:	4bc0      	ldr	r3, [pc, #768]	; (8007834 <_dtoa_r+0x63c>)
 8007534:	f00b 020f 	and.w	r2, fp, #15
 8007538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800753c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007540:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007544:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007548:	d019      	beq.n	800757e <_dtoa_r+0x386>
 800754a:	4bbb      	ldr	r3, [pc, #748]	; (8007838 <_dtoa_r+0x640>)
 800754c:	ec51 0b18 	vmov	r0, r1, d8
 8007550:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007554:	f7f9 f9aa 	bl	80008ac <__aeabi_ddiv>
 8007558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800755c:	f008 080f 	and.w	r8, r8, #15
 8007560:	2503      	movs	r5, #3
 8007562:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007838 <_dtoa_r+0x640>
 8007566:	f1b8 0f00 	cmp.w	r8, #0
 800756a:	d10a      	bne.n	8007582 <_dtoa_r+0x38a>
 800756c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007570:	4632      	mov	r2, r6
 8007572:	463b      	mov	r3, r7
 8007574:	f7f9 f99a 	bl	80008ac <__aeabi_ddiv>
 8007578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800757c:	e02b      	b.n	80075d6 <_dtoa_r+0x3de>
 800757e:	2502      	movs	r5, #2
 8007580:	e7ef      	b.n	8007562 <_dtoa_r+0x36a>
 8007582:	f018 0f01 	tst.w	r8, #1
 8007586:	d008      	beq.n	800759a <_dtoa_r+0x3a2>
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007590:	f7f9 f862 	bl	8000658 <__aeabi_dmul>
 8007594:	3501      	adds	r5, #1
 8007596:	4606      	mov	r6, r0
 8007598:	460f      	mov	r7, r1
 800759a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800759e:	f109 0908 	add.w	r9, r9, #8
 80075a2:	e7e0      	b.n	8007566 <_dtoa_r+0x36e>
 80075a4:	f000 809f 	beq.w	80076e6 <_dtoa_r+0x4ee>
 80075a8:	f1cb 0600 	rsb	r6, fp, #0
 80075ac:	4ba1      	ldr	r3, [pc, #644]	; (8007834 <_dtoa_r+0x63c>)
 80075ae:	4fa2      	ldr	r7, [pc, #648]	; (8007838 <_dtoa_r+0x640>)
 80075b0:	f006 020f 	and.w	r2, r6, #15
 80075b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	ec51 0b18 	vmov	r0, r1, d8
 80075c0:	f7f9 f84a 	bl	8000658 <__aeabi_dmul>
 80075c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c8:	1136      	asrs	r6, r6, #4
 80075ca:	2300      	movs	r3, #0
 80075cc:	2502      	movs	r5, #2
 80075ce:	2e00      	cmp	r6, #0
 80075d0:	d17e      	bne.n	80076d0 <_dtoa_r+0x4d8>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1d0      	bne.n	8007578 <_dtoa_r+0x380>
 80075d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8084 	beq.w	80076ea <_dtoa_r+0x4f2>
 80075e2:	4b96      	ldr	r3, [pc, #600]	; (800783c <_dtoa_r+0x644>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	4640      	mov	r0, r8
 80075e8:	4649      	mov	r1, r9
 80075ea:	f7f9 faa7 	bl	8000b3c <__aeabi_dcmplt>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d07b      	beq.n	80076ea <_dtoa_r+0x4f2>
 80075f2:	9b04      	ldr	r3, [sp, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d078      	beq.n	80076ea <_dtoa_r+0x4f2>
 80075f8:	9b01      	ldr	r3, [sp, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	dd39      	ble.n	8007672 <_dtoa_r+0x47a>
 80075fe:	4b90      	ldr	r3, [pc, #576]	; (8007840 <_dtoa_r+0x648>)
 8007600:	2200      	movs	r2, #0
 8007602:	4640      	mov	r0, r8
 8007604:	4649      	mov	r1, r9
 8007606:	f7f9 f827 	bl	8000658 <__aeabi_dmul>
 800760a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800760e:	9e01      	ldr	r6, [sp, #4]
 8007610:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007614:	3501      	adds	r5, #1
 8007616:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800761a:	4628      	mov	r0, r5
 800761c:	f7f8 ffb2 	bl	8000584 <__aeabi_i2d>
 8007620:	4642      	mov	r2, r8
 8007622:	464b      	mov	r3, r9
 8007624:	f7f9 f818 	bl	8000658 <__aeabi_dmul>
 8007628:	4b86      	ldr	r3, [pc, #536]	; (8007844 <_dtoa_r+0x64c>)
 800762a:	2200      	movs	r2, #0
 800762c:	f7f8 fe5e 	bl	80002ec <__adddf3>
 8007630:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007638:	9303      	str	r3, [sp, #12]
 800763a:	2e00      	cmp	r6, #0
 800763c:	d158      	bne.n	80076f0 <_dtoa_r+0x4f8>
 800763e:	4b82      	ldr	r3, [pc, #520]	; (8007848 <_dtoa_r+0x650>)
 8007640:	2200      	movs	r2, #0
 8007642:	4640      	mov	r0, r8
 8007644:	4649      	mov	r1, r9
 8007646:	f7f8 fe4f 	bl	80002e8 <__aeabi_dsub>
 800764a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800764e:	4680      	mov	r8, r0
 8007650:	4689      	mov	r9, r1
 8007652:	f7f9 fa91 	bl	8000b78 <__aeabi_dcmpgt>
 8007656:	2800      	cmp	r0, #0
 8007658:	f040 8296 	bne.w	8007b88 <_dtoa_r+0x990>
 800765c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007660:	4640      	mov	r0, r8
 8007662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007666:	4649      	mov	r1, r9
 8007668:	f7f9 fa68 	bl	8000b3c <__aeabi_dcmplt>
 800766c:	2800      	cmp	r0, #0
 800766e:	f040 8289 	bne.w	8007b84 <_dtoa_r+0x98c>
 8007672:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007676:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007678:	2b00      	cmp	r3, #0
 800767a:	f2c0 814e 	blt.w	800791a <_dtoa_r+0x722>
 800767e:	f1bb 0f0e 	cmp.w	fp, #14
 8007682:	f300 814a 	bgt.w	800791a <_dtoa_r+0x722>
 8007686:	4b6b      	ldr	r3, [pc, #428]	; (8007834 <_dtoa_r+0x63c>)
 8007688:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800768c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007692:	2b00      	cmp	r3, #0
 8007694:	f280 80dc 	bge.w	8007850 <_dtoa_r+0x658>
 8007698:	9b04      	ldr	r3, [sp, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f300 80d8 	bgt.w	8007850 <_dtoa_r+0x658>
 80076a0:	f040 826f 	bne.w	8007b82 <_dtoa_r+0x98a>
 80076a4:	4b68      	ldr	r3, [pc, #416]	; (8007848 <_dtoa_r+0x650>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	4640      	mov	r0, r8
 80076aa:	4649      	mov	r1, r9
 80076ac:	f7f8 ffd4 	bl	8000658 <__aeabi_dmul>
 80076b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076b4:	f7f9 fa56 	bl	8000b64 <__aeabi_dcmpge>
 80076b8:	9e04      	ldr	r6, [sp, #16]
 80076ba:	4637      	mov	r7, r6
 80076bc:	2800      	cmp	r0, #0
 80076be:	f040 8245 	bne.w	8007b4c <_dtoa_r+0x954>
 80076c2:	9d00      	ldr	r5, [sp, #0]
 80076c4:	2331      	movs	r3, #49	; 0x31
 80076c6:	f805 3b01 	strb.w	r3, [r5], #1
 80076ca:	f10b 0b01 	add.w	fp, fp, #1
 80076ce:	e241      	b.n	8007b54 <_dtoa_r+0x95c>
 80076d0:	07f2      	lsls	r2, r6, #31
 80076d2:	d505      	bpl.n	80076e0 <_dtoa_r+0x4e8>
 80076d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d8:	f7f8 ffbe 	bl	8000658 <__aeabi_dmul>
 80076dc:	3501      	adds	r5, #1
 80076de:	2301      	movs	r3, #1
 80076e0:	1076      	asrs	r6, r6, #1
 80076e2:	3708      	adds	r7, #8
 80076e4:	e773      	b.n	80075ce <_dtoa_r+0x3d6>
 80076e6:	2502      	movs	r5, #2
 80076e8:	e775      	b.n	80075d6 <_dtoa_r+0x3de>
 80076ea:	9e04      	ldr	r6, [sp, #16]
 80076ec:	465f      	mov	r7, fp
 80076ee:	e792      	b.n	8007616 <_dtoa_r+0x41e>
 80076f0:	9900      	ldr	r1, [sp, #0]
 80076f2:	4b50      	ldr	r3, [pc, #320]	; (8007834 <_dtoa_r+0x63c>)
 80076f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076f8:	4431      	add	r1, r6
 80076fa:	9102      	str	r1, [sp, #8]
 80076fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076fe:	eeb0 9a47 	vmov.f32	s18, s14
 8007702:	eef0 9a67 	vmov.f32	s19, s15
 8007706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800770a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800770e:	2900      	cmp	r1, #0
 8007710:	d044      	beq.n	800779c <_dtoa_r+0x5a4>
 8007712:	494e      	ldr	r1, [pc, #312]	; (800784c <_dtoa_r+0x654>)
 8007714:	2000      	movs	r0, #0
 8007716:	f7f9 f8c9 	bl	80008ac <__aeabi_ddiv>
 800771a:	ec53 2b19 	vmov	r2, r3, d9
 800771e:	f7f8 fde3 	bl	80002e8 <__aeabi_dsub>
 8007722:	9d00      	ldr	r5, [sp, #0]
 8007724:	ec41 0b19 	vmov	d9, r0, r1
 8007728:	4649      	mov	r1, r9
 800772a:	4640      	mov	r0, r8
 800772c:	f7f9 fa44 	bl	8000bb8 <__aeabi_d2iz>
 8007730:	4606      	mov	r6, r0
 8007732:	f7f8 ff27 	bl	8000584 <__aeabi_i2d>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	4640      	mov	r0, r8
 800773c:	4649      	mov	r1, r9
 800773e:	f7f8 fdd3 	bl	80002e8 <__aeabi_dsub>
 8007742:	3630      	adds	r6, #48	; 0x30
 8007744:	f805 6b01 	strb.w	r6, [r5], #1
 8007748:	ec53 2b19 	vmov	r2, r3, d9
 800774c:	4680      	mov	r8, r0
 800774e:	4689      	mov	r9, r1
 8007750:	f7f9 f9f4 	bl	8000b3c <__aeabi_dcmplt>
 8007754:	2800      	cmp	r0, #0
 8007756:	d164      	bne.n	8007822 <_dtoa_r+0x62a>
 8007758:	4642      	mov	r2, r8
 800775a:	464b      	mov	r3, r9
 800775c:	4937      	ldr	r1, [pc, #220]	; (800783c <_dtoa_r+0x644>)
 800775e:	2000      	movs	r0, #0
 8007760:	f7f8 fdc2 	bl	80002e8 <__aeabi_dsub>
 8007764:	ec53 2b19 	vmov	r2, r3, d9
 8007768:	f7f9 f9e8 	bl	8000b3c <__aeabi_dcmplt>
 800776c:	2800      	cmp	r0, #0
 800776e:	f040 80b6 	bne.w	80078de <_dtoa_r+0x6e6>
 8007772:	9b02      	ldr	r3, [sp, #8]
 8007774:	429d      	cmp	r5, r3
 8007776:	f43f af7c 	beq.w	8007672 <_dtoa_r+0x47a>
 800777a:	4b31      	ldr	r3, [pc, #196]	; (8007840 <_dtoa_r+0x648>)
 800777c:	ec51 0b19 	vmov	r0, r1, d9
 8007780:	2200      	movs	r2, #0
 8007782:	f7f8 ff69 	bl	8000658 <__aeabi_dmul>
 8007786:	4b2e      	ldr	r3, [pc, #184]	; (8007840 <_dtoa_r+0x648>)
 8007788:	ec41 0b19 	vmov	d9, r0, r1
 800778c:	2200      	movs	r2, #0
 800778e:	4640      	mov	r0, r8
 8007790:	4649      	mov	r1, r9
 8007792:	f7f8 ff61 	bl	8000658 <__aeabi_dmul>
 8007796:	4680      	mov	r8, r0
 8007798:	4689      	mov	r9, r1
 800779a:	e7c5      	b.n	8007728 <_dtoa_r+0x530>
 800779c:	ec51 0b17 	vmov	r0, r1, d7
 80077a0:	f7f8 ff5a 	bl	8000658 <__aeabi_dmul>
 80077a4:	9b02      	ldr	r3, [sp, #8]
 80077a6:	9d00      	ldr	r5, [sp, #0]
 80077a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80077aa:	ec41 0b19 	vmov	d9, r0, r1
 80077ae:	4649      	mov	r1, r9
 80077b0:	4640      	mov	r0, r8
 80077b2:	f7f9 fa01 	bl	8000bb8 <__aeabi_d2iz>
 80077b6:	4606      	mov	r6, r0
 80077b8:	f7f8 fee4 	bl	8000584 <__aeabi_i2d>
 80077bc:	3630      	adds	r6, #48	; 0x30
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4640      	mov	r0, r8
 80077c4:	4649      	mov	r1, r9
 80077c6:	f7f8 fd8f 	bl	80002e8 <__aeabi_dsub>
 80077ca:	f805 6b01 	strb.w	r6, [r5], #1
 80077ce:	9b02      	ldr	r3, [sp, #8]
 80077d0:	429d      	cmp	r5, r3
 80077d2:	4680      	mov	r8, r0
 80077d4:	4689      	mov	r9, r1
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	d124      	bne.n	8007826 <_dtoa_r+0x62e>
 80077dc:	4b1b      	ldr	r3, [pc, #108]	; (800784c <_dtoa_r+0x654>)
 80077de:	ec51 0b19 	vmov	r0, r1, d9
 80077e2:	f7f8 fd83 	bl	80002ec <__adddf3>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4640      	mov	r0, r8
 80077ec:	4649      	mov	r1, r9
 80077ee:	f7f9 f9c3 	bl	8000b78 <__aeabi_dcmpgt>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d173      	bne.n	80078de <_dtoa_r+0x6e6>
 80077f6:	ec53 2b19 	vmov	r2, r3, d9
 80077fa:	4914      	ldr	r1, [pc, #80]	; (800784c <_dtoa_r+0x654>)
 80077fc:	2000      	movs	r0, #0
 80077fe:	f7f8 fd73 	bl	80002e8 <__aeabi_dsub>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	4640      	mov	r0, r8
 8007808:	4649      	mov	r1, r9
 800780a:	f7f9 f997 	bl	8000b3c <__aeabi_dcmplt>
 800780e:	2800      	cmp	r0, #0
 8007810:	f43f af2f 	beq.w	8007672 <_dtoa_r+0x47a>
 8007814:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007816:	1e6b      	subs	r3, r5, #1
 8007818:	930f      	str	r3, [sp, #60]	; 0x3c
 800781a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800781e:	2b30      	cmp	r3, #48	; 0x30
 8007820:	d0f8      	beq.n	8007814 <_dtoa_r+0x61c>
 8007822:	46bb      	mov	fp, r7
 8007824:	e04a      	b.n	80078bc <_dtoa_r+0x6c4>
 8007826:	4b06      	ldr	r3, [pc, #24]	; (8007840 <_dtoa_r+0x648>)
 8007828:	f7f8 ff16 	bl	8000658 <__aeabi_dmul>
 800782c:	4680      	mov	r8, r0
 800782e:	4689      	mov	r9, r1
 8007830:	e7bd      	b.n	80077ae <_dtoa_r+0x5b6>
 8007832:	bf00      	nop
 8007834:	08009f90 	.word	0x08009f90
 8007838:	08009f68 	.word	0x08009f68
 800783c:	3ff00000 	.word	0x3ff00000
 8007840:	40240000 	.word	0x40240000
 8007844:	401c0000 	.word	0x401c0000
 8007848:	40140000 	.word	0x40140000
 800784c:	3fe00000 	.word	0x3fe00000
 8007850:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007854:	9d00      	ldr	r5, [sp, #0]
 8007856:	4642      	mov	r2, r8
 8007858:	464b      	mov	r3, r9
 800785a:	4630      	mov	r0, r6
 800785c:	4639      	mov	r1, r7
 800785e:	f7f9 f825 	bl	80008ac <__aeabi_ddiv>
 8007862:	f7f9 f9a9 	bl	8000bb8 <__aeabi_d2iz>
 8007866:	9001      	str	r0, [sp, #4]
 8007868:	f7f8 fe8c 	bl	8000584 <__aeabi_i2d>
 800786c:	4642      	mov	r2, r8
 800786e:	464b      	mov	r3, r9
 8007870:	f7f8 fef2 	bl	8000658 <__aeabi_dmul>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f7f8 fd34 	bl	80002e8 <__aeabi_dsub>
 8007880:	9e01      	ldr	r6, [sp, #4]
 8007882:	9f04      	ldr	r7, [sp, #16]
 8007884:	3630      	adds	r6, #48	; 0x30
 8007886:	f805 6b01 	strb.w	r6, [r5], #1
 800788a:	9e00      	ldr	r6, [sp, #0]
 800788c:	1bae      	subs	r6, r5, r6
 800788e:	42b7      	cmp	r7, r6
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	d134      	bne.n	8007900 <_dtoa_r+0x708>
 8007896:	f7f8 fd29 	bl	80002ec <__adddf3>
 800789a:	4642      	mov	r2, r8
 800789c:	464b      	mov	r3, r9
 800789e:	4606      	mov	r6, r0
 80078a0:	460f      	mov	r7, r1
 80078a2:	f7f9 f969 	bl	8000b78 <__aeabi_dcmpgt>
 80078a6:	b9c8      	cbnz	r0, 80078dc <_dtoa_r+0x6e4>
 80078a8:	4642      	mov	r2, r8
 80078aa:	464b      	mov	r3, r9
 80078ac:	4630      	mov	r0, r6
 80078ae:	4639      	mov	r1, r7
 80078b0:	f7f9 f93a 	bl	8000b28 <__aeabi_dcmpeq>
 80078b4:	b110      	cbz	r0, 80078bc <_dtoa_r+0x6c4>
 80078b6:	9b01      	ldr	r3, [sp, #4]
 80078b8:	07db      	lsls	r3, r3, #31
 80078ba:	d40f      	bmi.n	80078dc <_dtoa_r+0x6e4>
 80078bc:	4651      	mov	r1, sl
 80078be:	4620      	mov	r0, r4
 80078c0:	f000 fbcc 	bl	800805c <_Bfree>
 80078c4:	2300      	movs	r3, #0
 80078c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078c8:	702b      	strb	r3, [r5, #0]
 80078ca:	f10b 0301 	add.w	r3, fp, #1
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f43f ace2 	beq.w	800729c <_dtoa_r+0xa4>
 80078d8:	601d      	str	r5, [r3, #0]
 80078da:	e4df      	b.n	800729c <_dtoa_r+0xa4>
 80078dc:	465f      	mov	r7, fp
 80078de:	462b      	mov	r3, r5
 80078e0:	461d      	mov	r5, r3
 80078e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078e6:	2a39      	cmp	r2, #57	; 0x39
 80078e8:	d106      	bne.n	80078f8 <_dtoa_r+0x700>
 80078ea:	9a00      	ldr	r2, [sp, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d1f7      	bne.n	80078e0 <_dtoa_r+0x6e8>
 80078f0:	9900      	ldr	r1, [sp, #0]
 80078f2:	2230      	movs	r2, #48	; 0x30
 80078f4:	3701      	adds	r7, #1
 80078f6:	700a      	strb	r2, [r1, #0]
 80078f8:	781a      	ldrb	r2, [r3, #0]
 80078fa:	3201      	adds	r2, #1
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	e790      	b.n	8007822 <_dtoa_r+0x62a>
 8007900:	4ba3      	ldr	r3, [pc, #652]	; (8007b90 <_dtoa_r+0x998>)
 8007902:	2200      	movs	r2, #0
 8007904:	f7f8 fea8 	bl	8000658 <__aeabi_dmul>
 8007908:	2200      	movs	r2, #0
 800790a:	2300      	movs	r3, #0
 800790c:	4606      	mov	r6, r0
 800790e:	460f      	mov	r7, r1
 8007910:	f7f9 f90a 	bl	8000b28 <__aeabi_dcmpeq>
 8007914:	2800      	cmp	r0, #0
 8007916:	d09e      	beq.n	8007856 <_dtoa_r+0x65e>
 8007918:	e7d0      	b.n	80078bc <_dtoa_r+0x6c4>
 800791a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800791c:	2a00      	cmp	r2, #0
 800791e:	f000 80ca 	beq.w	8007ab6 <_dtoa_r+0x8be>
 8007922:	9a07      	ldr	r2, [sp, #28]
 8007924:	2a01      	cmp	r2, #1
 8007926:	f300 80ad 	bgt.w	8007a84 <_dtoa_r+0x88c>
 800792a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800792c:	2a00      	cmp	r2, #0
 800792e:	f000 80a5 	beq.w	8007a7c <_dtoa_r+0x884>
 8007932:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007936:	9e08      	ldr	r6, [sp, #32]
 8007938:	9d05      	ldr	r5, [sp, #20]
 800793a:	9a05      	ldr	r2, [sp, #20]
 800793c:	441a      	add	r2, r3
 800793e:	9205      	str	r2, [sp, #20]
 8007940:	9a06      	ldr	r2, [sp, #24]
 8007942:	2101      	movs	r1, #1
 8007944:	441a      	add	r2, r3
 8007946:	4620      	mov	r0, r4
 8007948:	9206      	str	r2, [sp, #24]
 800794a:	f000 fc3d 	bl	80081c8 <__i2b>
 800794e:	4607      	mov	r7, r0
 8007950:	b165      	cbz	r5, 800796c <_dtoa_r+0x774>
 8007952:	9b06      	ldr	r3, [sp, #24]
 8007954:	2b00      	cmp	r3, #0
 8007956:	dd09      	ble.n	800796c <_dtoa_r+0x774>
 8007958:	42ab      	cmp	r3, r5
 800795a:	9a05      	ldr	r2, [sp, #20]
 800795c:	bfa8      	it	ge
 800795e:	462b      	movge	r3, r5
 8007960:	1ad2      	subs	r2, r2, r3
 8007962:	9205      	str	r2, [sp, #20]
 8007964:	9a06      	ldr	r2, [sp, #24]
 8007966:	1aed      	subs	r5, r5, r3
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	9306      	str	r3, [sp, #24]
 800796c:	9b08      	ldr	r3, [sp, #32]
 800796e:	b1f3      	cbz	r3, 80079ae <_dtoa_r+0x7b6>
 8007970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 80a3 	beq.w	8007abe <_dtoa_r+0x8c6>
 8007978:	2e00      	cmp	r6, #0
 800797a:	dd10      	ble.n	800799e <_dtoa_r+0x7a6>
 800797c:	4639      	mov	r1, r7
 800797e:	4632      	mov	r2, r6
 8007980:	4620      	mov	r0, r4
 8007982:	f000 fce1 	bl	8008348 <__pow5mult>
 8007986:	4652      	mov	r2, sl
 8007988:	4601      	mov	r1, r0
 800798a:	4607      	mov	r7, r0
 800798c:	4620      	mov	r0, r4
 800798e:	f000 fc31 	bl	80081f4 <__multiply>
 8007992:	4651      	mov	r1, sl
 8007994:	4680      	mov	r8, r0
 8007996:	4620      	mov	r0, r4
 8007998:	f000 fb60 	bl	800805c <_Bfree>
 800799c:	46c2      	mov	sl, r8
 800799e:	9b08      	ldr	r3, [sp, #32]
 80079a0:	1b9a      	subs	r2, r3, r6
 80079a2:	d004      	beq.n	80079ae <_dtoa_r+0x7b6>
 80079a4:	4651      	mov	r1, sl
 80079a6:	4620      	mov	r0, r4
 80079a8:	f000 fcce 	bl	8008348 <__pow5mult>
 80079ac:	4682      	mov	sl, r0
 80079ae:	2101      	movs	r1, #1
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 fc09 	bl	80081c8 <__i2b>
 80079b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	4606      	mov	r6, r0
 80079bc:	f340 8081 	ble.w	8007ac2 <_dtoa_r+0x8ca>
 80079c0:	461a      	mov	r2, r3
 80079c2:	4601      	mov	r1, r0
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fcbf 	bl	8008348 <__pow5mult>
 80079ca:	9b07      	ldr	r3, [sp, #28]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	4606      	mov	r6, r0
 80079d0:	dd7a      	ble.n	8007ac8 <_dtoa_r+0x8d0>
 80079d2:	f04f 0800 	mov.w	r8, #0
 80079d6:	6933      	ldr	r3, [r6, #16]
 80079d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079dc:	6918      	ldr	r0, [r3, #16]
 80079de:	f000 fba5 	bl	800812c <__hi0bits>
 80079e2:	f1c0 0020 	rsb	r0, r0, #32
 80079e6:	9b06      	ldr	r3, [sp, #24]
 80079e8:	4418      	add	r0, r3
 80079ea:	f010 001f 	ands.w	r0, r0, #31
 80079ee:	f000 8094 	beq.w	8007b1a <_dtoa_r+0x922>
 80079f2:	f1c0 0320 	rsb	r3, r0, #32
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	f340 8085 	ble.w	8007b06 <_dtoa_r+0x90e>
 80079fc:	9b05      	ldr	r3, [sp, #20]
 80079fe:	f1c0 001c 	rsb	r0, r0, #28
 8007a02:	4403      	add	r3, r0
 8007a04:	9305      	str	r3, [sp, #20]
 8007a06:	9b06      	ldr	r3, [sp, #24]
 8007a08:	4403      	add	r3, r0
 8007a0a:	4405      	add	r5, r0
 8007a0c:	9306      	str	r3, [sp, #24]
 8007a0e:	9b05      	ldr	r3, [sp, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	dd05      	ble.n	8007a20 <_dtoa_r+0x828>
 8007a14:	4651      	mov	r1, sl
 8007a16:	461a      	mov	r2, r3
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 fcef 	bl	80083fc <__lshift>
 8007a1e:	4682      	mov	sl, r0
 8007a20:	9b06      	ldr	r3, [sp, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	dd05      	ble.n	8007a32 <_dtoa_r+0x83a>
 8007a26:	4631      	mov	r1, r6
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f000 fce6 	bl	80083fc <__lshift>
 8007a30:	4606      	mov	r6, r0
 8007a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d072      	beq.n	8007b1e <_dtoa_r+0x926>
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	f000 fd4a 	bl	80084d4 <__mcmp>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	da6c      	bge.n	8007b1e <_dtoa_r+0x926>
 8007a44:	2300      	movs	r3, #0
 8007a46:	4651      	mov	r1, sl
 8007a48:	220a      	movs	r2, #10
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 fb28 	bl	80080a0 <__multadd>
 8007a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a56:	4682      	mov	sl, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 81b0 	beq.w	8007dbe <_dtoa_r+0xbc6>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	4639      	mov	r1, r7
 8007a62:	220a      	movs	r2, #10
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fb1b 	bl	80080a0 <__multadd>
 8007a6a:	9b01      	ldr	r3, [sp, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	4607      	mov	r7, r0
 8007a70:	f300 8096 	bgt.w	8007ba0 <_dtoa_r+0x9a8>
 8007a74:	9b07      	ldr	r3, [sp, #28]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	dc59      	bgt.n	8007b2e <_dtoa_r+0x936>
 8007a7a:	e091      	b.n	8007ba0 <_dtoa_r+0x9a8>
 8007a7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a82:	e758      	b.n	8007936 <_dtoa_r+0x73e>
 8007a84:	9b04      	ldr	r3, [sp, #16]
 8007a86:	1e5e      	subs	r6, r3, #1
 8007a88:	9b08      	ldr	r3, [sp, #32]
 8007a8a:	42b3      	cmp	r3, r6
 8007a8c:	bfbf      	itttt	lt
 8007a8e:	9b08      	ldrlt	r3, [sp, #32]
 8007a90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007a92:	9608      	strlt	r6, [sp, #32]
 8007a94:	1af3      	sublt	r3, r6, r3
 8007a96:	bfb4      	ite	lt
 8007a98:	18d2      	addlt	r2, r2, r3
 8007a9a:	1b9e      	subge	r6, r3, r6
 8007a9c:	9b04      	ldr	r3, [sp, #16]
 8007a9e:	bfbc      	itt	lt
 8007aa0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007aa2:	2600      	movlt	r6, #0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	bfb7      	itett	lt
 8007aa8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007aac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007ab0:	1a9d      	sublt	r5, r3, r2
 8007ab2:	2300      	movlt	r3, #0
 8007ab4:	e741      	b.n	800793a <_dtoa_r+0x742>
 8007ab6:	9e08      	ldr	r6, [sp, #32]
 8007ab8:	9d05      	ldr	r5, [sp, #20]
 8007aba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007abc:	e748      	b.n	8007950 <_dtoa_r+0x758>
 8007abe:	9a08      	ldr	r2, [sp, #32]
 8007ac0:	e770      	b.n	80079a4 <_dtoa_r+0x7ac>
 8007ac2:	9b07      	ldr	r3, [sp, #28]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	dc19      	bgt.n	8007afc <_dtoa_r+0x904>
 8007ac8:	9b02      	ldr	r3, [sp, #8]
 8007aca:	b9bb      	cbnz	r3, 8007afc <_dtoa_r+0x904>
 8007acc:	9b03      	ldr	r3, [sp, #12]
 8007ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ad2:	b99b      	cbnz	r3, 8007afc <_dtoa_r+0x904>
 8007ad4:	9b03      	ldr	r3, [sp, #12]
 8007ad6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ada:	0d1b      	lsrs	r3, r3, #20
 8007adc:	051b      	lsls	r3, r3, #20
 8007ade:	b183      	cbz	r3, 8007b02 <_dtoa_r+0x90a>
 8007ae0:	9b05      	ldr	r3, [sp, #20]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	9b06      	ldr	r3, [sp, #24]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	9306      	str	r3, [sp, #24]
 8007aec:	f04f 0801 	mov.w	r8, #1
 8007af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f47f af6f 	bne.w	80079d6 <_dtoa_r+0x7de>
 8007af8:	2001      	movs	r0, #1
 8007afa:	e774      	b.n	80079e6 <_dtoa_r+0x7ee>
 8007afc:	f04f 0800 	mov.w	r8, #0
 8007b00:	e7f6      	b.n	8007af0 <_dtoa_r+0x8f8>
 8007b02:	4698      	mov	r8, r3
 8007b04:	e7f4      	b.n	8007af0 <_dtoa_r+0x8f8>
 8007b06:	d082      	beq.n	8007a0e <_dtoa_r+0x816>
 8007b08:	9a05      	ldr	r2, [sp, #20]
 8007b0a:	331c      	adds	r3, #28
 8007b0c:	441a      	add	r2, r3
 8007b0e:	9205      	str	r2, [sp, #20]
 8007b10:	9a06      	ldr	r2, [sp, #24]
 8007b12:	441a      	add	r2, r3
 8007b14:	441d      	add	r5, r3
 8007b16:	9206      	str	r2, [sp, #24]
 8007b18:	e779      	b.n	8007a0e <_dtoa_r+0x816>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	e7f4      	b.n	8007b08 <_dtoa_r+0x910>
 8007b1e:	9b04      	ldr	r3, [sp, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	dc37      	bgt.n	8007b94 <_dtoa_r+0x99c>
 8007b24:	9b07      	ldr	r3, [sp, #28]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	dd34      	ble.n	8007b94 <_dtoa_r+0x99c>
 8007b2a:	9b04      	ldr	r3, [sp, #16]
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	9b01      	ldr	r3, [sp, #4]
 8007b30:	b963      	cbnz	r3, 8007b4c <_dtoa_r+0x954>
 8007b32:	4631      	mov	r1, r6
 8007b34:	2205      	movs	r2, #5
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 fab2 	bl	80080a0 <__multadd>
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	4606      	mov	r6, r0
 8007b40:	4650      	mov	r0, sl
 8007b42:	f000 fcc7 	bl	80084d4 <__mcmp>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f73f adbb 	bgt.w	80076c2 <_dtoa_r+0x4ca>
 8007b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4e:	9d00      	ldr	r5, [sp, #0]
 8007b50:	ea6f 0b03 	mvn.w	fp, r3
 8007b54:	f04f 0800 	mov.w	r8, #0
 8007b58:	4631      	mov	r1, r6
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 fa7e 	bl	800805c <_Bfree>
 8007b60:	2f00      	cmp	r7, #0
 8007b62:	f43f aeab 	beq.w	80078bc <_dtoa_r+0x6c4>
 8007b66:	f1b8 0f00 	cmp.w	r8, #0
 8007b6a:	d005      	beq.n	8007b78 <_dtoa_r+0x980>
 8007b6c:	45b8      	cmp	r8, r7
 8007b6e:	d003      	beq.n	8007b78 <_dtoa_r+0x980>
 8007b70:	4641      	mov	r1, r8
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fa72 	bl	800805c <_Bfree>
 8007b78:	4639      	mov	r1, r7
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 fa6e 	bl	800805c <_Bfree>
 8007b80:	e69c      	b.n	80078bc <_dtoa_r+0x6c4>
 8007b82:	2600      	movs	r6, #0
 8007b84:	4637      	mov	r7, r6
 8007b86:	e7e1      	b.n	8007b4c <_dtoa_r+0x954>
 8007b88:	46bb      	mov	fp, r7
 8007b8a:	4637      	mov	r7, r6
 8007b8c:	e599      	b.n	80076c2 <_dtoa_r+0x4ca>
 8007b8e:	bf00      	nop
 8007b90:	40240000 	.word	0x40240000
 8007b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 80c8 	beq.w	8007d2c <_dtoa_r+0xb34>
 8007b9c:	9b04      	ldr	r3, [sp, #16]
 8007b9e:	9301      	str	r3, [sp, #4]
 8007ba0:	2d00      	cmp	r5, #0
 8007ba2:	dd05      	ble.n	8007bb0 <_dtoa_r+0x9b8>
 8007ba4:	4639      	mov	r1, r7
 8007ba6:	462a      	mov	r2, r5
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f000 fc27 	bl	80083fc <__lshift>
 8007bae:	4607      	mov	r7, r0
 8007bb0:	f1b8 0f00 	cmp.w	r8, #0
 8007bb4:	d05b      	beq.n	8007c6e <_dtoa_r+0xa76>
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fa0f 	bl	8007fdc <_Balloc>
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	b928      	cbnz	r0, 8007bce <_dtoa_r+0x9d6>
 8007bc2:	4b83      	ldr	r3, [pc, #524]	; (8007dd0 <_dtoa_r+0xbd8>)
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007bca:	f7ff bb2e 	b.w	800722a <_dtoa_r+0x32>
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	3202      	adds	r2, #2
 8007bd2:	0092      	lsls	r2, r2, #2
 8007bd4:	f107 010c 	add.w	r1, r7, #12
 8007bd8:	300c      	adds	r0, #12
 8007bda:	f001 fd07 	bl	80095ec <memcpy>
 8007bde:	2201      	movs	r2, #1
 8007be0:	4629      	mov	r1, r5
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 fc0a 	bl	80083fc <__lshift>
 8007be8:	9b00      	ldr	r3, [sp, #0]
 8007bea:	3301      	adds	r3, #1
 8007bec:	9304      	str	r3, [sp, #16]
 8007bee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	9308      	str	r3, [sp, #32]
 8007bf6:	9b02      	ldr	r3, [sp, #8]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	46b8      	mov	r8, r7
 8007bfe:	9306      	str	r3, [sp, #24]
 8007c00:	4607      	mov	r7, r0
 8007c02:	9b04      	ldr	r3, [sp, #16]
 8007c04:	4631      	mov	r1, r6
 8007c06:	3b01      	subs	r3, #1
 8007c08:	4650      	mov	r0, sl
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	f7ff fa6b 	bl	80070e6 <quorem>
 8007c10:	4641      	mov	r1, r8
 8007c12:	9002      	str	r0, [sp, #8]
 8007c14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c18:	4650      	mov	r0, sl
 8007c1a:	f000 fc5b 	bl	80084d4 <__mcmp>
 8007c1e:	463a      	mov	r2, r7
 8007c20:	9005      	str	r0, [sp, #20]
 8007c22:	4631      	mov	r1, r6
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 fc71 	bl	800850c <__mdiff>
 8007c2a:	68c2      	ldr	r2, [r0, #12]
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	bb02      	cbnz	r2, 8007c72 <_dtoa_r+0xa7a>
 8007c30:	4601      	mov	r1, r0
 8007c32:	4650      	mov	r0, sl
 8007c34:	f000 fc4e 	bl	80084d4 <__mcmp>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c40:	f000 fa0c 	bl	800805c <_Bfree>
 8007c44:	9b07      	ldr	r3, [sp, #28]
 8007c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c48:	9d04      	ldr	r5, [sp, #16]
 8007c4a:	ea43 0102 	orr.w	r1, r3, r2
 8007c4e:	9b06      	ldr	r3, [sp, #24]
 8007c50:	4319      	orrs	r1, r3
 8007c52:	d110      	bne.n	8007c76 <_dtoa_r+0xa7e>
 8007c54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c58:	d029      	beq.n	8007cae <_dtoa_r+0xab6>
 8007c5a:	9b05      	ldr	r3, [sp, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	dd02      	ble.n	8007c66 <_dtoa_r+0xa6e>
 8007c60:	9b02      	ldr	r3, [sp, #8]
 8007c62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007c66:	9b01      	ldr	r3, [sp, #4]
 8007c68:	f883 9000 	strb.w	r9, [r3]
 8007c6c:	e774      	b.n	8007b58 <_dtoa_r+0x960>
 8007c6e:	4638      	mov	r0, r7
 8007c70:	e7ba      	b.n	8007be8 <_dtoa_r+0x9f0>
 8007c72:	2201      	movs	r2, #1
 8007c74:	e7e1      	b.n	8007c3a <_dtoa_r+0xa42>
 8007c76:	9b05      	ldr	r3, [sp, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	db04      	blt.n	8007c86 <_dtoa_r+0xa8e>
 8007c7c:	9907      	ldr	r1, [sp, #28]
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	9906      	ldr	r1, [sp, #24]
 8007c82:	430b      	orrs	r3, r1
 8007c84:	d120      	bne.n	8007cc8 <_dtoa_r+0xad0>
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	dded      	ble.n	8007c66 <_dtoa_r+0xa6e>
 8007c8a:	4651      	mov	r1, sl
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 fbb4 	bl	80083fc <__lshift>
 8007c94:	4631      	mov	r1, r6
 8007c96:	4682      	mov	sl, r0
 8007c98:	f000 fc1c 	bl	80084d4 <__mcmp>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	dc03      	bgt.n	8007ca8 <_dtoa_r+0xab0>
 8007ca0:	d1e1      	bne.n	8007c66 <_dtoa_r+0xa6e>
 8007ca2:	f019 0f01 	tst.w	r9, #1
 8007ca6:	d0de      	beq.n	8007c66 <_dtoa_r+0xa6e>
 8007ca8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007cac:	d1d8      	bne.n	8007c60 <_dtoa_r+0xa68>
 8007cae:	9a01      	ldr	r2, [sp, #4]
 8007cb0:	2339      	movs	r3, #57	; 0x39
 8007cb2:	7013      	strb	r3, [r2, #0]
 8007cb4:	462b      	mov	r3, r5
 8007cb6:	461d      	mov	r5, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cbe:	2a39      	cmp	r2, #57	; 0x39
 8007cc0:	d06c      	beq.n	8007d9c <_dtoa_r+0xba4>
 8007cc2:	3201      	adds	r2, #1
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	e747      	b.n	8007b58 <_dtoa_r+0x960>
 8007cc8:	2a00      	cmp	r2, #0
 8007cca:	dd07      	ble.n	8007cdc <_dtoa_r+0xae4>
 8007ccc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007cd0:	d0ed      	beq.n	8007cae <_dtoa_r+0xab6>
 8007cd2:	9a01      	ldr	r2, [sp, #4]
 8007cd4:	f109 0301 	add.w	r3, r9, #1
 8007cd8:	7013      	strb	r3, [r2, #0]
 8007cda:	e73d      	b.n	8007b58 <_dtoa_r+0x960>
 8007cdc:	9b04      	ldr	r3, [sp, #16]
 8007cde:	9a08      	ldr	r2, [sp, #32]
 8007ce0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d043      	beq.n	8007d70 <_dtoa_r+0xb78>
 8007ce8:	4651      	mov	r1, sl
 8007cea:	2300      	movs	r3, #0
 8007cec:	220a      	movs	r2, #10
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f000 f9d6 	bl	80080a0 <__multadd>
 8007cf4:	45b8      	cmp	r8, r7
 8007cf6:	4682      	mov	sl, r0
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	f04f 020a 	mov.w	r2, #10
 8007d00:	4641      	mov	r1, r8
 8007d02:	4620      	mov	r0, r4
 8007d04:	d107      	bne.n	8007d16 <_dtoa_r+0xb1e>
 8007d06:	f000 f9cb 	bl	80080a0 <__multadd>
 8007d0a:	4680      	mov	r8, r0
 8007d0c:	4607      	mov	r7, r0
 8007d0e:	9b04      	ldr	r3, [sp, #16]
 8007d10:	3301      	adds	r3, #1
 8007d12:	9304      	str	r3, [sp, #16]
 8007d14:	e775      	b.n	8007c02 <_dtoa_r+0xa0a>
 8007d16:	f000 f9c3 	bl	80080a0 <__multadd>
 8007d1a:	4639      	mov	r1, r7
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	2300      	movs	r3, #0
 8007d20:	220a      	movs	r2, #10
 8007d22:	4620      	mov	r0, r4
 8007d24:	f000 f9bc 	bl	80080a0 <__multadd>
 8007d28:	4607      	mov	r7, r0
 8007d2a:	e7f0      	b.n	8007d0e <_dtoa_r+0xb16>
 8007d2c:	9b04      	ldr	r3, [sp, #16]
 8007d2e:	9301      	str	r3, [sp, #4]
 8007d30:	9d00      	ldr	r5, [sp, #0]
 8007d32:	4631      	mov	r1, r6
 8007d34:	4650      	mov	r0, sl
 8007d36:	f7ff f9d6 	bl	80070e6 <quorem>
 8007d3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d3e:	9b00      	ldr	r3, [sp, #0]
 8007d40:	f805 9b01 	strb.w	r9, [r5], #1
 8007d44:	1aea      	subs	r2, r5, r3
 8007d46:	9b01      	ldr	r3, [sp, #4]
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	dd07      	ble.n	8007d5c <_dtoa_r+0xb64>
 8007d4c:	4651      	mov	r1, sl
 8007d4e:	2300      	movs	r3, #0
 8007d50:	220a      	movs	r2, #10
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 f9a4 	bl	80080a0 <__multadd>
 8007d58:	4682      	mov	sl, r0
 8007d5a:	e7ea      	b.n	8007d32 <_dtoa_r+0xb3a>
 8007d5c:	9b01      	ldr	r3, [sp, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bfc8      	it	gt
 8007d62:	461d      	movgt	r5, r3
 8007d64:	9b00      	ldr	r3, [sp, #0]
 8007d66:	bfd8      	it	le
 8007d68:	2501      	movle	r5, #1
 8007d6a:	441d      	add	r5, r3
 8007d6c:	f04f 0800 	mov.w	r8, #0
 8007d70:	4651      	mov	r1, sl
 8007d72:	2201      	movs	r2, #1
 8007d74:	4620      	mov	r0, r4
 8007d76:	f000 fb41 	bl	80083fc <__lshift>
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	4682      	mov	sl, r0
 8007d7e:	f000 fba9 	bl	80084d4 <__mcmp>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	dc96      	bgt.n	8007cb4 <_dtoa_r+0xabc>
 8007d86:	d102      	bne.n	8007d8e <_dtoa_r+0xb96>
 8007d88:	f019 0f01 	tst.w	r9, #1
 8007d8c:	d192      	bne.n	8007cb4 <_dtoa_r+0xabc>
 8007d8e:	462b      	mov	r3, r5
 8007d90:	461d      	mov	r5, r3
 8007d92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d96:	2a30      	cmp	r2, #48	; 0x30
 8007d98:	d0fa      	beq.n	8007d90 <_dtoa_r+0xb98>
 8007d9a:	e6dd      	b.n	8007b58 <_dtoa_r+0x960>
 8007d9c:	9a00      	ldr	r2, [sp, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d189      	bne.n	8007cb6 <_dtoa_r+0xabe>
 8007da2:	f10b 0b01 	add.w	fp, fp, #1
 8007da6:	2331      	movs	r3, #49	; 0x31
 8007da8:	e796      	b.n	8007cd8 <_dtoa_r+0xae0>
 8007daa:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <_dtoa_r+0xbdc>)
 8007dac:	f7ff ba99 	b.w	80072e2 <_dtoa_r+0xea>
 8007db0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f47f aa6d 	bne.w	8007292 <_dtoa_r+0x9a>
 8007db8:	4b07      	ldr	r3, [pc, #28]	; (8007dd8 <_dtoa_r+0xbe0>)
 8007dba:	f7ff ba92 	b.w	80072e2 <_dtoa_r+0xea>
 8007dbe:	9b01      	ldr	r3, [sp, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	dcb5      	bgt.n	8007d30 <_dtoa_r+0xb38>
 8007dc4:	9b07      	ldr	r3, [sp, #28]
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	f73f aeb1 	bgt.w	8007b2e <_dtoa_r+0x936>
 8007dcc:	e7b0      	b.n	8007d30 <_dtoa_r+0xb38>
 8007dce:	bf00      	nop
 8007dd0:	08009efa 	.word	0x08009efa
 8007dd4:	0800a08b 	.word	0x0800a08b
 8007dd8:	08009e7e 	.word	0x08009e7e

08007ddc <_free_r>:
 8007ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dde:	2900      	cmp	r1, #0
 8007de0:	d044      	beq.n	8007e6c <_free_r+0x90>
 8007de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de6:	9001      	str	r0, [sp, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f1a1 0404 	sub.w	r4, r1, #4
 8007dee:	bfb8      	it	lt
 8007df0:	18e4      	addlt	r4, r4, r3
 8007df2:	f000 f8e7 	bl	8007fc4 <__malloc_lock>
 8007df6:	4a1e      	ldr	r2, [pc, #120]	; (8007e70 <_free_r+0x94>)
 8007df8:	9801      	ldr	r0, [sp, #4]
 8007dfa:	6813      	ldr	r3, [r2, #0]
 8007dfc:	b933      	cbnz	r3, 8007e0c <_free_r+0x30>
 8007dfe:	6063      	str	r3, [r4, #4]
 8007e00:	6014      	str	r4, [r2, #0]
 8007e02:	b003      	add	sp, #12
 8007e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e08:	f000 b8e2 	b.w	8007fd0 <__malloc_unlock>
 8007e0c:	42a3      	cmp	r3, r4
 8007e0e:	d908      	bls.n	8007e22 <_free_r+0x46>
 8007e10:	6825      	ldr	r5, [r4, #0]
 8007e12:	1961      	adds	r1, r4, r5
 8007e14:	428b      	cmp	r3, r1
 8007e16:	bf01      	itttt	eq
 8007e18:	6819      	ldreq	r1, [r3, #0]
 8007e1a:	685b      	ldreq	r3, [r3, #4]
 8007e1c:	1949      	addeq	r1, r1, r5
 8007e1e:	6021      	streq	r1, [r4, #0]
 8007e20:	e7ed      	b.n	8007dfe <_free_r+0x22>
 8007e22:	461a      	mov	r2, r3
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	b10b      	cbz	r3, 8007e2c <_free_r+0x50>
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	d9fa      	bls.n	8007e22 <_free_r+0x46>
 8007e2c:	6811      	ldr	r1, [r2, #0]
 8007e2e:	1855      	adds	r5, r2, r1
 8007e30:	42a5      	cmp	r5, r4
 8007e32:	d10b      	bne.n	8007e4c <_free_r+0x70>
 8007e34:	6824      	ldr	r4, [r4, #0]
 8007e36:	4421      	add	r1, r4
 8007e38:	1854      	adds	r4, r2, r1
 8007e3a:	42a3      	cmp	r3, r4
 8007e3c:	6011      	str	r1, [r2, #0]
 8007e3e:	d1e0      	bne.n	8007e02 <_free_r+0x26>
 8007e40:	681c      	ldr	r4, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	6053      	str	r3, [r2, #4]
 8007e46:	440c      	add	r4, r1
 8007e48:	6014      	str	r4, [r2, #0]
 8007e4a:	e7da      	b.n	8007e02 <_free_r+0x26>
 8007e4c:	d902      	bls.n	8007e54 <_free_r+0x78>
 8007e4e:	230c      	movs	r3, #12
 8007e50:	6003      	str	r3, [r0, #0]
 8007e52:	e7d6      	b.n	8007e02 <_free_r+0x26>
 8007e54:	6825      	ldr	r5, [r4, #0]
 8007e56:	1961      	adds	r1, r4, r5
 8007e58:	428b      	cmp	r3, r1
 8007e5a:	bf04      	itt	eq
 8007e5c:	6819      	ldreq	r1, [r3, #0]
 8007e5e:	685b      	ldreq	r3, [r3, #4]
 8007e60:	6063      	str	r3, [r4, #4]
 8007e62:	bf04      	itt	eq
 8007e64:	1949      	addeq	r1, r1, r5
 8007e66:	6021      	streq	r1, [r4, #0]
 8007e68:	6054      	str	r4, [r2, #4]
 8007e6a:	e7ca      	b.n	8007e02 <_free_r+0x26>
 8007e6c:	b003      	add	sp, #12
 8007e6e:	bd30      	pop	{r4, r5, pc}
 8007e70:	200005a0 	.word	0x200005a0

08007e74 <malloc>:
 8007e74:	4b02      	ldr	r3, [pc, #8]	; (8007e80 <malloc+0xc>)
 8007e76:	4601      	mov	r1, r0
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	f000 b823 	b.w	8007ec4 <_malloc_r>
 8007e7e:	bf00      	nop
 8007e80:	20000070 	.word	0x20000070

08007e84 <sbrk_aligned>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	4e0e      	ldr	r6, [pc, #56]	; (8007ec0 <sbrk_aligned+0x3c>)
 8007e88:	460c      	mov	r4, r1
 8007e8a:	6831      	ldr	r1, [r6, #0]
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	b911      	cbnz	r1, 8007e96 <sbrk_aligned+0x12>
 8007e90:	f001 fb9c 	bl	80095cc <_sbrk_r>
 8007e94:	6030      	str	r0, [r6, #0]
 8007e96:	4621      	mov	r1, r4
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f001 fb97 	bl	80095cc <_sbrk_r>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d00a      	beq.n	8007eb8 <sbrk_aligned+0x34>
 8007ea2:	1cc4      	adds	r4, r0, #3
 8007ea4:	f024 0403 	bic.w	r4, r4, #3
 8007ea8:	42a0      	cmp	r0, r4
 8007eaa:	d007      	beq.n	8007ebc <sbrk_aligned+0x38>
 8007eac:	1a21      	subs	r1, r4, r0
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f001 fb8c 	bl	80095cc <_sbrk_r>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d101      	bne.n	8007ebc <sbrk_aligned+0x38>
 8007eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	200005a4 	.word	0x200005a4

08007ec4 <_malloc_r>:
 8007ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec8:	1ccd      	adds	r5, r1, #3
 8007eca:	f025 0503 	bic.w	r5, r5, #3
 8007ece:	3508      	adds	r5, #8
 8007ed0:	2d0c      	cmp	r5, #12
 8007ed2:	bf38      	it	cc
 8007ed4:	250c      	movcc	r5, #12
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	4607      	mov	r7, r0
 8007eda:	db01      	blt.n	8007ee0 <_malloc_r+0x1c>
 8007edc:	42a9      	cmp	r1, r5
 8007ede:	d905      	bls.n	8007eec <_malloc_r+0x28>
 8007ee0:	230c      	movs	r3, #12
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	2600      	movs	r6, #0
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007fc0 <_malloc_r+0xfc>
 8007ef0:	f000 f868 	bl	8007fc4 <__malloc_lock>
 8007ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ef8:	461c      	mov	r4, r3
 8007efa:	bb5c      	cbnz	r4, 8007f54 <_malloc_r+0x90>
 8007efc:	4629      	mov	r1, r5
 8007efe:	4638      	mov	r0, r7
 8007f00:	f7ff ffc0 	bl	8007e84 <sbrk_aligned>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	4604      	mov	r4, r0
 8007f08:	d155      	bne.n	8007fb6 <_malloc_r+0xf2>
 8007f0a:	f8d8 4000 	ldr.w	r4, [r8]
 8007f0e:	4626      	mov	r6, r4
 8007f10:	2e00      	cmp	r6, #0
 8007f12:	d145      	bne.n	8007fa0 <_malloc_r+0xdc>
 8007f14:	2c00      	cmp	r4, #0
 8007f16:	d048      	beq.n	8007faa <_malloc_r+0xe6>
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	eb04 0903 	add.w	r9, r4, r3
 8007f22:	f001 fb53 	bl	80095cc <_sbrk_r>
 8007f26:	4581      	cmp	r9, r0
 8007f28:	d13f      	bne.n	8007faa <_malloc_r+0xe6>
 8007f2a:	6821      	ldr	r1, [r4, #0]
 8007f2c:	1a6d      	subs	r5, r5, r1
 8007f2e:	4629      	mov	r1, r5
 8007f30:	4638      	mov	r0, r7
 8007f32:	f7ff ffa7 	bl	8007e84 <sbrk_aligned>
 8007f36:	3001      	adds	r0, #1
 8007f38:	d037      	beq.n	8007faa <_malloc_r+0xe6>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	442b      	add	r3, r5
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	f8d8 3000 	ldr.w	r3, [r8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d038      	beq.n	8007fba <_malloc_r+0xf6>
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	42a2      	cmp	r2, r4
 8007f4c:	d12b      	bne.n	8007fa6 <_malloc_r+0xe2>
 8007f4e:	2200      	movs	r2, #0
 8007f50:	605a      	str	r2, [r3, #4]
 8007f52:	e00f      	b.n	8007f74 <_malloc_r+0xb0>
 8007f54:	6822      	ldr	r2, [r4, #0]
 8007f56:	1b52      	subs	r2, r2, r5
 8007f58:	d41f      	bmi.n	8007f9a <_malloc_r+0xd6>
 8007f5a:	2a0b      	cmp	r2, #11
 8007f5c:	d917      	bls.n	8007f8e <_malloc_r+0xca>
 8007f5e:	1961      	adds	r1, r4, r5
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	6025      	str	r5, [r4, #0]
 8007f64:	bf18      	it	ne
 8007f66:	6059      	strne	r1, [r3, #4]
 8007f68:	6863      	ldr	r3, [r4, #4]
 8007f6a:	bf08      	it	eq
 8007f6c:	f8c8 1000 	streq.w	r1, [r8]
 8007f70:	5162      	str	r2, [r4, r5]
 8007f72:	604b      	str	r3, [r1, #4]
 8007f74:	4638      	mov	r0, r7
 8007f76:	f104 060b 	add.w	r6, r4, #11
 8007f7a:	f000 f829 	bl	8007fd0 <__malloc_unlock>
 8007f7e:	f026 0607 	bic.w	r6, r6, #7
 8007f82:	1d23      	adds	r3, r4, #4
 8007f84:	1af2      	subs	r2, r6, r3
 8007f86:	d0ae      	beq.n	8007ee6 <_malloc_r+0x22>
 8007f88:	1b9b      	subs	r3, r3, r6
 8007f8a:	50a3      	str	r3, [r4, r2]
 8007f8c:	e7ab      	b.n	8007ee6 <_malloc_r+0x22>
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	6862      	ldr	r2, [r4, #4]
 8007f92:	d1dd      	bne.n	8007f50 <_malloc_r+0x8c>
 8007f94:	f8c8 2000 	str.w	r2, [r8]
 8007f98:	e7ec      	b.n	8007f74 <_malloc_r+0xb0>
 8007f9a:	4623      	mov	r3, r4
 8007f9c:	6864      	ldr	r4, [r4, #4]
 8007f9e:	e7ac      	b.n	8007efa <_malloc_r+0x36>
 8007fa0:	4634      	mov	r4, r6
 8007fa2:	6876      	ldr	r6, [r6, #4]
 8007fa4:	e7b4      	b.n	8007f10 <_malloc_r+0x4c>
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	e7cc      	b.n	8007f44 <_malloc_r+0x80>
 8007faa:	230c      	movs	r3, #12
 8007fac:	603b      	str	r3, [r7, #0]
 8007fae:	4638      	mov	r0, r7
 8007fb0:	f000 f80e 	bl	8007fd0 <__malloc_unlock>
 8007fb4:	e797      	b.n	8007ee6 <_malloc_r+0x22>
 8007fb6:	6025      	str	r5, [r4, #0]
 8007fb8:	e7dc      	b.n	8007f74 <_malloc_r+0xb0>
 8007fba:	605b      	str	r3, [r3, #4]
 8007fbc:	deff      	udf	#255	; 0xff
 8007fbe:	bf00      	nop
 8007fc0:	200005a0 	.word	0x200005a0

08007fc4 <__malloc_lock>:
 8007fc4:	4801      	ldr	r0, [pc, #4]	; (8007fcc <__malloc_lock+0x8>)
 8007fc6:	f7ff b88c 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8007fca:	bf00      	nop
 8007fcc:	2000059c 	.word	0x2000059c

08007fd0 <__malloc_unlock>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <__malloc_unlock+0x8>)
 8007fd2:	f7ff b887 	b.w	80070e4 <__retarget_lock_release_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	2000059c 	.word	0x2000059c

08007fdc <_Balloc>:
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	69c6      	ldr	r6, [r0, #28]
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	460d      	mov	r5, r1
 8007fe4:	b976      	cbnz	r6, 8008004 <_Balloc+0x28>
 8007fe6:	2010      	movs	r0, #16
 8007fe8:	f7ff ff44 	bl	8007e74 <malloc>
 8007fec:	4602      	mov	r2, r0
 8007fee:	61e0      	str	r0, [r4, #28]
 8007ff0:	b920      	cbnz	r0, 8007ffc <_Balloc+0x20>
 8007ff2:	4b18      	ldr	r3, [pc, #96]	; (8008054 <_Balloc+0x78>)
 8007ff4:	4818      	ldr	r0, [pc, #96]	; (8008058 <_Balloc+0x7c>)
 8007ff6:	216b      	movs	r1, #107	; 0x6b
 8007ff8:	f001 fb06 	bl	8009608 <__assert_func>
 8007ffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008000:	6006      	str	r6, [r0, #0]
 8008002:	60c6      	str	r6, [r0, #12]
 8008004:	69e6      	ldr	r6, [r4, #28]
 8008006:	68f3      	ldr	r3, [r6, #12]
 8008008:	b183      	cbz	r3, 800802c <_Balloc+0x50>
 800800a:	69e3      	ldr	r3, [r4, #28]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008012:	b9b8      	cbnz	r0, 8008044 <_Balloc+0x68>
 8008014:	2101      	movs	r1, #1
 8008016:	fa01 f605 	lsl.w	r6, r1, r5
 800801a:	1d72      	adds	r2, r6, #5
 800801c:	0092      	lsls	r2, r2, #2
 800801e:	4620      	mov	r0, r4
 8008020:	f001 fb10 	bl	8009644 <_calloc_r>
 8008024:	b160      	cbz	r0, 8008040 <_Balloc+0x64>
 8008026:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800802a:	e00e      	b.n	800804a <_Balloc+0x6e>
 800802c:	2221      	movs	r2, #33	; 0x21
 800802e:	2104      	movs	r1, #4
 8008030:	4620      	mov	r0, r4
 8008032:	f001 fb07 	bl	8009644 <_calloc_r>
 8008036:	69e3      	ldr	r3, [r4, #28]
 8008038:	60f0      	str	r0, [r6, #12]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e4      	bne.n	800800a <_Balloc+0x2e>
 8008040:	2000      	movs	r0, #0
 8008042:	bd70      	pop	{r4, r5, r6, pc}
 8008044:	6802      	ldr	r2, [r0, #0]
 8008046:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800804a:	2300      	movs	r3, #0
 800804c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008050:	e7f7      	b.n	8008042 <_Balloc+0x66>
 8008052:	bf00      	nop
 8008054:	08009e8b 	.word	0x08009e8b
 8008058:	08009f0b 	.word	0x08009f0b

0800805c <_Bfree>:
 800805c:	b570      	push	{r4, r5, r6, lr}
 800805e:	69c6      	ldr	r6, [r0, #28]
 8008060:	4605      	mov	r5, r0
 8008062:	460c      	mov	r4, r1
 8008064:	b976      	cbnz	r6, 8008084 <_Bfree+0x28>
 8008066:	2010      	movs	r0, #16
 8008068:	f7ff ff04 	bl	8007e74 <malloc>
 800806c:	4602      	mov	r2, r0
 800806e:	61e8      	str	r0, [r5, #28]
 8008070:	b920      	cbnz	r0, 800807c <_Bfree+0x20>
 8008072:	4b09      	ldr	r3, [pc, #36]	; (8008098 <_Bfree+0x3c>)
 8008074:	4809      	ldr	r0, [pc, #36]	; (800809c <_Bfree+0x40>)
 8008076:	218f      	movs	r1, #143	; 0x8f
 8008078:	f001 fac6 	bl	8009608 <__assert_func>
 800807c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008080:	6006      	str	r6, [r0, #0]
 8008082:	60c6      	str	r6, [r0, #12]
 8008084:	b13c      	cbz	r4, 8008096 <_Bfree+0x3a>
 8008086:	69eb      	ldr	r3, [r5, #28]
 8008088:	6862      	ldr	r2, [r4, #4]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008090:	6021      	str	r1, [r4, #0]
 8008092:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	08009e8b 	.word	0x08009e8b
 800809c:	08009f0b 	.word	0x08009f0b

080080a0 <__multadd>:
 80080a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a4:	690d      	ldr	r5, [r1, #16]
 80080a6:	4607      	mov	r7, r0
 80080a8:	460c      	mov	r4, r1
 80080aa:	461e      	mov	r6, r3
 80080ac:	f101 0c14 	add.w	ip, r1, #20
 80080b0:	2000      	movs	r0, #0
 80080b2:	f8dc 3000 	ldr.w	r3, [ip]
 80080b6:	b299      	uxth	r1, r3
 80080b8:	fb02 6101 	mla	r1, r2, r1, r6
 80080bc:	0c1e      	lsrs	r6, r3, #16
 80080be:	0c0b      	lsrs	r3, r1, #16
 80080c0:	fb02 3306 	mla	r3, r2, r6, r3
 80080c4:	b289      	uxth	r1, r1
 80080c6:	3001      	adds	r0, #1
 80080c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080cc:	4285      	cmp	r5, r0
 80080ce:	f84c 1b04 	str.w	r1, [ip], #4
 80080d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080d6:	dcec      	bgt.n	80080b2 <__multadd+0x12>
 80080d8:	b30e      	cbz	r6, 800811e <__multadd+0x7e>
 80080da:	68a3      	ldr	r3, [r4, #8]
 80080dc:	42ab      	cmp	r3, r5
 80080de:	dc19      	bgt.n	8008114 <__multadd+0x74>
 80080e0:	6861      	ldr	r1, [r4, #4]
 80080e2:	4638      	mov	r0, r7
 80080e4:	3101      	adds	r1, #1
 80080e6:	f7ff ff79 	bl	8007fdc <_Balloc>
 80080ea:	4680      	mov	r8, r0
 80080ec:	b928      	cbnz	r0, 80080fa <__multadd+0x5a>
 80080ee:	4602      	mov	r2, r0
 80080f0:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <__multadd+0x84>)
 80080f2:	480d      	ldr	r0, [pc, #52]	; (8008128 <__multadd+0x88>)
 80080f4:	21ba      	movs	r1, #186	; 0xba
 80080f6:	f001 fa87 	bl	8009608 <__assert_func>
 80080fa:	6922      	ldr	r2, [r4, #16]
 80080fc:	3202      	adds	r2, #2
 80080fe:	f104 010c 	add.w	r1, r4, #12
 8008102:	0092      	lsls	r2, r2, #2
 8008104:	300c      	adds	r0, #12
 8008106:	f001 fa71 	bl	80095ec <memcpy>
 800810a:	4621      	mov	r1, r4
 800810c:	4638      	mov	r0, r7
 800810e:	f7ff ffa5 	bl	800805c <_Bfree>
 8008112:	4644      	mov	r4, r8
 8008114:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008118:	3501      	adds	r5, #1
 800811a:	615e      	str	r6, [r3, #20]
 800811c:	6125      	str	r5, [r4, #16]
 800811e:	4620      	mov	r0, r4
 8008120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008124:	08009efa 	.word	0x08009efa
 8008128:	08009f0b 	.word	0x08009f0b

0800812c <__hi0bits>:
 800812c:	0c03      	lsrs	r3, r0, #16
 800812e:	041b      	lsls	r3, r3, #16
 8008130:	b9d3      	cbnz	r3, 8008168 <__hi0bits+0x3c>
 8008132:	0400      	lsls	r0, r0, #16
 8008134:	2310      	movs	r3, #16
 8008136:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800813a:	bf04      	itt	eq
 800813c:	0200      	lsleq	r0, r0, #8
 800813e:	3308      	addeq	r3, #8
 8008140:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008144:	bf04      	itt	eq
 8008146:	0100      	lsleq	r0, r0, #4
 8008148:	3304      	addeq	r3, #4
 800814a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800814e:	bf04      	itt	eq
 8008150:	0080      	lsleq	r0, r0, #2
 8008152:	3302      	addeq	r3, #2
 8008154:	2800      	cmp	r0, #0
 8008156:	db05      	blt.n	8008164 <__hi0bits+0x38>
 8008158:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800815c:	f103 0301 	add.w	r3, r3, #1
 8008160:	bf08      	it	eq
 8008162:	2320      	moveq	r3, #32
 8008164:	4618      	mov	r0, r3
 8008166:	4770      	bx	lr
 8008168:	2300      	movs	r3, #0
 800816a:	e7e4      	b.n	8008136 <__hi0bits+0xa>

0800816c <__lo0bits>:
 800816c:	6803      	ldr	r3, [r0, #0]
 800816e:	f013 0207 	ands.w	r2, r3, #7
 8008172:	d00c      	beq.n	800818e <__lo0bits+0x22>
 8008174:	07d9      	lsls	r1, r3, #31
 8008176:	d422      	bmi.n	80081be <__lo0bits+0x52>
 8008178:	079a      	lsls	r2, r3, #30
 800817a:	bf49      	itett	mi
 800817c:	085b      	lsrmi	r3, r3, #1
 800817e:	089b      	lsrpl	r3, r3, #2
 8008180:	6003      	strmi	r3, [r0, #0]
 8008182:	2201      	movmi	r2, #1
 8008184:	bf5c      	itt	pl
 8008186:	6003      	strpl	r3, [r0, #0]
 8008188:	2202      	movpl	r2, #2
 800818a:	4610      	mov	r0, r2
 800818c:	4770      	bx	lr
 800818e:	b299      	uxth	r1, r3
 8008190:	b909      	cbnz	r1, 8008196 <__lo0bits+0x2a>
 8008192:	0c1b      	lsrs	r3, r3, #16
 8008194:	2210      	movs	r2, #16
 8008196:	b2d9      	uxtb	r1, r3
 8008198:	b909      	cbnz	r1, 800819e <__lo0bits+0x32>
 800819a:	3208      	adds	r2, #8
 800819c:	0a1b      	lsrs	r3, r3, #8
 800819e:	0719      	lsls	r1, r3, #28
 80081a0:	bf04      	itt	eq
 80081a2:	091b      	lsreq	r3, r3, #4
 80081a4:	3204      	addeq	r2, #4
 80081a6:	0799      	lsls	r1, r3, #30
 80081a8:	bf04      	itt	eq
 80081aa:	089b      	lsreq	r3, r3, #2
 80081ac:	3202      	addeq	r2, #2
 80081ae:	07d9      	lsls	r1, r3, #31
 80081b0:	d403      	bmi.n	80081ba <__lo0bits+0x4e>
 80081b2:	085b      	lsrs	r3, r3, #1
 80081b4:	f102 0201 	add.w	r2, r2, #1
 80081b8:	d003      	beq.n	80081c2 <__lo0bits+0x56>
 80081ba:	6003      	str	r3, [r0, #0]
 80081bc:	e7e5      	b.n	800818a <__lo0bits+0x1e>
 80081be:	2200      	movs	r2, #0
 80081c0:	e7e3      	b.n	800818a <__lo0bits+0x1e>
 80081c2:	2220      	movs	r2, #32
 80081c4:	e7e1      	b.n	800818a <__lo0bits+0x1e>
	...

080081c8 <__i2b>:
 80081c8:	b510      	push	{r4, lr}
 80081ca:	460c      	mov	r4, r1
 80081cc:	2101      	movs	r1, #1
 80081ce:	f7ff ff05 	bl	8007fdc <_Balloc>
 80081d2:	4602      	mov	r2, r0
 80081d4:	b928      	cbnz	r0, 80081e2 <__i2b+0x1a>
 80081d6:	4b05      	ldr	r3, [pc, #20]	; (80081ec <__i2b+0x24>)
 80081d8:	4805      	ldr	r0, [pc, #20]	; (80081f0 <__i2b+0x28>)
 80081da:	f240 1145 	movw	r1, #325	; 0x145
 80081de:	f001 fa13 	bl	8009608 <__assert_func>
 80081e2:	2301      	movs	r3, #1
 80081e4:	6144      	str	r4, [r0, #20]
 80081e6:	6103      	str	r3, [r0, #16]
 80081e8:	bd10      	pop	{r4, pc}
 80081ea:	bf00      	nop
 80081ec:	08009efa 	.word	0x08009efa
 80081f0:	08009f0b 	.word	0x08009f0b

080081f4 <__multiply>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	4691      	mov	r9, r2
 80081fa:	690a      	ldr	r2, [r1, #16]
 80081fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008200:	429a      	cmp	r2, r3
 8008202:	bfb8      	it	lt
 8008204:	460b      	movlt	r3, r1
 8008206:	460c      	mov	r4, r1
 8008208:	bfbc      	itt	lt
 800820a:	464c      	movlt	r4, r9
 800820c:	4699      	movlt	r9, r3
 800820e:	6927      	ldr	r7, [r4, #16]
 8008210:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008214:	68a3      	ldr	r3, [r4, #8]
 8008216:	6861      	ldr	r1, [r4, #4]
 8008218:	eb07 060a 	add.w	r6, r7, sl
 800821c:	42b3      	cmp	r3, r6
 800821e:	b085      	sub	sp, #20
 8008220:	bfb8      	it	lt
 8008222:	3101      	addlt	r1, #1
 8008224:	f7ff feda 	bl	8007fdc <_Balloc>
 8008228:	b930      	cbnz	r0, 8008238 <__multiply+0x44>
 800822a:	4602      	mov	r2, r0
 800822c:	4b44      	ldr	r3, [pc, #272]	; (8008340 <__multiply+0x14c>)
 800822e:	4845      	ldr	r0, [pc, #276]	; (8008344 <__multiply+0x150>)
 8008230:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008234:	f001 f9e8 	bl	8009608 <__assert_func>
 8008238:	f100 0514 	add.w	r5, r0, #20
 800823c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008240:	462b      	mov	r3, r5
 8008242:	2200      	movs	r2, #0
 8008244:	4543      	cmp	r3, r8
 8008246:	d321      	bcc.n	800828c <__multiply+0x98>
 8008248:	f104 0314 	add.w	r3, r4, #20
 800824c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008250:	f109 0314 	add.w	r3, r9, #20
 8008254:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008258:	9202      	str	r2, [sp, #8]
 800825a:	1b3a      	subs	r2, r7, r4
 800825c:	3a15      	subs	r2, #21
 800825e:	f022 0203 	bic.w	r2, r2, #3
 8008262:	3204      	adds	r2, #4
 8008264:	f104 0115 	add.w	r1, r4, #21
 8008268:	428f      	cmp	r7, r1
 800826a:	bf38      	it	cc
 800826c:	2204      	movcc	r2, #4
 800826e:	9201      	str	r2, [sp, #4]
 8008270:	9a02      	ldr	r2, [sp, #8]
 8008272:	9303      	str	r3, [sp, #12]
 8008274:	429a      	cmp	r2, r3
 8008276:	d80c      	bhi.n	8008292 <__multiply+0x9e>
 8008278:	2e00      	cmp	r6, #0
 800827a:	dd03      	ble.n	8008284 <__multiply+0x90>
 800827c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008280:	2b00      	cmp	r3, #0
 8008282:	d05b      	beq.n	800833c <__multiply+0x148>
 8008284:	6106      	str	r6, [r0, #16]
 8008286:	b005      	add	sp, #20
 8008288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828c:	f843 2b04 	str.w	r2, [r3], #4
 8008290:	e7d8      	b.n	8008244 <__multiply+0x50>
 8008292:	f8b3 a000 	ldrh.w	sl, [r3]
 8008296:	f1ba 0f00 	cmp.w	sl, #0
 800829a:	d024      	beq.n	80082e6 <__multiply+0xf2>
 800829c:	f104 0e14 	add.w	lr, r4, #20
 80082a0:	46a9      	mov	r9, r5
 80082a2:	f04f 0c00 	mov.w	ip, #0
 80082a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082aa:	f8d9 1000 	ldr.w	r1, [r9]
 80082ae:	fa1f fb82 	uxth.w	fp, r2
 80082b2:	b289      	uxth	r1, r1
 80082b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80082b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80082bc:	f8d9 2000 	ldr.w	r2, [r9]
 80082c0:	4461      	add	r1, ip
 80082c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80082ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082ce:	b289      	uxth	r1, r1
 80082d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082d4:	4577      	cmp	r7, lr
 80082d6:	f849 1b04 	str.w	r1, [r9], #4
 80082da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082de:	d8e2      	bhi.n	80082a6 <__multiply+0xb2>
 80082e0:	9a01      	ldr	r2, [sp, #4]
 80082e2:	f845 c002 	str.w	ip, [r5, r2]
 80082e6:	9a03      	ldr	r2, [sp, #12]
 80082e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082ec:	3304      	adds	r3, #4
 80082ee:	f1b9 0f00 	cmp.w	r9, #0
 80082f2:	d021      	beq.n	8008338 <__multiply+0x144>
 80082f4:	6829      	ldr	r1, [r5, #0]
 80082f6:	f104 0c14 	add.w	ip, r4, #20
 80082fa:	46ae      	mov	lr, r5
 80082fc:	f04f 0a00 	mov.w	sl, #0
 8008300:	f8bc b000 	ldrh.w	fp, [ip]
 8008304:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008308:	fb09 220b 	mla	r2, r9, fp, r2
 800830c:	4452      	add	r2, sl
 800830e:	b289      	uxth	r1, r1
 8008310:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008314:	f84e 1b04 	str.w	r1, [lr], #4
 8008318:	f85c 1b04 	ldr.w	r1, [ip], #4
 800831c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008320:	f8be 1000 	ldrh.w	r1, [lr]
 8008324:	fb09 110a 	mla	r1, r9, sl, r1
 8008328:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800832c:	4567      	cmp	r7, ip
 800832e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008332:	d8e5      	bhi.n	8008300 <__multiply+0x10c>
 8008334:	9a01      	ldr	r2, [sp, #4]
 8008336:	50a9      	str	r1, [r5, r2]
 8008338:	3504      	adds	r5, #4
 800833a:	e799      	b.n	8008270 <__multiply+0x7c>
 800833c:	3e01      	subs	r6, #1
 800833e:	e79b      	b.n	8008278 <__multiply+0x84>
 8008340:	08009efa 	.word	0x08009efa
 8008344:	08009f0b 	.word	0x08009f0b

08008348 <__pow5mult>:
 8008348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800834c:	4615      	mov	r5, r2
 800834e:	f012 0203 	ands.w	r2, r2, #3
 8008352:	4606      	mov	r6, r0
 8008354:	460f      	mov	r7, r1
 8008356:	d007      	beq.n	8008368 <__pow5mult+0x20>
 8008358:	4c25      	ldr	r4, [pc, #148]	; (80083f0 <__pow5mult+0xa8>)
 800835a:	3a01      	subs	r2, #1
 800835c:	2300      	movs	r3, #0
 800835e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008362:	f7ff fe9d 	bl	80080a0 <__multadd>
 8008366:	4607      	mov	r7, r0
 8008368:	10ad      	asrs	r5, r5, #2
 800836a:	d03d      	beq.n	80083e8 <__pow5mult+0xa0>
 800836c:	69f4      	ldr	r4, [r6, #28]
 800836e:	b97c      	cbnz	r4, 8008390 <__pow5mult+0x48>
 8008370:	2010      	movs	r0, #16
 8008372:	f7ff fd7f 	bl	8007e74 <malloc>
 8008376:	4602      	mov	r2, r0
 8008378:	61f0      	str	r0, [r6, #28]
 800837a:	b928      	cbnz	r0, 8008388 <__pow5mult+0x40>
 800837c:	4b1d      	ldr	r3, [pc, #116]	; (80083f4 <__pow5mult+0xac>)
 800837e:	481e      	ldr	r0, [pc, #120]	; (80083f8 <__pow5mult+0xb0>)
 8008380:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008384:	f001 f940 	bl	8009608 <__assert_func>
 8008388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800838c:	6004      	str	r4, [r0, #0]
 800838e:	60c4      	str	r4, [r0, #12]
 8008390:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008394:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008398:	b94c      	cbnz	r4, 80083ae <__pow5mult+0x66>
 800839a:	f240 2171 	movw	r1, #625	; 0x271
 800839e:	4630      	mov	r0, r6
 80083a0:	f7ff ff12 	bl	80081c8 <__i2b>
 80083a4:	2300      	movs	r3, #0
 80083a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80083aa:	4604      	mov	r4, r0
 80083ac:	6003      	str	r3, [r0, #0]
 80083ae:	f04f 0900 	mov.w	r9, #0
 80083b2:	07eb      	lsls	r3, r5, #31
 80083b4:	d50a      	bpl.n	80083cc <__pow5mult+0x84>
 80083b6:	4639      	mov	r1, r7
 80083b8:	4622      	mov	r2, r4
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7ff ff1a 	bl	80081f4 <__multiply>
 80083c0:	4639      	mov	r1, r7
 80083c2:	4680      	mov	r8, r0
 80083c4:	4630      	mov	r0, r6
 80083c6:	f7ff fe49 	bl	800805c <_Bfree>
 80083ca:	4647      	mov	r7, r8
 80083cc:	106d      	asrs	r5, r5, #1
 80083ce:	d00b      	beq.n	80083e8 <__pow5mult+0xa0>
 80083d0:	6820      	ldr	r0, [r4, #0]
 80083d2:	b938      	cbnz	r0, 80083e4 <__pow5mult+0x9c>
 80083d4:	4622      	mov	r2, r4
 80083d6:	4621      	mov	r1, r4
 80083d8:	4630      	mov	r0, r6
 80083da:	f7ff ff0b 	bl	80081f4 <__multiply>
 80083de:	6020      	str	r0, [r4, #0]
 80083e0:	f8c0 9000 	str.w	r9, [r0]
 80083e4:	4604      	mov	r4, r0
 80083e6:	e7e4      	b.n	80083b2 <__pow5mult+0x6a>
 80083e8:	4638      	mov	r0, r7
 80083ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ee:	bf00      	nop
 80083f0:	0800a058 	.word	0x0800a058
 80083f4:	08009e8b 	.word	0x08009e8b
 80083f8:	08009f0b 	.word	0x08009f0b

080083fc <__lshift>:
 80083fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008400:	460c      	mov	r4, r1
 8008402:	6849      	ldr	r1, [r1, #4]
 8008404:	6923      	ldr	r3, [r4, #16]
 8008406:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800840a:	68a3      	ldr	r3, [r4, #8]
 800840c:	4607      	mov	r7, r0
 800840e:	4691      	mov	r9, r2
 8008410:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008414:	f108 0601 	add.w	r6, r8, #1
 8008418:	42b3      	cmp	r3, r6
 800841a:	db0b      	blt.n	8008434 <__lshift+0x38>
 800841c:	4638      	mov	r0, r7
 800841e:	f7ff fddd 	bl	8007fdc <_Balloc>
 8008422:	4605      	mov	r5, r0
 8008424:	b948      	cbnz	r0, 800843a <__lshift+0x3e>
 8008426:	4602      	mov	r2, r0
 8008428:	4b28      	ldr	r3, [pc, #160]	; (80084cc <__lshift+0xd0>)
 800842a:	4829      	ldr	r0, [pc, #164]	; (80084d0 <__lshift+0xd4>)
 800842c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008430:	f001 f8ea 	bl	8009608 <__assert_func>
 8008434:	3101      	adds	r1, #1
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	e7ee      	b.n	8008418 <__lshift+0x1c>
 800843a:	2300      	movs	r3, #0
 800843c:	f100 0114 	add.w	r1, r0, #20
 8008440:	f100 0210 	add.w	r2, r0, #16
 8008444:	4618      	mov	r0, r3
 8008446:	4553      	cmp	r3, sl
 8008448:	db33      	blt.n	80084b2 <__lshift+0xb6>
 800844a:	6920      	ldr	r0, [r4, #16]
 800844c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008450:	f104 0314 	add.w	r3, r4, #20
 8008454:	f019 091f 	ands.w	r9, r9, #31
 8008458:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800845c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008460:	d02b      	beq.n	80084ba <__lshift+0xbe>
 8008462:	f1c9 0e20 	rsb	lr, r9, #32
 8008466:	468a      	mov	sl, r1
 8008468:	2200      	movs	r2, #0
 800846a:	6818      	ldr	r0, [r3, #0]
 800846c:	fa00 f009 	lsl.w	r0, r0, r9
 8008470:	4310      	orrs	r0, r2
 8008472:	f84a 0b04 	str.w	r0, [sl], #4
 8008476:	f853 2b04 	ldr.w	r2, [r3], #4
 800847a:	459c      	cmp	ip, r3
 800847c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008480:	d8f3      	bhi.n	800846a <__lshift+0x6e>
 8008482:	ebac 0304 	sub.w	r3, ip, r4
 8008486:	3b15      	subs	r3, #21
 8008488:	f023 0303 	bic.w	r3, r3, #3
 800848c:	3304      	adds	r3, #4
 800848e:	f104 0015 	add.w	r0, r4, #21
 8008492:	4584      	cmp	ip, r0
 8008494:	bf38      	it	cc
 8008496:	2304      	movcc	r3, #4
 8008498:	50ca      	str	r2, [r1, r3]
 800849a:	b10a      	cbz	r2, 80084a0 <__lshift+0xa4>
 800849c:	f108 0602 	add.w	r6, r8, #2
 80084a0:	3e01      	subs	r6, #1
 80084a2:	4638      	mov	r0, r7
 80084a4:	612e      	str	r6, [r5, #16]
 80084a6:	4621      	mov	r1, r4
 80084a8:	f7ff fdd8 	bl	800805c <_Bfree>
 80084ac:	4628      	mov	r0, r5
 80084ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80084b6:	3301      	adds	r3, #1
 80084b8:	e7c5      	b.n	8008446 <__lshift+0x4a>
 80084ba:	3904      	subs	r1, #4
 80084bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80084c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80084c4:	459c      	cmp	ip, r3
 80084c6:	d8f9      	bhi.n	80084bc <__lshift+0xc0>
 80084c8:	e7ea      	b.n	80084a0 <__lshift+0xa4>
 80084ca:	bf00      	nop
 80084cc:	08009efa 	.word	0x08009efa
 80084d0:	08009f0b 	.word	0x08009f0b

080084d4 <__mcmp>:
 80084d4:	b530      	push	{r4, r5, lr}
 80084d6:	6902      	ldr	r2, [r0, #16]
 80084d8:	690c      	ldr	r4, [r1, #16]
 80084da:	1b12      	subs	r2, r2, r4
 80084dc:	d10e      	bne.n	80084fc <__mcmp+0x28>
 80084de:	f100 0314 	add.w	r3, r0, #20
 80084e2:	3114      	adds	r1, #20
 80084e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084f4:	42a5      	cmp	r5, r4
 80084f6:	d003      	beq.n	8008500 <__mcmp+0x2c>
 80084f8:	d305      	bcc.n	8008506 <__mcmp+0x32>
 80084fa:	2201      	movs	r2, #1
 80084fc:	4610      	mov	r0, r2
 80084fe:	bd30      	pop	{r4, r5, pc}
 8008500:	4283      	cmp	r3, r0
 8008502:	d3f3      	bcc.n	80084ec <__mcmp+0x18>
 8008504:	e7fa      	b.n	80084fc <__mcmp+0x28>
 8008506:	f04f 32ff 	mov.w	r2, #4294967295
 800850a:	e7f7      	b.n	80084fc <__mcmp+0x28>

0800850c <__mdiff>:
 800850c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008510:	460c      	mov	r4, r1
 8008512:	4606      	mov	r6, r0
 8008514:	4611      	mov	r1, r2
 8008516:	4620      	mov	r0, r4
 8008518:	4690      	mov	r8, r2
 800851a:	f7ff ffdb 	bl	80084d4 <__mcmp>
 800851e:	1e05      	subs	r5, r0, #0
 8008520:	d110      	bne.n	8008544 <__mdiff+0x38>
 8008522:	4629      	mov	r1, r5
 8008524:	4630      	mov	r0, r6
 8008526:	f7ff fd59 	bl	8007fdc <_Balloc>
 800852a:	b930      	cbnz	r0, 800853a <__mdiff+0x2e>
 800852c:	4b3a      	ldr	r3, [pc, #232]	; (8008618 <__mdiff+0x10c>)
 800852e:	4602      	mov	r2, r0
 8008530:	f240 2137 	movw	r1, #567	; 0x237
 8008534:	4839      	ldr	r0, [pc, #228]	; (800861c <__mdiff+0x110>)
 8008536:	f001 f867 	bl	8009608 <__assert_func>
 800853a:	2301      	movs	r3, #1
 800853c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008544:	bfa4      	itt	ge
 8008546:	4643      	movge	r3, r8
 8008548:	46a0      	movge	r8, r4
 800854a:	4630      	mov	r0, r6
 800854c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008550:	bfa6      	itte	ge
 8008552:	461c      	movge	r4, r3
 8008554:	2500      	movge	r5, #0
 8008556:	2501      	movlt	r5, #1
 8008558:	f7ff fd40 	bl	8007fdc <_Balloc>
 800855c:	b920      	cbnz	r0, 8008568 <__mdiff+0x5c>
 800855e:	4b2e      	ldr	r3, [pc, #184]	; (8008618 <__mdiff+0x10c>)
 8008560:	4602      	mov	r2, r0
 8008562:	f240 2145 	movw	r1, #581	; 0x245
 8008566:	e7e5      	b.n	8008534 <__mdiff+0x28>
 8008568:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800856c:	6926      	ldr	r6, [r4, #16]
 800856e:	60c5      	str	r5, [r0, #12]
 8008570:	f104 0914 	add.w	r9, r4, #20
 8008574:	f108 0514 	add.w	r5, r8, #20
 8008578:	f100 0e14 	add.w	lr, r0, #20
 800857c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008580:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008584:	f108 0210 	add.w	r2, r8, #16
 8008588:	46f2      	mov	sl, lr
 800858a:	2100      	movs	r1, #0
 800858c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008590:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008594:	fa11 f88b 	uxtah	r8, r1, fp
 8008598:	b299      	uxth	r1, r3
 800859a:	0c1b      	lsrs	r3, r3, #16
 800859c:	eba8 0801 	sub.w	r8, r8, r1
 80085a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80085a8:	fa1f f888 	uxth.w	r8, r8
 80085ac:	1419      	asrs	r1, r3, #16
 80085ae:	454e      	cmp	r6, r9
 80085b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085b4:	f84a 3b04 	str.w	r3, [sl], #4
 80085b8:	d8e8      	bhi.n	800858c <__mdiff+0x80>
 80085ba:	1b33      	subs	r3, r6, r4
 80085bc:	3b15      	subs	r3, #21
 80085be:	f023 0303 	bic.w	r3, r3, #3
 80085c2:	3304      	adds	r3, #4
 80085c4:	3415      	adds	r4, #21
 80085c6:	42a6      	cmp	r6, r4
 80085c8:	bf38      	it	cc
 80085ca:	2304      	movcc	r3, #4
 80085cc:	441d      	add	r5, r3
 80085ce:	4473      	add	r3, lr
 80085d0:	469e      	mov	lr, r3
 80085d2:	462e      	mov	r6, r5
 80085d4:	4566      	cmp	r6, ip
 80085d6:	d30e      	bcc.n	80085f6 <__mdiff+0xea>
 80085d8:	f10c 0203 	add.w	r2, ip, #3
 80085dc:	1b52      	subs	r2, r2, r5
 80085de:	f022 0203 	bic.w	r2, r2, #3
 80085e2:	3d03      	subs	r5, #3
 80085e4:	45ac      	cmp	ip, r5
 80085e6:	bf38      	it	cc
 80085e8:	2200      	movcc	r2, #0
 80085ea:	4413      	add	r3, r2
 80085ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80085f0:	b17a      	cbz	r2, 8008612 <__mdiff+0x106>
 80085f2:	6107      	str	r7, [r0, #16]
 80085f4:	e7a4      	b.n	8008540 <__mdiff+0x34>
 80085f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80085fa:	fa11 f288 	uxtah	r2, r1, r8
 80085fe:	1414      	asrs	r4, r2, #16
 8008600:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008604:	b292      	uxth	r2, r2
 8008606:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800860a:	f84e 2b04 	str.w	r2, [lr], #4
 800860e:	1421      	asrs	r1, r4, #16
 8008610:	e7e0      	b.n	80085d4 <__mdiff+0xc8>
 8008612:	3f01      	subs	r7, #1
 8008614:	e7ea      	b.n	80085ec <__mdiff+0xe0>
 8008616:	bf00      	nop
 8008618:	08009efa 	.word	0x08009efa
 800861c:	08009f0b 	.word	0x08009f0b

08008620 <__d2b>:
 8008620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008624:	460f      	mov	r7, r1
 8008626:	2101      	movs	r1, #1
 8008628:	ec59 8b10 	vmov	r8, r9, d0
 800862c:	4616      	mov	r6, r2
 800862e:	f7ff fcd5 	bl	8007fdc <_Balloc>
 8008632:	4604      	mov	r4, r0
 8008634:	b930      	cbnz	r0, 8008644 <__d2b+0x24>
 8008636:	4602      	mov	r2, r0
 8008638:	4b24      	ldr	r3, [pc, #144]	; (80086cc <__d2b+0xac>)
 800863a:	4825      	ldr	r0, [pc, #148]	; (80086d0 <__d2b+0xb0>)
 800863c:	f240 310f 	movw	r1, #783	; 0x30f
 8008640:	f000 ffe2 	bl	8009608 <__assert_func>
 8008644:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008648:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800864c:	bb2d      	cbnz	r5, 800869a <__d2b+0x7a>
 800864e:	9301      	str	r3, [sp, #4]
 8008650:	f1b8 0300 	subs.w	r3, r8, #0
 8008654:	d026      	beq.n	80086a4 <__d2b+0x84>
 8008656:	4668      	mov	r0, sp
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	f7ff fd87 	bl	800816c <__lo0bits>
 800865e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008662:	b1e8      	cbz	r0, 80086a0 <__d2b+0x80>
 8008664:	f1c0 0320 	rsb	r3, r0, #32
 8008668:	fa02 f303 	lsl.w	r3, r2, r3
 800866c:	430b      	orrs	r3, r1
 800866e:	40c2      	lsrs	r2, r0
 8008670:	6163      	str	r3, [r4, #20]
 8008672:	9201      	str	r2, [sp, #4]
 8008674:	9b01      	ldr	r3, [sp, #4]
 8008676:	61a3      	str	r3, [r4, #24]
 8008678:	2b00      	cmp	r3, #0
 800867a:	bf14      	ite	ne
 800867c:	2202      	movne	r2, #2
 800867e:	2201      	moveq	r2, #1
 8008680:	6122      	str	r2, [r4, #16]
 8008682:	b1bd      	cbz	r5, 80086b4 <__d2b+0x94>
 8008684:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008688:	4405      	add	r5, r0
 800868a:	603d      	str	r5, [r7, #0]
 800868c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008690:	6030      	str	r0, [r6, #0]
 8008692:	4620      	mov	r0, r4
 8008694:	b003      	add	sp, #12
 8008696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800869a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800869e:	e7d6      	b.n	800864e <__d2b+0x2e>
 80086a0:	6161      	str	r1, [r4, #20]
 80086a2:	e7e7      	b.n	8008674 <__d2b+0x54>
 80086a4:	a801      	add	r0, sp, #4
 80086a6:	f7ff fd61 	bl	800816c <__lo0bits>
 80086aa:	9b01      	ldr	r3, [sp, #4]
 80086ac:	6163      	str	r3, [r4, #20]
 80086ae:	3020      	adds	r0, #32
 80086b0:	2201      	movs	r2, #1
 80086b2:	e7e5      	b.n	8008680 <__d2b+0x60>
 80086b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086bc:	6038      	str	r0, [r7, #0]
 80086be:	6918      	ldr	r0, [r3, #16]
 80086c0:	f7ff fd34 	bl	800812c <__hi0bits>
 80086c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086c8:	e7e2      	b.n	8008690 <__d2b+0x70>
 80086ca:	bf00      	nop
 80086cc:	08009efa 	.word	0x08009efa
 80086d0:	08009f0b 	.word	0x08009f0b

080086d4 <__ssputs_r>:
 80086d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d8:	688e      	ldr	r6, [r1, #8]
 80086da:	461f      	mov	r7, r3
 80086dc:	42be      	cmp	r6, r7
 80086de:	680b      	ldr	r3, [r1, #0]
 80086e0:	4682      	mov	sl, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	4690      	mov	r8, r2
 80086e6:	d82c      	bhi.n	8008742 <__ssputs_r+0x6e>
 80086e8:	898a      	ldrh	r2, [r1, #12]
 80086ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086ee:	d026      	beq.n	800873e <__ssputs_r+0x6a>
 80086f0:	6965      	ldr	r5, [r4, #20]
 80086f2:	6909      	ldr	r1, [r1, #16]
 80086f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086f8:	eba3 0901 	sub.w	r9, r3, r1
 80086fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008700:	1c7b      	adds	r3, r7, #1
 8008702:	444b      	add	r3, r9
 8008704:	106d      	asrs	r5, r5, #1
 8008706:	429d      	cmp	r5, r3
 8008708:	bf38      	it	cc
 800870a:	461d      	movcc	r5, r3
 800870c:	0553      	lsls	r3, r2, #21
 800870e:	d527      	bpl.n	8008760 <__ssputs_r+0x8c>
 8008710:	4629      	mov	r1, r5
 8008712:	f7ff fbd7 	bl	8007ec4 <_malloc_r>
 8008716:	4606      	mov	r6, r0
 8008718:	b360      	cbz	r0, 8008774 <__ssputs_r+0xa0>
 800871a:	6921      	ldr	r1, [r4, #16]
 800871c:	464a      	mov	r2, r9
 800871e:	f000 ff65 	bl	80095ec <memcpy>
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872c:	81a3      	strh	r3, [r4, #12]
 800872e:	6126      	str	r6, [r4, #16]
 8008730:	6165      	str	r5, [r4, #20]
 8008732:	444e      	add	r6, r9
 8008734:	eba5 0509 	sub.w	r5, r5, r9
 8008738:	6026      	str	r6, [r4, #0]
 800873a:	60a5      	str	r5, [r4, #8]
 800873c:	463e      	mov	r6, r7
 800873e:	42be      	cmp	r6, r7
 8008740:	d900      	bls.n	8008744 <__ssputs_r+0x70>
 8008742:	463e      	mov	r6, r7
 8008744:	6820      	ldr	r0, [r4, #0]
 8008746:	4632      	mov	r2, r6
 8008748:	4641      	mov	r1, r8
 800874a:	f000 ff02 	bl	8009552 <memmove>
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	1b9b      	subs	r3, r3, r6
 8008752:	60a3      	str	r3, [r4, #8]
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	4433      	add	r3, r6
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	2000      	movs	r0, #0
 800875c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008760:	462a      	mov	r2, r5
 8008762:	f000 ff97 	bl	8009694 <_realloc_r>
 8008766:	4606      	mov	r6, r0
 8008768:	2800      	cmp	r0, #0
 800876a:	d1e0      	bne.n	800872e <__ssputs_r+0x5a>
 800876c:	6921      	ldr	r1, [r4, #16]
 800876e:	4650      	mov	r0, sl
 8008770:	f7ff fb34 	bl	8007ddc <_free_r>
 8008774:	230c      	movs	r3, #12
 8008776:	f8ca 3000 	str.w	r3, [sl]
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008780:	81a3      	strh	r3, [r4, #12]
 8008782:	f04f 30ff 	mov.w	r0, #4294967295
 8008786:	e7e9      	b.n	800875c <__ssputs_r+0x88>

08008788 <_svfiprintf_r>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	4698      	mov	r8, r3
 800878e:	898b      	ldrh	r3, [r1, #12]
 8008790:	061b      	lsls	r3, r3, #24
 8008792:	b09d      	sub	sp, #116	; 0x74
 8008794:	4607      	mov	r7, r0
 8008796:	460d      	mov	r5, r1
 8008798:	4614      	mov	r4, r2
 800879a:	d50e      	bpl.n	80087ba <_svfiprintf_r+0x32>
 800879c:	690b      	ldr	r3, [r1, #16]
 800879e:	b963      	cbnz	r3, 80087ba <_svfiprintf_r+0x32>
 80087a0:	2140      	movs	r1, #64	; 0x40
 80087a2:	f7ff fb8f 	bl	8007ec4 <_malloc_r>
 80087a6:	6028      	str	r0, [r5, #0]
 80087a8:	6128      	str	r0, [r5, #16]
 80087aa:	b920      	cbnz	r0, 80087b6 <_svfiprintf_r+0x2e>
 80087ac:	230c      	movs	r3, #12
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295
 80087b4:	e0d0      	b.n	8008958 <_svfiprintf_r+0x1d0>
 80087b6:	2340      	movs	r3, #64	; 0x40
 80087b8:	616b      	str	r3, [r5, #20]
 80087ba:	2300      	movs	r3, #0
 80087bc:	9309      	str	r3, [sp, #36]	; 0x24
 80087be:	2320      	movs	r3, #32
 80087c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c8:	2330      	movs	r3, #48	; 0x30
 80087ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008970 <_svfiprintf_r+0x1e8>
 80087ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087d2:	f04f 0901 	mov.w	r9, #1
 80087d6:	4623      	mov	r3, r4
 80087d8:	469a      	mov	sl, r3
 80087da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087de:	b10a      	cbz	r2, 80087e4 <_svfiprintf_r+0x5c>
 80087e0:	2a25      	cmp	r2, #37	; 0x25
 80087e2:	d1f9      	bne.n	80087d8 <_svfiprintf_r+0x50>
 80087e4:	ebba 0b04 	subs.w	fp, sl, r4
 80087e8:	d00b      	beq.n	8008802 <_svfiprintf_r+0x7a>
 80087ea:	465b      	mov	r3, fp
 80087ec:	4622      	mov	r2, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	4638      	mov	r0, r7
 80087f2:	f7ff ff6f 	bl	80086d4 <__ssputs_r>
 80087f6:	3001      	adds	r0, #1
 80087f8:	f000 80a9 	beq.w	800894e <_svfiprintf_r+0x1c6>
 80087fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087fe:	445a      	add	r2, fp
 8008800:	9209      	str	r2, [sp, #36]	; 0x24
 8008802:	f89a 3000 	ldrb.w	r3, [sl]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 80a1 	beq.w	800894e <_svfiprintf_r+0x1c6>
 800880c:	2300      	movs	r3, #0
 800880e:	f04f 32ff 	mov.w	r2, #4294967295
 8008812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008816:	f10a 0a01 	add.w	sl, sl, #1
 800881a:	9304      	str	r3, [sp, #16]
 800881c:	9307      	str	r3, [sp, #28]
 800881e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008822:	931a      	str	r3, [sp, #104]	; 0x68
 8008824:	4654      	mov	r4, sl
 8008826:	2205      	movs	r2, #5
 8008828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882c:	4850      	ldr	r0, [pc, #320]	; (8008970 <_svfiprintf_r+0x1e8>)
 800882e:	f7f7 fcff 	bl	8000230 <memchr>
 8008832:	9a04      	ldr	r2, [sp, #16]
 8008834:	b9d8      	cbnz	r0, 800886e <_svfiprintf_r+0xe6>
 8008836:	06d0      	lsls	r0, r2, #27
 8008838:	bf44      	itt	mi
 800883a:	2320      	movmi	r3, #32
 800883c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008840:	0711      	lsls	r1, r2, #28
 8008842:	bf44      	itt	mi
 8008844:	232b      	movmi	r3, #43	; 0x2b
 8008846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800884a:	f89a 3000 	ldrb.w	r3, [sl]
 800884e:	2b2a      	cmp	r3, #42	; 0x2a
 8008850:	d015      	beq.n	800887e <_svfiprintf_r+0xf6>
 8008852:	9a07      	ldr	r2, [sp, #28]
 8008854:	4654      	mov	r4, sl
 8008856:	2000      	movs	r0, #0
 8008858:	f04f 0c0a 	mov.w	ip, #10
 800885c:	4621      	mov	r1, r4
 800885e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008862:	3b30      	subs	r3, #48	; 0x30
 8008864:	2b09      	cmp	r3, #9
 8008866:	d94d      	bls.n	8008904 <_svfiprintf_r+0x17c>
 8008868:	b1b0      	cbz	r0, 8008898 <_svfiprintf_r+0x110>
 800886a:	9207      	str	r2, [sp, #28]
 800886c:	e014      	b.n	8008898 <_svfiprintf_r+0x110>
 800886e:	eba0 0308 	sub.w	r3, r0, r8
 8008872:	fa09 f303 	lsl.w	r3, r9, r3
 8008876:	4313      	orrs	r3, r2
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	46a2      	mov	sl, r4
 800887c:	e7d2      	b.n	8008824 <_svfiprintf_r+0x9c>
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	1d19      	adds	r1, r3, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	9103      	str	r1, [sp, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	bfbb      	ittet	lt
 800888a:	425b      	neglt	r3, r3
 800888c:	f042 0202 	orrlt.w	r2, r2, #2
 8008890:	9307      	strge	r3, [sp, #28]
 8008892:	9307      	strlt	r3, [sp, #28]
 8008894:	bfb8      	it	lt
 8008896:	9204      	strlt	r2, [sp, #16]
 8008898:	7823      	ldrb	r3, [r4, #0]
 800889a:	2b2e      	cmp	r3, #46	; 0x2e
 800889c:	d10c      	bne.n	80088b8 <_svfiprintf_r+0x130>
 800889e:	7863      	ldrb	r3, [r4, #1]
 80088a0:	2b2a      	cmp	r3, #42	; 0x2a
 80088a2:	d134      	bne.n	800890e <_svfiprintf_r+0x186>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	1d1a      	adds	r2, r3, #4
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	9203      	str	r2, [sp, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bfb8      	it	lt
 80088b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80088b4:	3402      	adds	r4, #2
 80088b6:	9305      	str	r3, [sp, #20]
 80088b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008980 <_svfiprintf_r+0x1f8>
 80088bc:	7821      	ldrb	r1, [r4, #0]
 80088be:	2203      	movs	r2, #3
 80088c0:	4650      	mov	r0, sl
 80088c2:	f7f7 fcb5 	bl	8000230 <memchr>
 80088c6:	b138      	cbz	r0, 80088d8 <_svfiprintf_r+0x150>
 80088c8:	9b04      	ldr	r3, [sp, #16]
 80088ca:	eba0 000a 	sub.w	r0, r0, sl
 80088ce:	2240      	movs	r2, #64	; 0x40
 80088d0:	4082      	lsls	r2, r0
 80088d2:	4313      	orrs	r3, r2
 80088d4:	3401      	adds	r4, #1
 80088d6:	9304      	str	r3, [sp, #16]
 80088d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088dc:	4825      	ldr	r0, [pc, #148]	; (8008974 <_svfiprintf_r+0x1ec>)
 80088de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088e2:	2206      	movs	r2, #6
 80088e4:	f7f7 fca4 	bl	8000230 <memchr>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d038      	beq.n	800895e <_svfiprintf_r+0x1d6>
 80088ec:	4b22      	ldr	r3, [pc, #136]	; (8008978 <_svfiprintf_r+0x1f0>)
 80088ee:	bb1b      	cbnz	r3, 8008938 <_svfiprintf_r+0x1b0>
 80088f0:	9b03      	ldr	r3, [sp, #12]
 80088f2:	3307      	adds	r3, #7
 80088f4:	f023 0307 	bic.w	r3, r3, #7
 80088f8:	3308      	adds	r3, #8
 80088fa:	9303      	str	r3, [sp, #12]
 80088fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fe:	4433      	add	r3, r6
 8008900:	9309      	str	r3, [sp, #36]	; 0x24
 8008902:	e768      	b.n	80087d6 <_svfiprintf_r+0x4e>
 8008904:	fb0c 3202 	mla	r2, ip, r2, r3
 8008908:	460c      	mov	r4, r1
 800890a:	2001      	movs	r0, #1
 800890c:	e7a6      	b.n	800885c <_svfiprintf_r+0xd4>
 800890e:	2300      	movs	r3, #0
 8008910:	3401      	adds	r4, #1
 8008912:	9305      	str	r3, [sp, #20]
 8008914:	4619      	mov	r1, r3
 8008916:	f04f 0c0a 	mov.w	ip, #10
 800891a:	4620      	mov	r0, r4
 800891c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008920:	3a30      	subs	r2, #48	; 0x30
 8008922:	2a09      	cmp	r2, #9
 8008924:	d903      	bls.n	800892e <_svfiprintf_r+0x1a6>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0c6      	beq.n	80088b8 <_svfiprintf_r+0x130>
 800892a:	9105      	str	r1, [sp, #20]
 800892c:	e7c4      	b.n	80088b8 <_svfiprintf_r+0x130>
 800892e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008932:	4604      	mov	r4, r0
 8008934:	2301      	movs	r3, #1
 8008936:	e7f0      	b.n	800891a <_svfiprintf_r+0x192>
 8008938:	ab03      	add	r3, sp, #12
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	462a      	mov	r2, r5
 800893e:	4b0f      	ldr	r3, [pc, #60]	; (800897c <_svfiprintf_r+0x1f4>)
 8008940:	a904      	add	r1, sp, #16
 8008942:	4638      	mov	r0, r7
 8008944:	f7fd fd34 	bl	80063b0 <_printf_float>
 8008948:	1c42      	adds	r2, r0, #1
 800894a:	4606      	mov	r6, r0
 800894c:	d1d6      	bne.n	80088fc <_svfiprintf_r+0x174>
 800894e:	89ab      	ldrh	r3, [r5, #12]
 8008950:	065b      	lsls	r3, r3, #25
 8008952:	f53f af2d 	bmi.w	80087b0 <_svfiprintf_r+0x28>
 8008956:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008958:	b01d      	add	sp, #116	; 0x74
 800895a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895e:	ab03      	add	r3, sp, #12
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	462a      	mov	r2, r5
 8008964:	4b05      	ldr	r3, [pc, #20]	; (800897c <_svfiprintf_r+0x1f4>)
 8008966:	a904      	add	r1, sp, #16
 8008968:	4638      	mov	r0, r7
 800896a:	f7fd ffc5 	bl	80068f8 <_printf_i>
 800896e:	e7eb      	b.n	8008948 <_svfiprintf_r+0x1c0>
 8008970:	0800a064 	.word	0x0800a064
 8008974:	0800a06e 	.word	0x0800a06e
 8008978:	080063b1 	.word	0x080063b1
 800897c:	080086d5 	.word	0x080086d5
 8008980:	0800a06a 	.word	0x0800a06a

08008984 <_sungetc_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	1c4b      	adds	r3, r1, #1
 8008988:	4614      	mov	r4, r2
 800898a:	d103      	bne.n	8008994 <_sungetc_r+0x10>
 800898c:	f04f 35ff 	mov.w	r5, #4294967295
 8008990:	4628      	mov	r0, r5
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	8993      	ldrh	r3, [r2, #12]
 8008996:	f023 0320 	bic.w	r3, r3, #32
 800899a:	8193      	strh	r3, [r2, #12]
 800899c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800899e:	6852      	ldr	r2, [r2, #4]
 80089a0:	b2cd      	uxtb	r5, r1
 80089a2:	b18b      	cbz	r3, 80089c8 <_sungetc_r+0x44>
 80089a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089a6:	4293      	cmp	r3, r2
 80089a8:	dd08      	ble.n	80089bc <_sungetc_r+0x38>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	1e5a      	subs	r2, r3, #1
 80089ae:	6022      	str	r2, [r4, #0]
 80089b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80089b4:	6863      	ldr	r3, [r4, #4]
 80089b6:	3301      	adds	r3, #1
 80089b8:	6063      	str	r3, [r4, #4]
 80089ba:	e7e9      	b.n	8008990 <_sungetc_r+0xc>
 80089bc:	4621      	mov	r1, r4
 80089be:	f000 fd8e 	bl	80094de <__submore>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d0f1      	beq.n	80089aa <_sungetc_r+0x26>
 80089c6:	e7e1      	b.n	800898c <_sungetc_r+0x8>
 80089c8:	6921      	ldr	r1, [r4, #16]
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	b151      	cbz	r1, 80089e4 <_sungetc_r+0x60>
 80089ce:	4299      	cmp	r1, r3
 80089d0:	d208      	bcs.n	80089e4 <_sungetc_r+0x60>
 80089d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80089d6:	42a9      	cmp	r1, r5
 80089d8:	d104      	bne.n	80089e4 <_sungetc_r+0x60>
 80089da:	3b01      	subs	r3, #1
 80089dc:	3201      	adds	r2, #1
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	6062      	str	r2, [r4, #4]
 80089e2:	e7d5      	b.n	8008990 <_sungetc_r+0xc>
 80089e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80089e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089ec:	6363      	str	r3, [r4, #52]	; 0x34
 80089ee:	2303      	movs	r3, #3
 80089f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80089f2:	4623      	mov	r3, r4
 80089f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	2301      	movs	r3, #1
 80089fc:	e7dc      	b.n	80089b8 <_sungetc_r+0x34>

080089fe <__ssrefill_r>:
 80089fe:	b510      	push	{r4, lr}
 8008a00:	460c      	mov	r4, r1
 8008a02:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008a04:	b169      	cbz	r1, 8008a22 <__ssrefill_r+0x24>
 8008a06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a0a:	4299      	cmp	r1, r3
 8008a0c:	d001      	beq.n	8008a12 <__ssrefill_r+0x14>
 8008a0e:	f7ff f9e5 	bl	8007ddc <_free_r>
 8008a12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a14:	6063      	str	r3, [r4, #4]
 8008a16:	2000      	movs	r0, #0
 8008a18:	6360      	str	r0, [r4, #52]	; 0x34
 8008a1a:	b113      	cbz	r3, 8008a22 <__ssrefill_r+0x24>
 8008a1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a1e:	6023      	str	r3, [r4, #0]
 8008a20:	bd10      	pop	{r4, pc}
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	2300      	movs	r3, #0
 8008a28:	6063      	str	r3, [r4, #4]
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	f043 0320 	orr.w	r3, r3, #32
 8008a30:	81a3      	strh	r3, [r4, #12]
 8008a32:	f04f 30ff 	mov.w	r0, #4294967295
 8008a36:	e7f3      	b.n	8008a20 <__ssrefill_r+0x22>

08008a38 <__ssvfiscanf_r>:
 8008a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008a42:	2100      	movs	r1, #0
 8008a44:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008a48:	49a6      	ldr	r1, [pc, #664]	; (8008ce4 <__ssvfiscanf_r+0x2ac>)
 8008a4a:	91a0      	str	r1, [sp, #640]	; 0x280
 8008a4c:	f10d 0804 	add.w	r8, sp, #4
 8008a50:	49a5      	ldr	r1, [pc, #660]	; (8008ce8 <__ssvfiscanf_r+0x2b0>)
 8008a52:	4fa6      	ldr	r7, [pc, #664]	; (8008cec <__ssvfiscanf_r+0x2b4>)
 8008a54:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008cf0 <__ssvfiscanf_r+0x2b8>
 8008a58:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	7813      	ldrb	r3, [r2, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 815a 	beq.w	8008d1e <__ssvfiscanf_r+0x2e6>
 8008a6a:	5cf9      	ldrb	r1, [r7, r3]
 8008a6c:	f011 0108 	ands.w	r1, r1, #8
 8008a70:	f102 0501 	add.w	r5, r2, #1
 8008a74:	d019      	beq.n	8008aaa <__ssvfiscanf_r+0x72>
 8008a76:	6863      	ldr	r3, [r4, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	dd0f      	ble.n	8008a9c <__ssvfiscanf_r+0x64>
 8008a7c:	6823      	ldr	r3, [r4, #0]
 8008a7e:	781a      	ldrb	r2, [r3, #0]
 8008a80:	5cba      	ldrb	r2, [r7, r2]
 8008a82:	0712      	lsls	r2, r2, #28
 8008a84:	d401      	bmi.n	8008a8a <__ssvfiscanf_r+0x52>
 8008a86:	462a      	mov	r2, r5
 8008a88:	e7eb      	b.n	8008a62 <__ssvfiscanf_r+0x2a>
 8008a8a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a8c:	3201      	adds	r2, #1
 8008a8e:	9245      	str	r2, [sp, #276]	; 0x114
 8008a90:	6862      	ldr	r2, [r4, #4]
 8008a92:	3301      	adds	r3, #1
 8008a94:	3a01      	subs	r2, #1
 8008a96:	6062      	str	r2, [r4, #4]
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	e7ec      	b.n	8008a76 <__ssvfiscanf_r+0x3e>
 8008a9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	4798      	blx	r3
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d0e9      	beq.n	8008a7c <__ssvfiscanf_r+0x44>
 8008aa8:	e7ed      	b.n	8008a86 <__ssvfiscanf_r+0x4e>
 8008aaa:	2b25      	cmp	r3, #37	; 0x25
 8008aac:	d012      	beq.n	8008ad4 <__ssvfiscanf_r+0x9c>
 8008aae:	469a      	mov	sl, r3
 8008ab0:	6863      	ldr	r3, [r4, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f340 8091 	ble.w	8008bda <__ssvfiscanf_r+0x1a2>
 8008ab8:	6822      	ldr	r2, [r4, #0]
 8008aba:	7813      	ldrb	r3, [r2, #0]
 8008abc:	4553      	cmp	r3, sl
 8008abe:	f040 812e 	bne.w	8008d1e <__ssvfiscanf_r+0x2e6>
 8008ac2:	6863      	ldr	r3, [r4, #4]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	6063      	str	r3, [r4, #4]
 8008ac8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008aca:	3201      	adds	r2, #1
 8008acc:	3301      	adds	r3, #1
 8008ace:	6022      	str	r2, [r4, #0]
 8008ad0:	9345      	str	r3, [sp, #276]	; 0x114
 8008ad2:	e7d8      	b.n	8008a86 <__ssvfiscanf_r+0x4e>
 8008ad4:	9141      	str	r1, [sp, #260]	; 0x104
 8008ad6:	9143      	str	r1, [sp, #268]	; 0x10c
 8008ad8:	7853      	ldrb	r3, [r2, #1]
 8008ada:	2b2a      	cmp	r3, #42	; 0x2a
 8008adc:	bf02      	ittt	eq
 8008ade:	2310      	moveq	r3, #16
 8008ae0:	1c95      	addeq	r5, r2, #2
 8008ae2:	9341      	streq	r3, [sp, #260]	; 0x104
 8008ae4:	220a      	movs	r2, #10
 8008ae6:	46aa      	mov	sl, r5
 8008ae8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008aec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008af0:	2b09      	cmp	r3, #9
 8008af2:	d91c      	bls.n	8008b2e <__ssvfiscanf_r+0xf6>
 8008af4:	487e      	ldr	r0, [pc, #504]	; (8008cf0 <__ssvfiscanf_r+0x2b8>)
 8008af6:	2203      	movs	r2, #3
 8008af8:	f7f7 fb9a 	bl	8000230 <memchr>
 8008afc:	b138      	cbz	r0, 8008b0e <__ssvfiscanf_r+0xd6>
 8008afe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b00:	eba0 0009 	sub.w	r0, r0, r9
 8008b04:	2301      	movs	r3, #1
 8008b06:	4083      	lsls	r3, r0
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	9341      	str	r3, [sp, #260]	; 0x104
 8008b0c:	4655      	mov	r5, sl
 8008b0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b12:	2b78      	cmp	r3, #120	; 0x78
 8008b14:	d806      	bhi.n	8008b24 <__ssvfiscanf_r+0xec>
 8008b16:	2b57      	cmp	r3, #87	; 0x57
 8008b18:	d810      	bhi.n	8008b3c <__ssvfiscanf_r+0x104>
 8008b1a:	2b25      	cmp	r3, #37	; 0x25
 8008b1c:	d0c7      	beq.n	8008aae <__ssvfiscanf_r+0x76>
 8008b1e:	d857      	bhi.n	8008bd0 <__ssvfiscanf_r+0x198>
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d065      	beq.n	8008bf0 <__ssvfiscanf_r+0x1b8>
 8008b24:	2303      	movs	r3, #3
 8008b26:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b28:	230a      	movs	r3, #10
 8008b2a:	9342      	str	r3, [sp, #264]	; 0x108
 8008b2c:	e076      	b.n	8008c1c <__ssvfiscanf_r+0x1e4>
 8008b2e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008b30:	fb02 1103 	mla	r1, r2, r3, r1
 8008b34:	3930      	subs	r1, #48	; 0x30
 8008b36:	9143      	str	r1, [sp, #268]	; 0x10c
 8008b38:	4655      	mov	r5, sl
 8008b3a:	e7d4      	b.n	8008ae6 <__ssvfiscanf_r+0xae>
 8008b3c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008b40:	2a20      	cmp	r2, #32
 8008b42:	d8ef      	bhi.n	8008b24 <__ssvfiscanf_r+0xec>
 8008b44:	a101      	add	r1, pc, #4	; (adr r1, 8008b4c <__ssvfiscanf_r+0x114>)
 8008b46:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b4a:	bf00      	nop
 8008b4c:	08008bff 	.word	0x08008bff
 8008b50:	08008b25 	.word	0x08008b25
 8008b54:	08008b25 	.word	0x08008b25
 8008b58:	08008c5d 	.word	0x08008c5d
 8008b5c:	08008b25 	.word	0x08008b25
 8008b60:	08008b25 	.word	0x08008b25
 8008b64:	08008b25 	.word	0x08008b25
 8008b68:	08008b25 	.word	0x08008b25
 8008b6c:	08008b25 	.word	0x08008b25
 8008b70:	08008b25 	.word	0x08008b25
 8008b74:	08008b25 	.word	0x08008b25
 8008b78:	08008c73 	.word	0x08008c73
 8008b7c:	08008c59 	.word	0x08008c59
 8008b80:	08008bd7 	.word	0x08008bd7
 8008b84:	08008bd7 	.word	0x08008bd7
 8008b88:	08008bd7 	.word	0x08008bd7
 8008b8c:	08008b25 	.word	0x08008b25
 8008b90:	08008c15 	.word	0x08008c15
 8008b94:	08008b25 	.word	0x08008b25
 8008b98:	08008b25 	.word	0x08008b25
 8008b9c:	08008b25 	.word	0x08008b25
 8008ba0:	08008b25 	.word	0x08008b25
 8008ba4:	08008c83 	.word	0x08008c83
 8008ba8:	08008c51 	.word	0x08008c51
 8008bac:	08008bf7 	.word	0x08008bf7
 8008bb0:	08008b25 	.word	0x08008b25
 8008bb4:	08008b25 	.word	0x08008b25
 8008bb8:	08008c7f 	.word	0x08008c7f
 8008bbc:	08008b25 	.word	0x08008b25
 8008bc0:	08008c59 	.word	0x08008c59
 8008bc4:	08008b25 	.word	0x08008b25
 8008bc8:	08008b25 	.word	0x08008b25
 8008bcc:	08008bff 	.word	0x08008bff
 8008bd0:	3b45      	subs	r3, #69	; 0x45
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d8a6      	bhi.n	8008b24 <__ssvfiscanf_r+0xec>
 8008bd6:	2305      	movs	r3, #5
 8008bd8:	e01f      	b.n	8008c1a <__ssvfiscanf_r+0x1e2>
 8008bda:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4630      	mov	r0, r6
 8008be0:	4798      	blx	r3
 8008be2:	2800      	cmp	r0, #0
 8008be4:	f43f af68 	beq.w	8008ab8 <__ssvfiscanf_r+0x80>
 8008be8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008bea:	2800      	cmp	r0, #0
 8008bec:	f040 808d 	bne.w	8008d0a <__ssvfiscanf_r+0x2d2>
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	e08f      	b.n	8008d16 <__ssvfiscanf_r+0x2de>
 8008bf6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008bf8:	f042 0220 	orr.w	r2, r2, #32
 8008bfc:	9241      	str	r2, [sp, #260]	; 0x104
 8008bfe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c04:	9241      	str	r2, [sp, #260]	; 0x104
 8008c06:	2210      	movs	r2, #16
 8008c08:	2b6f      	cmp	r3, #111	; 0x6f
 8008c0a:	9242      	str	r2, [sp, #264]	; 0x108
 8008c0c:	bf34      	ite	cc
 8008c0e:	2303      	movcc	r3, #3
 8008c10:	2304      	movcs	r3, #4
 8008c12:	e002      	b.n	8008c1a <__ssvfiscanf_r+0x1e2>
 8008c14:	2300      	movs	r3, #0
 8008c16:	9342      	str	r3, [sp, #264]	; 0x108
 8008c18:	2303      	movs	r3, #3
 8008c1a:	9347      	str	r3, [sp, #284]	; 0x11c
 8008c1c:	6863      	ldr	r3, [r4, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dd3d      	ble.n	8008c9e <__ssvfiscanf_r+0x266>
 8008c22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c24:	0659      	lsls	r1, r3, #25
 8008c26:	d404      	bmi.n	8008c32 <__ssvfiscanf_r+0x1fa>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	781a      	ldrb	r2, [r3, #0]
 8008c2c:	5cba      	ldrb	r2, [r7, r2]
 8008c2e:	0712      	lsls	r2, r2, #28
 8008c30:	d43c      	bmi.n	8008cac <__ssvfiscanf_r+0x274>
 8008c32:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	dc4b      	bgt.n	8008cd0 <__ssvfiscanf_r+0x298>
 8008c38:	466b      	mov	r3, sp
 8008c3a:	4622      	mov	r2, r4
 8008c3c:	a941      	add	r1, sp, #260	; 0x104
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f000 f9b6 	bl	8008fb0 <_scanf_chars>
 8008c44:	2801      	cmp	r0, #1
 8008c46:	d06a      	beq.n	8008d1e <__ssvfiscanf_r+0x2e6>
 8008c48:	2802      	cmp	r0, #2
 8008c4a:	f47f af1c 	bne.w	8008a86 <__ssvfiscanf_r+0x4e>
 8008c4e:	e7cb      	b.n	8008be8 <__ssvfiscanf_r+0x1b0>
 8008c50:	2308      	movs	r3, #8
 8008c52:	9342      	str	r3, [sp, #264]	; 0x108
 8008c54:	2304      	movs	r3, #4
 8008c56:	e7e0      	b.n	8008c1a <__ssvfiscanf_r+0x1e2>
 8008c58:	220a      	movs	r2, #10
 8008c5a:	e7d5      	b.n	8008c08 <__ssvfiscanf_r+0x1d0>
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4640      	mov	r0, r8
 8008c60:	f000 fc04 	bl	800946c <__sccl>
 8008c64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6a:	9341      	str	r3, [sp, #260]	; 0x104
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e7d3      	b.n	8008c1a <__ssvfiscanf_r+0x1e2>
 8008c72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c78:	9341      	str	r3, [sp, #260]	; 0x104
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e7cd      	b.n	8008c1a <__ssvfiscanf_r+0x1e2>
 8008c7e:	2302      	movs	r3, #2
 8008c80:	e7cb      	b.n	8008c1a <__ssvfiscanf_r+0x1e2>
 8008c82:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008c84:	06c3      	lsls	r3, r0, #27
 8008c86:	f53f aefe 	bmi.w	8008a86 <__ssvfiscanf_r+0x4e>
 8008c8a:	9b00      	ldr	r3, [sp, #0]
 8008c8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c8e:	1d19      	adds	r1, r3, #4
 8008c90:	9100      	str	r1, [sp, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	07c0      	lsls	r0, r0, #31
 8008c96:	bf4c      	ite	mi
 8008c98:	801a      	strhmi	r2, [r3, #0]
 8008c9a:	601a      	strpl	r2, [r3, #0]
 8008c9c:	e6f3      	b.n	8008a86 <__ssvfiscanf_r+0x4e>
 8008c9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	4798      	blx	r3
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d0bb      	beq.n	8008c22 <__ssvfiscanf_r+0x1ea>
 8008caa:	e79d      	b.n	8008be8 <__ssvfiscanf_r+0x1b0>
 8008cac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008cae:	3201      	adds	r2, #1
 8008cb0:	9245      	str	r2, [sp, #276]	; 0x114
 8008cb2:	6862      	ldr	r2, [r4, #4]
 8008cb4:	3a01      	subs	r2, #1
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	6062      	str	r2, [r4, #4]
 8008cba:	dd02      	ble.n	8008cc2 <__ssvfiscanf_r+0x28a>
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	e7b2      	b.n	8008c28 <__ssvfiscanf_r+0x1f0>
 8008cc2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	4798      	blx	r3
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d0ac      	beq.n	8008c28 <__ssvfiscanf_r+0x1f0>
 8008cce:	e78b      	b.n	8008be8 <__ssvfiscanf_r+0x1b0>
 8008cd0:	2b04      	cmp	r3, #4
 8008cd2:	dc0f      	bgt.n	8008cf4 <__ssvfiscanf_r+0x2bc>
 8008cd4:	466b      	mov	r3, sp
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	a941      	add	r1, sp, #260	; 0x104
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f000 f9c2 	bl	8009064 <_scanf_i>
 8008ce0:	e7b0      	b.n	8008c44 <__ssvfiscanf_r+0x20c>
 8008ce2:	bf00      	nop
 8008ce4:	08008985 	.word	0x08008985
 8008ce8:	080089ff 	.word	0x080089ff
 8008cec:	0800a0d7 	.word	0x0800a0d7
 8008cf0:	0800a06a 	.word	0x0800a06a
 8008cf4:	4b0b      	ldr	r3, [pc, #44]	; (8008d24 <__ssvfiscanf_r+0x2ec>)
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f43f aec5 	beq.w	8008a86 <__ssvfiscanf_r+0x4e>
 8008cfc:	466b      	mov	r3, sp
 8008cfe:	4622      	mov	r2, r4
 8008d00:	a941      	add	r1, sp, #260	; 0x104
 8008d02:	4630      	mov	r0, r6
 8008d04:	f3af 8000 	nop.w
 8008d08:	e79c      	b.n	8008c44 <__ssvfiscanf_r+0x20c>
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d10:	bf18      	it	ne
 8008d12:	f04f 30ff 	movne.w	r0, #4294967295
 8008d16:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008d20:	e7f9      	b.n	8008d16 <__ssvfiscanf_r+0x2de>
 8008d22:	bf00      	nop
 8008d24:	00000000 	.word	0x00000000

08008d28 <__sfputc_r>:
 8008d28:	6893      	ldr	r3, [r2, #8]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	b410      	push	{r4}
 8008d30:	6093      	str	r3, [r2, #8]
 8008d32:	da08      	bge.n	8008d46 <__sfputc_r+0x1e>
 8008d34:	6994      	ldr	r4, [r2, #24]
 8008d36:	42a3      	cmp	r3, r4
 8008d38:	db01      	blt.n	8008d3e <__sfputc_r+0x16>
 8008d3a:	290a      	cmp	r1, #10
 8008d3c:	d103      	bne.n	8008d46 <__sfputc_r+0x1e>
 8008d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d42:	f7fe b8bc 	b.w	8006ebe <__swbuf_r>
 8008d46:	6813      	ldr	r3, [r2, #0]
 8008d48:	1c58      	adds	r0, r3, #1
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	7019      	strb	r1, [r3, #0]
 8008d4e:	4608      	mov	r0, r1
 8008d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <__sfputs_r>:
 8008d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d58:	4606      	mov	r6, r0
 8008d5a:	460f      	mov	r7, r1
 8008d5c:	4614      	mov	r4, r2
 8008d5e:	18d5      	adds	r5, r2, r3
 8008d60:	42ac      	cmp	r4, r5
 8008d62:	d101      	bne.n	8008d68 <__sfputs_r+0x12>
 8008d64:	2000      	movs	r0, #0
 8008d66:	e007      	b.n	8008d78 <__sfputs_r+0x22>
 8008d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d6c:	463a      	mov	r2, r7
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f7ff ffda 	bl	8008d28 <__sfputc_r>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d1f3      	bne.n	8008d60 <__sfputs_r+0xa>
 8008d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d7c <_vfiprintf_r>:
 8008d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d80:	460d      	mov	r5, r1
 8008d82:	b09d      	sub	sp, #116	; 0x74
 8008d84:	4614      	mov	r4, r2
 8008d86:	4698      	mov	r8, r3
 8008d88:	4606      	mov	r6, r0
 8008d8a:	b118      	cbz	r0, 8008d94 <_vfiprintf_r+0x18>
 8008d8c:	6a03      	ldr	r3, [r0, #32]
 8008d8e:	b90b      	cbnz	r3, 8008d94 <_vfiprintf_r+0x18>
 8008d90:	f7fd ff60 	bl	8006c54 <__sinit>
 8008d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d96:	07d9      	lsls	r1, r3, #31
 8008d98:	d405      	bmi.n	8008da6 <_vfiprintf_r+0x2a>
 8008d9a:	89ab      	ldrh	r3, [r5, #12]
 8008d9c:	059a      	lsls	r2, r3, #22
 8008d9e:	d402      	bmi.n	8008da6 <_vfiprintf_r+0x2a>
 8008da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008da2:	f7fe f99e 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8008da6:	89ab      	ldrh	r3, [r5, #12]
 8008da8:	071b      	lsls	r3, r3, #28
 8008daa:	d501      	bpl.n	8008db0 <_vfiprintf_r+0x34>
 8008dac:	692b      	ldr	r3, [r5, #16]
 8008dae:	b99b      	cbnz	r3, 8008dd8 <_vfiprintf_r+0x5c>
 8008db0:	4629      	mov	r1, r5
 8008db2:	4630      	mov	r0, r6
 8008db4:	f7fe f8c0 	bl	8006f38 <__swsetup_r>
 8008db8:	b170      	cbz	r0, 8008dd8 <_vfiprintf_r+0x5c>
 8008dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dbc:	07dc      	lsls	r4, r3, #31
 8008dbe:	d504      	bpl.n	8008dca <_vfiprintf_r+0x4e>
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc4:	b01d      	add	sp, #116	; 0x74
 8008dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dca:	89ab      	ldrh	r3, [r5, #12]
 8008dcc:	0598      	lsls	r0, r3, #22
 8008dce:	d4f7      	bmi.n	8008dc0 <_vfiprintf_r+0x44>
 8008dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dd2:	f7fe f987 	bl	80070e4 <__retarget_lock_release_recursive>
 8008dd6:	e7f3      	b.n	8008dc0 <_vfiprintf_r+0x44>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	9309      	str	r3, [sp, #36]	; 0x24
 8008ddc:	2320      	movs	r3, #32
 8008dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008de6:	2330      	movs	r3, #48	; 0x30
 8008de8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008f9c <_vfiprintf_r+0x220>
 8008dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008df0:	f04f 0901 	mov.w	r9, #1
 8008df4:	4623      	mov	r3, r4
 8008df6:	469a      	mov	sl, r3
 8008df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dfc:	b10a      	cbz	r2, 8008e02 <_vfiprintf_r+0x86>
 8008dfe:	2a25      	cmp	r2, #37	; 0x25
 8008e00:	d1f9      	bne.n	8008df6 <_vfiprintf_r+0x7a>
 8008e02:	ebba 0b04 	subs.w	fp, sl, r4
 8008e06:	d00b      	beq.n	8008e20 <_vfiprintf_r+0xa4>
 8008e08:	465b      	mov	r3, fp
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f7ff ffa1 	bl	8008d56 <__sfputs_r>
 8008e14:	3001      	adds	r0, #1
 8008e16:	f000 80a9 	beq.w	8008f6c <_vfiprintf_r+0x1f0>
 8008e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e1c:	445a      	add	r2, fp
 8008e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8008e20:	f89a 3000 	ldrb.w	r3, [sl]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 80a1 	beq.w	8008f6c <_vfiprintf_r+0x1f0>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e34:	f10a 0a01 	add.w	sl, sl, #1
 8008e38:	9304      	str	r3, [sp, #16]
 8008e3a:	9307      	str	r3, [sp, #28]
 8008e3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e40:	931a      	str	r3, [sp, #104]	; 0x68
 8008e42:	4654      	mov	r4, sl
 8008e44:	2205      	movs	r2, #5
 8008e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e4a:	4854      	ldr	r0, [pc, #336]	; (8008f9c <_vfiprintf_r+0x220>)
 8008e4c:	f7f7 f9f0 	bl	8000230 <memchr>
 8008e50:	9a04      	ldr	r2, [sp, #16]
 8008e52:	b9d8      	cbnz	r0, 8008e8c <_vfiprintf_r+0x110>
 8008e54:	06d1      	lsls	r1, r2, #27
 8008e56:	bf44      	itt	mi
 8008e58:	2320      	movmi	r3, #32
 8008e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e5e:	0713      	lsls	r3, r2, #28
 8008e60:	bf44      	itt	mi
 8008e62:	232b      	movmi	r3, #43	; 0x2b
 8008e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e68:	f89a 3000 	ldrb.w	r3, [sl]
 8008e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e6e:	d015      	beq.n	8008e9c <_vfiprintf_r+0x120>
 8008e70:	9a07      	ldr	r2, [sp, #28]
 8008e72:	4654      	mov	r4, sl
 8008e74:	2000      	movs	r0, #0
 8008e76:	f04f 0c0a 	mov.w	ip, #10
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e80:	3b30      	subs	r3, #48	; 0x30
 8008e82:	2b09      	cmp	r3, #9
 8008e84:	d94d      	bls.n	8008f22 <_vfiprintf_r+0x1a6>
 8008e86:	b1b0      	cbz	r0, 8008eb6 <_vfiprintf_r+0x13a>
 8008e88:	9207      	str	r2, [sp, #28]
 8008e8a:	e014      	b.n	8008eb6 <_vfiprintf_r+0x13a>
 8008e8c:	eba0 0308 	sub.w	r3, r0, r8
 8008e90:	fa09 f303 	lsl.w	r3, r9, r3
 8008e94:	4313      	orrs	r3, r2
 8008e96:	9304      	str	r3, [sp, #16]
 8008e98:	46a2      	mov	sl, r4
 8008e9a:	e7d2      	b.n	8008e42 <_vfiprintf_r+0xc6>
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	1d19      	adds	r1, r3, #4
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	9103      	str	r1, [sp, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	bfbb      	ittet	lt
 8008ea8:	425b      	neglt	r3, r3
 8008eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8008eae:	9307      	strge	r3, [sp, #28]
 8008eb0:	9307      	strlt	r3, [sp, #28]
 8008eb2:	bfb8      	it	lt
 8008eb4:	9204      	strlt	r2, [sp, #16]
 8008eb6:	7823      	ldrb	r3, [r4, #0]
 8008eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8008eba:	d10c      	bne.n	8008ed6 <_vfiprintf_r+0x15a>
 8008ebc:	7863      	ldrb	r3, [r4, #1]
 8008ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8008ec0:	d134      	bne.n	8008f2c <_vfiprintf_r+0x1b0>
 8008ec2:	9b03      	ldr	r3, [sp, #12]
 8008ec4:	1d1a      	adds	r2, r3, #4
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	9203      	str	r2, [sp, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	bfb8      	it	lt
 8008ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ed2:	3402      	adds	r4, #2
 8008ed4:	9305      	str	r3, [sp, #20]
 8008ed6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008fac <_vfiprintf_r+0x230>
 8008eda:	7821      	ldrb	r1, [r4, #0]
 8008edc:	2203      	movs	r2, #3
 8008ede:	4650      	mov	r0, sl
 8008ee0:	f7f7 f9a6 	bl	8000230 <memchr>
 8008ee4:	b138      	cbz	r0, 8008ef6 <_vfiprintf_r+0x17a>
 8008ee6:	9b04      	ldr	r3, [sp, #16]
 8008ee8:	eba0 000a 	sub.w	r0, r0, sl
 8008eec:	2240      	movs	r2, #64	; 0x40
 8008eee:	4082      	lsls	r2, r0
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	3401      	adds	r4, #1
 8008ef4:	9304      	str	r3, [sp, #16]
 8008ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008efa:	4829      	ldr	r0, [pc, #164]	; (8008fa0 <_vfiprintf_r+0x224>)
 8008efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f00:	2206      	movs	r2, #6
 8008f02:	f7f7 f995 	bl	8000230 <memchr>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d03f      	beq.n	8008f8a <_vfiprintf_r+0x20e>
 8008f0a:	4b26      	ldr	r3, [pc, #152]	; (8008fa4 <_vfiprintf_r+0x228>)
 8008f0c:	bb1b      	cbnz	r3, 8008f56 <_vfiprintf_r+0x1da>
 8008f0e:	9b03      	ldr	r3, [sp, #12]
 8008f10:	3307      	adds	r3, #7
 8008f12:	f023 0307 	bic.w	r3, r3, #7
 8008f16:	3308      	adds	r3, #8
 8008f18:	9303      	str	r3, [sp, #12]
 8008f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f1c:	443b      	add	r3, r7
 8008f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f20:	e768      	b.n	8008df4 <_vfiprintf_r+0x78>
 8008f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f26:	460c      	mov	r4, r1
 8008f28:	2001      	movs	r0, #1
 8008f2a:	e7a6      	b.n	8008e7a <_vfiprintf_r+0xfe>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	3401      	adds	r4, #1
 8008f30:	9305      	str	r3, [sp, #20]
 8008f32:	4619      	mov	r1, r3
 8008f34:	f04f 0c0a 	mov.w	ip, #10
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f3e:	3a30      	subs	r2, #48	; 0x30
 8008f40:	2a09      	cmp	r2, #9
 8008f42:	d903      	bls.n	8008f4c <_vfiprintf_r+0x1d0>
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d0c6      	beq.n	8008ed6 <_vfiprintf_r+0x15a>
 8008f48:	9105      	str	r1, [sp, #20]
 8008f4a:	e7c4      	b.n	8008ed6 <_vfiprintf_r+0x15a>
 8008f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f50:	4604      	mov	r4, r0
 8008f52:	2301      	movs	r3, #1
 8008f54:	e7f0      	b.n	8008f38 <_vfiprintf_r+0x1bc>
 8008f56:	ab03      	add	r3, sp, #12
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	462a      	mov	r2, r5
 8008f5c:	4b12      	ldr	r3, [pc, #72]	; (8008fa8 <_vfiprintf_r+0x22c>)
 8008f5e:	a904      	add	r1, sp, #16
 8008f60:	4630      	mov	r0, r6
 8008f62:	f7fd fa25 	bl	80063b0 <_printf_float>
 8008f66:	4607      	mov	r7, r0
 8008f68:	1c78      	adds	r0, r7, #1
 8008f6a:	d1d6      	bne.n	8008f1a <_vfiprintf_r+0x19e>
 8008f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f6e:	07d9      	lsls	r1, r3, #31
 8008f70:	d405      	bmi.n	8008f7e <_vfiprintf_r+0x202>
 8008f72:	89ab      	ldrh	r3, [r5, #12]
 8008f74:	059a      	lsls	r2, r3, #22
 8008f76:	d402      	bmi.n	8008f7e <_vfiprintf_r+0x202>
 8008f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f7a:	f7fe f8b3 	bl	80070e4 <__retarget_lock_release_recursive>
 8008f7e:	89ab      	ldrh	r3, [r5, #12]
 8008f80:	065b      	lsls	r3, r3, #25
 8008f82:	f53f af1d 	bmi.w	8008dc0 <_vfiprintf_r+0x44>
 8008f86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f88:	e71c      	b.n	8008dc4 <_vfiprintf_r+0x48>
 8008f8a:	ab03      	add	r3, sp, #12
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	462a      	mov	r2, r5
 8008f90:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <_vfiprintf_r+0x22c>)
 8008f92:	a904      	add	r1, sp, #16
 8008f94:	4630      	mov	r0, r6
 8008f96:	f7fd fcaf 	bl	80068f8 <_printf_i>
 8008f9a:	e7e4      	b.n	8008f66 <_vfiprintf_r+0x1ea>
 8008f9c:	0800a064 	.word	0x0800a064
 8008fa0:	0800a06e 	.word	0x0800a06e
 8008fa4:	080063b1 	.word	0x080063b1
 8008fa8:	08008d57 	.word	0x08008d57
 8008fac:	0800a06a 	.word	0x0800a06a

08008fb0 <_scanf_chars>:
 8008fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb4:	4615      	mov	r5, r2
 8008fb6:	688a      	ldr	r2, [r1, #8]
 8008fb8:	4680      	mov	r8, r0
 8008fba:	460c      	mov	r4, r1
 8008fbc:	b932      	cbnz	r2, 8008fcc <_scanf_chars+0x1c>
 8008fbe:	698a      	ldr	r2, [r1, #24]
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	bf0c      	ite	eq
 8008fc4:	2201      	moveq	r2, #1
 8008fc6:	f04f 32ff 	movne.w	r2, #4294967295
 8008fca:	608a      	str	r2, [r1, #8]
 8008fcc:	6822      	ldr	r2, [r4, #0]
 8008fce:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009060 <_scanf_chars+0xb0>
 8008fd2:	06d1      	lsls	r1, r2, #27
 8008fd4:	bf5f      	itttt	pl
 8008fd6:	681a      	ldrpl	r2, [r3, #0]
 8008fd8:	1d11      	addpl	r1, r2, #4
 8008fda:	6019      	strpl	r1, [r3, #0]
 8008fdc:	6816      	ldrpl	r6, [r2, #0]
 8008fde:	2700      	movs	r7, #0
 8008fe0:	69a0      	ldr	r0, [r4, #24]
 8008fe2:	b188      	cbz	r0, 8009008 <_scanf_chars+0x58>
 8008fe4:	2801      	cmp	r0, #1
 8008fe6:	d107      	bne.n	8008ff8 <_scanf_chars+0x48>
 8008fe8:	682a      	ldr	r2, [r5, #0]
 8008fea:	7811      	ldrb	r1, [r2, #0]
 8008fec:	6962      	ldr	r2, [r4, #20]
 8008fee:	5c52      	ldrb	r2, [r2, r1]
 8008ff0:	b952      	cbnz	r2, 8009008 <_scanf_chars+0x58>
 8008ff2:	2f00      	cmp	r7, #0
 8008ff4:	d031      	beq.n	800905a <_scanf_chars+0xaa>
 8008ff6:	e022      	b.n	800903e <_scanf_chars+0x8e>
 8008ff8:	2802      	cmp	r0, #2
 8008ffa:	d120      	bne.n	800903e <_scanf_chars+0x8e>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009004:	071b      	lsls	r3, r3, #28
 8009006:	d41a      	bmi.n	800903e <_scanf_chars+0x8e>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	06da      	lsls	r2, r3, #27
 800900c:	bf5e      	ittt	pl
 800900e:	682b      	ldrpl	r3, [r5, #0]
 8009010:	781b      	ldrbpl	r3, [r3, #0]
 8009012:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009016:	682a      	ldr	r2, [r5, #0]
 8009018:	686b      	ldr	r3, [r5, #4]
 800901a:	3201      	adds	r2, #1
 800901c:	602a      	str	r2, [r5, #0]
 800901e:	68a2      	ldr	r2, [r4, #8]
 8009020:	3b01      	subs	r3, #1
 8009022:	3a01      	subs	r2, #1
 8009024:	606b      	str	r3, [r5, #4]
 8009026:	3701      	adds	r7, #1
 8009028:	60a2      	str	r2, [r4, #8]
 800902a:	b142      	cbz	r2, 800903e <_scanf_chars+0x8e>
 800902c:	2b00      	cmp	r3, #0
 800902e:	dcd7      	bgt.n	8008fe0 <_scanf_chars+0x30>
 8009030:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009034:	4629      	mov	r1, r5
 8009036:	4640      	mov	r0, r8
 8009038:	4798      	blx	r3
 800903a:	2800      	cmp	r0, #0
 800903c:	d0d0      	beq.n	8008fe0 <_scanf_chars+0x30>
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	f013 0310 	ands.w	r3, r3, #16
 8009044:	d105      	bne.n	8009052 <_scanf_chars+0xa2>
 8009046:	68e2      	ldr	r2, [r4, #12]
 8009048:	3201      	adds	r2, #1
 800904a:	60e2      	str	r2, [r4, #12]
 800904c:	69a2      	ldr	r2, [r4, #24]
 800904e:	b102      	cbz	r2, 8009052 <_scanf_chars+0xa2>
 8009050:	7033      	strb	r3, [r6, #0]
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	443b      	add	r3, r7
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	2000      	movs	r0, #0
 800905a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800905e:	bf00      	nop
 8009060:	0800a0d7 	.word	0x0800a0d7

08009064 <_scanf_i>:
 8009064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	4698      	mov	r8, r3
 800906a:	4b74      	ldr	r3, [pc, #464]	; (800923c <_scanf_i+0x1d8>)
 800906c:	460c      	mov	r4, r1
 800906e:	4682      	mov	sl, r0
 8009070:	4616      	mov	r6, r2
 8009072:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009076:	b087      	sub	sp, #28
 8009078:	ab03      	add	r3, sp, #12
 800907a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800907e:	4b70      	ldr	r3, [pc, #448]	; (8009240 <_scanf_i+0x1dc>)
 8009080:	69a1      	ldr	r1, [r4, #24]
 8009082:	4a70      	ldr	r2, [pc, #448]	; (8009244 <_scanf_i+0x1e0>)
 8009084:	2903      	cmp	r1, #3
 8009086:	bf18      	it	ne
 8009088:	461a      	movne	r2, r3
 800908a:	68a3      	ldr	r3, [r4, #8]
 800908c:	9201      	str	r2, [sp, #4]
 800908e:	1e5a      	subs	r2, r3, #1
 8009090:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009094:	bf88      	it	hi
 8009096:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800909a:	4627      	mov	r7, r4
 800909c:	bf82      	ittt	hi
 800909e:	eb03 0905 	addhi.w	r9, r3, r5
 80090a2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80090a6:	60a3      	strhi	r3, [r4, #8]
 80090a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80090ac:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80090b0:	bf98      	it	ls
 80090b2:	f04f 0900 	movls.w	r9, #0
 80090b6:	6023      	str	r3, [r4, #0]
 80090b8:	463d      	mov	r5, r7
 80090ba:	f04f 0b00 	mov.w	fp, #0
 80090be:	6831      	ldr	r1, [r6, #0]
 80090c0:	ab03      	add	r3, sp, #12
 80090c2:	7809      	ldrb	r1, [r1, #0]
 80090c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80090c8:	2202      	movs	r2, #2
 80090ca:	f7f7 f8b1 	bl	8000230 <memchr>
 80090ce:	b328      	cbz	r0, 800911c <_scanf_i+0xb8>
 80090d0:	f1bb 0f01 	cmp.w	fp, #1
 80090d4:	d159      	bne.n	800918a <_scanf_i+0x126>
 80090d6:	6862      	ldr	r2, [r4, #4]
 80090d8:	b92a      	cbnz	r2, 80090e6 <_scanf_i+0x82>
 80090da:	6822      	ldr	r2, [r4, #0]
 80090dc:	2308      	movs	r3, #8
 80090de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090e2:	6063      	str	r3, [r4, #4]
 80090e4:	6022      	str	r2, [r4, #0]
 80090e6:	6822      	ldr	r2, [r4, #0]
 80090e8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80090ec:	6022      	str	r2, [r4, #0]
 80090ee:	68a2      	ldr	r2, [r4, #8]
 80090f0:	1e51      	subs	r1, r2, #1
 80090f2:	60a1      	str	r1, [r4, #8]
 80090f4:	b192      	cbz	r2, 800911c <_scanf_i+0xb8>
 80090f6:	6832      	ldr	r2, [r6, #0]
 80090f8:	1c51      	adds	r1, r2, #1
 80090fa:	6031      	str	r1, [r6, #0]
 80090fc:	7812      	ldrb	r2, [r2, #0]
 80090fe:	f805 2b01 	strb.w	r2, [r5], #1
 8009102:	6872      	ldr	r2, [r6, #4]
 8009104:	3a01      	subs	r2, #1
 8009106:	2a00      	cmp	r2, #0
 8009108:	6072      	str	r2, [r6, #4]
 800910a:	dc07      	bgt.n	800911c <_scanf_i+0xb8>
 800910c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009110:	4631      	mov	r1, r6
 8009112:	4650      	mov	r0, sl
 8009114:	4790      	blx	r2
 8009116:	2800      	cmp	r0, #0
 8009118:	f040 8085 	bne.w	8009226 <_scanf_i+0x1c2>
 800911c:	f10b 0b01 	add.w	fp, fp, #1
 8009120:	f1bb 0f03 	cmp.w	fp, #3
 8009124:	d1cb      	bne.n	80090be <_scanf_i+0x5a>
 8009126:	6863      	ldr	r3, [r4, #4]
 8009128:	b90b      	cbnz	r3, 800912e <_scanf_i+0xca>
 800912a:	230a      	movs	r3, #10
 800912c:	6063      	str	r3, [r4, #4]
 800912e:	6863      	ldr	r3, [r4, #4]
 8009130:	4945      	ldr	r1, [pc, #276]	; (8009248 <_scanf_i+0x1e4>)
 8009132:	6960      	ldr	r0, [r4, #20]
 8009134:	1ac9      	subs	r1, r1, r3
 8009136:	f000 f999 	bl	800946c <__sccl>
 800913a:	f04f 0b00 	mov.w	fp, #0
 800913e:	68a3      	ldr	r3, [r4, #8]
 8009140:	6822      	ldr	r2, [r4, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d03d      	beq.n	80091c2 <_scanf_i+0x15e>
 8009146:	6831      	ldr	r1, [r6, #0]
 8009148:	6960      	ldr	r0, [r4, #20]
 800914a:	f891 c000 	ldrb.w	ip, [r1]
 800914e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009152:	2800      	cmp	r0, #0
 8009154:	d035      	beq.n	80091c2 <_scanf_i+0x15e>
 8009156:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800915a:	d124      	bne.n	80091a6 <_scanf_i+0x142>
 800915c:	0510      	lsls	r0, r2, #20
 800915e:	d522      	bpl.n	80091a6 <_scanf_i+0x142>
 8009160:	f10b 0b01 	add.w	fp, fp, #1
 8009164:	f1b9 0f00 	cmp.w	r9, #0
 8009168:	d003      	beq.n	8009172 <_scanf_i+0x10e>
 800916a:	3301      	adds	r3, #1
 800916c:	f109 39ff 	add.w	r9, r9, #4294967295
 8009170:	60a3      	str	r3, [r4, #8]
 8009172:	6873      	ldr	r3, [r6, #4]
 8009174:	3b01      	subs	r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	6073      	str	r3, [r6, #4]
 800917a:	dd1b      	ble.n	80091b4 <_scanf_i+0x150>
 800917c:	6833      	ldr	r3, [r6, #0]
 800917e:	3301      	adds	r3, #1
 8009180:	6033      	str	r3, [r6, #0]
 8009182:	68a3      	ldr	r3, [r4, #8]
 8009184:	3b01      	subs	r3, #1
 8009186:	60a3      	str	r3, [r4, #8]
 8009188:	e7d9      	b.n	800913e <_scanf_i+0xda>
 800918a:	f1bb 0f02 	cmp.w	fp, #2
 800918e:	d1ae      	bne.n	80090ee <_scanf_i+0x8a>
 8009190:	6822      	ldr	r2, [r4, #0]
 8009192:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009196:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800919a:	d1bf      	bne.n	800911c <_scanf_i+0xb8>
 800919c:	2310      	movs	r3, #16
 800919e:	6063      	str	r3, [r4, #4]
 80091a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091a4:	e7a2      	b.n	80090ec <_scanf_i+0x88>
 80091a6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80091aa:	6022      	str	r2, [r4, #0]
 80091ac:	780b      	ldrb	r3, [r1, #0]
 80091ae:	f805 3b01 	strb.w	r3, [r5], #1
 80091b2:	e7de      	b.n	8009172 <_scanf_i+0x10e>
 80091b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091b8:	4631      	mov	r1, r6
 80091ba:	4650      	mov	r0, sl
 80091bc:	4798      	blx	r3
 80091be:	2800      	cmp	r0, #0
 80091c0:	d0df      	beq.n	8009182 <_scanf_i+0x11e>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	05d9      	lsls	r1, r3, #23
 80091c6:	d50d      	bpl.n	80091e4 <_scanf_i+0x180>
 80091c8:	42bd      	cmp	r5, r7
 80091ca:	d909      	bls.n	80091e0 <_scanf_i+0x17c>
 80091cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80091d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091d4:	4632      	mov	r2, r6
 80091d6:	4650      	mov	r0, sl
 80091d8:	4798      	blx	r3
 80091da:	f105 39ff 	add.w	r9, r5, #4294967295
 80091de:	464d      	mov	r5, r9
 80091e0:	42bd      	cmp	r5, r7
 80091e2:	d028      	beq.n	8009236 <_scanf_i+0x1d2>
 80091e4:	6822      	ldr	r2, [r4, #0]
 80091e6:	f012 0210 	ands.w	r2, r2, #16
 80091ea:	d113      	bne.n	8009214 <_scanf_i+0x1b0>
 80091ec:	702a      	strb	r2, [r5, #0]
 80091ee:	6863      	ldr	r3, [r4, #4]
 80091f0:	9e01      	ldr	r6, [sp, #4]
 80091f2:	4639      	mov	r1, r7
 80091f4:	4650      	mov	r0, sl
 80091f6:	47b0      	blx	r6
 80091f8:	f8d8 3000 	ldr.w	r3, [r8]
 80091fc:	6821      	ldr	r1, [r4, #0]
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	f8c8 2000 	str.w	r2, [r8]
 8009204:	f011 0f20 	tst.w	r1, #32
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	d00f      	beq.n	800922c <_scanf_i+0x1c8>
 800920c:	6018      	str	r0, [r3, #0]
 800920e:	68e3      	ldr	r3, [r4, #12]
 8009210:	3301      	adds	r3, #1
 8009212:	60e3      	str	r3, [r4, #12]
 8009214:	6923      	ldr	r3, [r4, #16]
 8009216:	1bed      	subs	r5, r5, r7
 8009218:	445d      	add	r5, fp
 800921a:	442b      	add	r3, r5
 800921c:	6123      	str	r3, [r4, #16]
 800921e:	2000      	movs	r0, #0
 8009220:	b007      	add	sp, #28
 8009222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009226:	f04f 0b00 	mov.w	fp, #0
 800922a:	e7ca      	b.n	80091c2 <_scanf_i+0x15e>
 800922c:	07ca      	lsls	r2, r1, #31
 800922e:	bf4c      	ite	mi
 8009230:	8018      	strhmi	r0, [r3, #0]
 8009232:	6018      	strpl	r0, [r3, #0]
 8009234:	e7eb      	b.n	800920e <_scanf_i+0x1aa>
 8009236:	2001      	movs	r0, #1
 8009238:	e7f2      	b.n	8009220 <_scanf_i+0x1bc>
 800923a:	bf00      	nop
 800923c:	08009e28 	.word	0x08009e28
 8009240:	080098e1 	.word	0x080098e1
 8009244:	080097f9 	.word	0x080097f9
 8009248:	0800a085 	.word	0x0800a085

0800924c <__sflush_r>:
 800924c:	898a      	ldrh	r2, [r1, #12]
 800924e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009252:	4605      	mov	r5, r0
 8009254:	0710      	lsls	r0, r2, #28
 8009256:	460c      	mov	r4, r1
 8009258:	d458      	bmi.n	800930c <__sflush_r+0xc0>
 800925a:	684b      	ldr	r3, [r1, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	dc05      	bgt.n	800926c <__sflush_r+0x20>
 8009260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009262:	2b00      	cmp	r3, #0
 8009264:	dc02      	bgt.n	800926c <__sflush_r+0x20>
 8009266:	2000      	movs	r0, #0
 8009268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800926c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800926e:	2e00      	cmp	r6, #0
 8009270:	d0f9      	beq.n	8009266 <__sflush_r+0x1a>
 8009272:	2300      	movs	r3, #0
 8009274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009278:	682f      	ldr	r7, [r5, #0]
 800927a:	6a21      	ldr	r1, [r4, #32]
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	d032      	beq.n	80092e6 <__sflush_r+0x9a>
 8009280:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	075a      	lsls	r2, r3, #29
 8009286:	d505      	bpl.n	8009294 <__sflush_r+0x48>
 8009288:	6863      	ldr	r3, [r4, #4]
 800928a:	1ac0      	subs	r0, r0, r3
 800928c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800928e:	b10b      	cbz	r3, 8009294 <__sflush_r+0x48>
 8009290:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009292:	1ac0      	subs	r0, r0, r3
 8009294:	2300      	movs	r3, #0
 8009296:	4602      	mov	r2, r0
 8009298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800929a:	6a21      	ldr	r1, [r4, #32]
 800929c:	4628      	mov	r0, r5
 800929e:	47b0      	blx	r6
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	d106      	bne.n	80092b4 <__sflush_r+0x68>
 80092a6:	6829      	ldr	r1, [r5, #0]
 80092a8:	291d      	cmp	r1, #29
 80092aa:	d82b      	bhi.n	8009304 <__sflush_r+0xb8>
 80092ac:	4a29      	ldr	r2, [pc, #164]	; (8009354 <__sflush_r+0x108>)
 80092ae:	410a      	asrs	r2, r1
 80092b0:	07d6      	lsls	r6, r2, #31
 80092b2:	d427      	bmi.n	8009304 <__sflush_r+0xb8>
 80092b4:	2200      	movs	r2, #0
 80092b6:	6062      	str	r2, [r4, #4]
 80092b8:	04d9      	lsls	r1, r3, #19
 80092ba:	6922      	ldr	r2, [r4, #16]
 80092bc:	6022      	str	r2, [r4, #0]
 80092be:	d504      	bpl.n	80092ca <__sflush_r+0x7e>
 80092c0:	1c42      	adds	r2, r0, #1
 80092c2:	d101      	bne.n	80092c8 <__sflush_r+0x7c>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b903      	cbnz	r3, 80092ca <__sflush_r+0x7e>
 80092c8:	6560      	str	r0, [r4, #84]	; 0x54
 80092ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092cc:	602f      	str	r7, [r5, #0]
 80092ce:	2900      	cmp	r1, #0
 80092d0:	d0c9      	beq.n	8009266 <__sflush_r+0x1a>
 80092d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092d6:	4299      	cmp	r1, r3
 80092d8:	d002      	beq.n	80092e0 <__sflush_r+0x94>
 80092da:	4628      	mov	r0, r5
 80092dc:	f7fe fd7e 	bl	8007ddc <_free_r>
 80092e0:	2000      	movs	r0, #0
 80092e2:	6360      	str	r0, [r4, #52]	; 0x34
 80092e4:	e7c0      	b.n	8009268 <__sflush_r+0x1c>
 80092e6:	2301      	movs	r3, #1
 80092e8:	4628      	mov	r0, r5
 80092ea:	47b0      	blx	r6
 80092ec:	1c41      	adds	r1, r0, #1
 80092ee:	d1c8      	bne.n	8009282 <__sflush_r+0x36>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0c5      	beq.n	8009282 <__sflush_r+0x36>
 80092f6:	2b1d      	cmp	r3, #29
 80092f8:	d001      	beq.n	80092fe <__sflush_r+0xb2>
 80092fa:	2b16      	cmp	r3, #22
 80092fc:	d101      	bne.n	8009302 <__sflush_r+0xb6>
 80092fe:	602f      	str	r7, [r5, #0]
 8009300:	e7b1      	b.n	8009266 <__sflush_r+0x1a>
 8009302:	89a3      	ldrh	r3, [r4, #12]
 8009304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009308:	81a3      	strh	r3, [r4, #12]
 800930a:	e7ad      	b.n	8009268 <__sflush_r+0x1c>
 800930c:	690f      	ldr	r7, [r1, #16]
 800930e:	2f00      	cmp	r7, #0
 8009310:	d0a9      	beq.n	8009266 <__sflush_r+0x1a>
 8009312:	0793      	lsls	r3, r2, #30
 8009314:	680e      	ldr	r6, [r1, #0]
 8009316:	bf08      	it	eq
 8009318:	694b      	ldreq	r3, [r1, #20]
 800931a:	600f      	str	r7, [r1, #0]
 800931c:	bf18      	it	ne
 800931e:	2300      	movne	r3, #0
 8009320:	eba6 0807 	sub.w	r8, r6, r7
 8009324:	608b      	str	r3, [r1, #8]
 8009326:	f1b8 0f00 	cmp.w	r8, #0
 800932a:	dd9c      	ble.n	8009266 <__sflush_r+0x1a>
 800932c:	6a21      	ldr	r1, [r4, #32]
 800932e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009330:	4643      	mov	r3, r8
 8009332:	463a      	mov	r2, r7
 8009334:	4628      	mov	r0, r5
 8009336:	47b0      	blx	r6
 8009338:	2800      	cmp	r0, #0
 800933a:	dc06      	bgt.n	800934a <__sflush_r+0xfe>
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	e78e      	b.n	8009268 <__sflush_r+0x1c>
 800934a:	4407      	add	r7, r0
 800934c:	eba8 0800 	sub.w	r8, r8, r0
 8009350:	e7e9      	b.n	8009326 <__sflush_r+0xda>
 8009352:	bf00      	nop
 8009354:	dfbffffe 	.word	0xdfbffffe

08009358 <_fflush_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	690b      	ldr	r3, [r1, #16]
 800935c:	4605      	mov	r5, r0
 800935e:	460c      	mov	r4, r1
 8009360:	b913      	cbnz	r3, 8009368 <_fflush_r+0x10>
 8009362:	2500      	movs	r5, #0
 8009364:	4628      	mov	r0, r5
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	b118      	cbz	r0, 8009372 <_fflush_r+0x1a>
 800936a:	6a03      	ldr	r3, [r0, #32]
 800936c:	b90b      	cbnz	r3, 8009372 <_fflush_r+0x1a>
 800936e:	f7fd fc71 	bl	8006c54 <__sinit>
 8009372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0f3      	beq.n	8009362 <_fflush_r+0xa>
 800937a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800937c:	07d0      	lsls	r0, r2, #31
 800937e:	d404      	bmi.n	800938a <_fflush_r+0x32>
 8009380:	0599      	lsls	r1, r3, #22
 8009382:	d402      	bmi.n	800938a <_fflush_r+0x32>
 8009384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009386:	f7fd feac 	bl	80070e2 <__retarget_lock_acquire_recursive>
 800938a:	4628      	mov	r0, r5
 800938c:	4621      	mov	r1, r4
 800938e:	f7ff ff5d 	bl	800924c <__sflush_r>
 8009392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009394:	07da      	lsls	r2, r3, #31
 8009396:	4605      	mov	r5, r0
 8009398:	d4e4      	bmi.n	8009364 <_fflush_r+0xc>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	059b      	lsls	r3, r3, #22
 800939e:	d4e1      	bmi.n	8009364 <_fflush_r+0xc>
 80093a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093a2:	f7fd fe9f 	bl	80070e4 <__retarget_lock_release_recursive>
 80093a6:	e7dd      	b.n	8009364 <_fflush_r+0xc>

080093a8 <__swhatbuf_r>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	460c      	mov	r4, r1
 80093ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b0:	2900      	cmp	r1, #0
 80093b2:	b096      	sub	sp, #88	; 0x58
 80093b4:	4615      	mov	r5, r2
 80093b6:	461e      	mov	r6, r3
 80093b8:	da0d      	bge.n	80093d6 <__swhatbuf_r+0x2e>
 80093ba:	89a3      	ldrh	r3, [r4, #12]
 80093bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80093c0:	f04f 0100 	mov.w	r1, #0
 80093c4:	bf0c      	ite	eq
 80093c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80093ca:	2340      	movne	r3, #64	; 0x40
 80093cc:	2000      	movs	r0, #0
 80093ce:	6031      	str	r1, [r6, #0]
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	b016      	add	sp, #88	; 0x58
 80093d4:	bd70      	pop	{r4, r5, r6, pc}
 80093d6:	466a      	mov	r2, sp
 80093d8:	f000 f8d6 	bl	8009588 <_fstat_r>
 80093dc:	2800      	cmp	r0, #0
 80093de:	dbec      	blt.n	80093ba <__swhatbuf_r+0x12>
 80093e0:	9901      	ldr	r1, [sp, #4]
 80093e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80093e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80093ea:	4259      	negs	r1, r3
 80093ec:	4159      	adcs	r1, r3
 80093ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093f2:	e7eb      	b.n	80093cc <__swhatbuf_r+0x24>

080093f4 <__smakebuf_r>:
 80093f4:	898b      	ldrh	r3, [r1, #12]
 80093f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093f8:	079d      	lsls	r5, r3, #30
 80093fa:	4606      	mov	r6, r0
 80093fc:	460c      	mov	r4, r1
 80093fe:	d507      	bpl.n	8009410 <__smakebuf_r+0x1c>
 8009400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	6123      	str	r3, [r4, #16]
 8009408:	2301      	movs	r3, #1
 800940a:	6163      	str	r3, [r4, #20]
 800940c:	b002      	add	sp, #8
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	ab01      	add	r3, sp, #4
 8009412:	466a      	mov	r2, sp
 8009414:	f7ff ffc8 	bl	80093a8 <__swhatbuf_r>
 8009418:	9900      	ldr	r1, [sp, #0]
 800941a:	4605      	mov	r5, r0
 800941c:	4630      	mov	r0, r6
 800941e:	f7fe fd51 	bl	8007ec4 <_malloc_r>
 8009422:	b948      	cbnz	r0, 8009438 <__smakebuf_r+0x44>
 8009424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009428:	059a      	lsls	r2, r3, #22
 800942a:	d4ef      	bmi.n	800940c <__smakebuf_r+0x18>
 800942c:	f023 0303 	bic.w	r3, r3, #3
 8009430:	f043 0302 	orr.w	r3, r3, #2
 8009434:	81a3      	strh	r3, [r4, #12]
 8009436:	e7e3      	b.n	8009400 <__smakebuf_r+0xc>
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	6020      	str	r0, [r4, #0]
 800943c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	9b00      	ldr	r3, [sp, #0]
 8009444:	6163      	str	r3, [r4, #20]
 8009446:	9b01      	ldr	r3, [sp, #4]
 8009448:	6120      	str	r0, [r4, #16]
 800944a:	b15b      	cbz	r3, 8009464 <__smakebuf_r+0x70>
 800944c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009450:	4630      	mov	r0, r6
 8009452:	f000 f8ab 	bl	80095ac <_isatty_r>
 8009456:	b128      	cbz	r0, 8009464 <__smakebuf_r+0x70>
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	f023 0303 	bic.w	r3, r3, #3
 800945e:	f043 0301 	orr.w	r3, r3, #1
 8009462:	81a3      	strh	r3, [r4, #12]
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	431d      	orrs	r5, r3
 8009468:	81a5      	strh	r5, [r4, #12]
 800946a:	e7cf      	b.n	800940c <__smakebuf_r+0x18>

0800946c <__sccl>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	780b      	ldrb	r3, [r1, #0]
 8009470:	4604      	mov	r4, r0
 8009472:	2b5e      	cmp	r3, #94	; 0x5e
 8009474:	bf0b      	itete	eq
 8009476:	784b      	ldrbeq	r3, [r1, #1]
 8009478:	1c4a      	addne	r2, r1, #1
 800947a:	1c8a      	addeq	r2, r1, #2
 800947c:	2100      	movne	r1, #0
 800947e:	bf08      	it	eq
 8009480:	2101      	moveq	r1, #1
 8009482:	3801      	subs	r0, #1
 8009484:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009488:	f800 1f01 	strb.w	r1, [r0, #1]!
 800948c:	42a8      	cmp	r0, r5
 800948e:	d1fb      	bne.n	8009488 <__sccl+0x1c>
 8009490:	b90b      	cbnz	r3, 8009496 <__sccl+0x2a>
 8009492:	1e50      	subs	r0, r2, #1
 8009494:	bd70      	pop	{r4, r5, r6, pc}
 8009496:	f081 0101 	eor.w	r1, r1, #1
 800949a:	54e1      	strb	r1, [r4, r3]
 800949c:	4610      	mov	r0, r2
 800949e:	4602      	mov	r2, r0
 80094a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80094a4:	2d2d      	cmp	r5, #45	; 0x2d
 80094a6:	d005      	beq.n	80094b4 <__sccl+0x48>
 80094a8:	2d5d      	cmp	r5, #93	; 0x5d
 80094aa:	d016      	beq.n	80094da <__sccl+0x6e>
 80094ac:	2d00      	cmp	r5, #0
 80094ae:	d0f1      	beq.n	8009494 <__sccl+0x28>
 80094b0:	462b      	mov	r3, r5
 80094b2:	e7f2      	b.n	800949a <__sccl+0x2e>
 80094b4:	7846      	ldrb	r6, [r0, #1]
 80094b6:	2e5d      	cmp	r6, #93	; 0x5d
 80094b8:	d0fa      	beq.n	80094b0 <__sccl+0x44>
 80094ba:	42b3      	cmp	r3, r6
 80094bc:	dcf8      	bgt.n	80094b0 <__sccl+0x44>
 80094be:	3002      	adds	r0, #2
 80094c0:	461a      	mov	r2, r3
 80094c2:	3201      	adds	r2, #1
 80094c4:	4296      	cmp	r6, r2
 80094c6:	54a1      	strb	r1, [r4, r2]
 80094c8:	dcfb      	bgt.n	80094c2 <__sccl+0x56>
 80094ca:	1af2      	subs	r2, r6, r3
 80094cc:	3a01      	subs	r2, #1
 80094ce:	1c5d      	adds	r5, r3, #1
 80094d0:	42b3      	cmp	r3, r6
 80094d2:	bfa8      	it	ge
 80094d4:	2200      	movge	r2, #0
 80094d6:	18ab      	adds	r3, r5, r2
 80094d8:	e7e1      	b.n	800949e <__sccl+0x32>
 80094da:	4610      	mov	r0, r2
 80094dc:	e7da      	b.n	8009494 <__sccl+0x28>

080094de <__submore>:
 80094de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e2:	460c      	mov	r4, r1
 80094e4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80094e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094ea:	4299      	cmp	r1, r3
 80094ec:	d11d      	bne.n	800952a <__submore+0x4c>
 80094ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80094f2:	f7fe fce7 	bl	8007ec4 <_malloc_r>
 80094f6:	b918      	cbnz	r0, 8009500 <__submore+0x22>
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009504:	63a3      	str	r3, [r4, #56]	; 0x38
 8009506:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800950a:	6360      	str	r0, [r4, #52]	; 0x34
 800950c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009510:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009514:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009518:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800951c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009520:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009524:	6020      	str	r0, [r4, #0]
 8009526:	2000      	movs	r0, #0
 8009528:	e7e8      	b.n	80094fc <__submore+0x1e>
 800952a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800952c:	0077      	lsls	r7, r6, #1
 800952e:	463a      	mov	r2, r7
 8009530:	f000 f8b0 	bl	8009694 <_realloc_r>
 8009534:	4605      	mov	r5, r0
 8009536:	2800      	cmp	r0, #0
 8009538:	d0de      	beq.n	80094f8 <__submore+0x1a>
 800953a:	eb00 0806 	add.w	r8, r0, r6
 800953e:	4601      	mov	r1, r0
 8009540:	4632      	mov	r2, r6
 8009542:	4640      	mov	r0, r8
 8009544:	f000 f852 	bl	80095ec <memcpy>
 8009548:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800954c:	f8c4 8000 	str.w	r8, [r4]
 8009550:	e7e9      	b.n	8009526 <__submore+0x48>

08009552 <memmove>:
 8009552:	4288      	cmp	r0, r1
 8009554:	b510      	push	{r4, lr}
 8009556:	eb01 0402 	add.w	r4, r1, r2
 800955a:	d902      	bls.n	8009562 <memmove+0x10>
 800955c:	4284      	cmp	r4, r0
 800955e:	4623      	mov	r3, r4
 8009560:	d807      	bhi.n	8009572 <memmove+0x20>
 8009562:	1e43      	subs	r3, r0, #1
 8009564:	42a1      	cmp	r1, r4
 8009566:	d008      	beq.n	800957a <memmove+0x28>
 8009568:	f811 2b01 	ldrb.w	r2, [r1], #1
 800956c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009570:	e7f8      	b.n	8009564 <memmove+0x12>
 8009572:	4402      	add	r2, r0
 8009574:	4601      	mov	r1, r0
 8009576:	428a      	cmp	r2, r1
 8009578:	d100      	bne.n	800957c <memmove+0x2a>
 800957a:	bd10      	pop	{r4, pc}
 800957c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009580:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009584:	e7f7      	b.n	8009576 <memmove+0x24>
	...

08009588 <_fstat_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d07      	ldr	r5, [pc, #28]	; (80095a8 <_fstat_r+0x20>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	4611      	mov	r1, r2
 8009594:	602b      	str	r3, [r5, #0]
 8009596:	f7f9 f8ce 	bl	8002736 <_fstat>
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	d102      	bne.n	80095a4 <_fstat_r+0x1c>
 800959e:	682b      	ldr	r3, [r5, #0]
 80095a0:	b103      	cbz	r3, 80095a4 <_fstat_r+0x1c>
 80095a2:	6023      	str	r3, [r4, #0]
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	bf00      	nop
 80095a8:	20000598 	.word	0x20000598

080095ac <_isatty_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4d06      	ldr	r5, [pc, #24]	; (80095c8 <_isatty_r+0x1c>)
 80095b0:	2300      	movs	r3, #0
 80095b2:	4604      	mov	r4, r0
 80095b4:	4608      	mov	r0, r1
 80095b6:	602b      	str	r3, [r5, #0]
 80095b8:	f7f9 f8cd 	bl	8002756 <_isatty>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d102      	bne.n	80095c6 <_isatty_r+0x1a>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	b103      	cbz	r3, 80095c6 <_isatty_r+0x1a>
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	20000598 	.word	0x20000598

080095cc <_sbrk_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d06      	ldr	r5, [pc, #24]	; (80095e8 <_sbrk_r+0x1c>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	f7f9 f8d6 	bl	8002788 <_sbrk>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_sbrk_r+0x1a>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_sbrk_r+0x1a>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	20000598 	.word	0x20000598

080095ec <memcpy>:
 80095ec:	440a      	add	r2, r1
 80095ee:	4291      	cmp	r1, r2
 80095f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095f4:	d100      	bne.n	80095f8 <memcpy+0xc>
 80095f6:	4770      	bx	lr
 80095f8:	b510      	push	{r4, lr}
 80095fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009602:	4291      	cmp	r1, r2
 8009604:	d1f9      	bne.n	80095fa <memcpy+0xe>
 8009606:	bd10      	pop	{r4, pc}

08009608 <__assert_func>:
 8009608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800960a:	4614      	mov	r4, r2
 800960c:	461a      	mov	r2, r3
 800960e:	4b09      	ldr	r3, [pc, #36]	; (8009634 <__assert_func+0x2c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4605      	mov	r5, r0
 8009614:	68d8      	ldr	r0, [r3, #12]
 8009616:	b14c      	cbz	r4, 800962c <__assert_func+0x24>
 8009618:	4b07      	ldr	r3, [pc, #28]	; (8009638 <__assert_func+0x30>)
 800961a:	9100      	str	r1, [sp, #0]
 800961c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009620:	4906      	ldr	r1, [pc, #24]	; (800963c <__assert_func+0x34>)
 8009622:	462b      	mov	r3, r5
 8009624:	f000 f96c 	bl	8009900 <fiprintf>
 8009628:	f000 f97c 	bl	8009924 <abort>
 800962c:	4b04      	ldr	r3, [pc, #16]	; (8009640 <__assert_func+0x38>)
 800962e:	461c      	mov	r4, r3
 8009630:	e7f3      	b.n	800961a <__assert_func+0x12>
 8009632:	bf00      	nop
 8009634:	20000070 	.word	0x20000070
 8009638:	0800a09a 	.word	0x0800a09a
 800963c:	0800a0a7 	.word	0x0800a0a7
 8009640:	0800a0d5 	.word	0x0800a0d5

08009644 <_calloc_r>:
 8009644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009646:	fba1 2402 	umull	r2, r4, r1, r2
 800964a:	b94c      	cbnz	r4, 8009660 <_calloc_r+0x1c>
 800964c:	4611      	mov	r1, r2
 800964e:	9201      	str	r2, [sp, #4]
 8009650:	f7fe fc38 	bl	8007ec4 <_malloc_r>
 8009654:	9a01      	ldr	r2, [sp, #4]
 8009656:	4605      	mov	r5, r0
 8009658:	b930      	cbnz	r0, 8009668 <_calloc_r+0x24>
 800965a:	4628      	mov	r0, r5
 800965c:	b003      	add	sp, #12
 800965e:	bd30      	pop	{r4, r5, pc}
 8009660:	220c      	movs	r2, #12
 8009662:	6002      	str	r2, [r0, #0]
 8009664:	2500      	movs	r5, #0
 8009666:	e7f8      	b.n	800965a <_calloc_r+0x16>
 8009668:	4621      	mov	r1, r4
 800966a:	f7fd fcbd 	bl	8006fe8 <memset>
 800966e:	e7f4      	b.n	800965a <_calloc_r+0x16>

08009670 <__ascii_mbtowc>:
 8009670:	b082      	sub	sp, #8
 8009672:	b901      	cbnz	r1, 8009676 <__ascii_mbtowc+0x6>
 8009674:	a901      	add	r1, sp, #4
 8009676:	b142      	cbz	r2, 800968a <__ascii_mbtowc+0x1a>
 8009678:	b14b      	cbz	r3, 800968e <__ascii_mbtowc+0x1e>
 800967a:	7813      	ldrb	r3, [r2, #0]
 800967c:	600b      	str	r3, [r1, #0]
 800967e:	7812      	ldrb	r2, [r2, #0]
 8009680:	1e10      	subs	r0, r2, #0
 8009682:	bf18      	it	ne
 8009684:	2001      	movne	r0, #1
 8009686:	b002      	add	sp, #8
 8009688:	4770      	bx	lr
 800968a:	4610      	mov	r0, r2
 800968c:	e7fb      	b.n	8009686 <__ascii_mbtowc+0x16>
 800968e:	f06f 0001 	mvn.w	r0, #1
 8009692:	e7f8      	b.n	8009686 <__ascii_mbtowc+0x16>

08009694 <_realloc_r>:
 8009694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009698:	4680      	mov	r8, r0
 800969a:	4614      	mov	r4, r2
 800969c:	460e      	mov	r6, r1
 800969e:	b921      	cbnz	r1, 80096aa <_realloc_r+0x16>
 80096a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096a4:	4611      	mov	r1, r2
 80096a6:	f7fe bc0d 	b.w	8007ec4 <_malloc_r>
 80096aa:	b92a      	cbnz	r2, 80096b8 <_realloc_r+0x24>
 80096ac:	f7fe fb96 	bl	8007ddc <_free_r>
 80096b0:	4625      	mov	r5, r4
 80096b2:	4628      	mov	r0, r5
 80096b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b8:	f000 f93b 	bl	8009932 <_malloc_usable_size_r>
 80096bc:	4284      	cmp	r4, r0
 80096be:	4607      	mov	r7, r0
 80096c0:	d802      	bhi.n	80096c8 <_realloc_r+0x34>
 80096c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096c6:	d812      	bhi.n	80096ee <_realloc_r+0x5a>
 80096c8:	4621      	mov	r1, r4
 80096ca:	4640      	mov	r0, r8
 80096cc:	f7fe fbfa 	bl	8007ec4 <_malloc_r>
 80096d0:	4605      	mov	r5, r0
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d0ed      	beq.n	80096b2 <_realloc_r+0x1e>
 80096d6:	42bc      	cmp	r4, r7
 80096d8:	4622      	mov	r2, r4
 80096da:	4631      	mov	r1, r6
 80096dc:	bf28      	it	cs
 80096de:	463a      	movcs	r2, r7
 80096e0:	f7ff ff84 	bl	80095ec <memcpy>
 80096e4:	4631      	mov	r1, r6
 80096e6:	4640      	mov	r0, r8
 80096e8:	f7fe fb78 	bl	8007ddc <_free_r>
 80096ec:	e7e1      	b.n	80096b2 <_realloc_r+0x1e>
 80096ee:	4635      	mov	r5, r6
 80096f0:	e7df      	b.n	80096b2 <_realloc_r+0x1e>
	...

080096f4 <_strtol_l.constprop.0>:
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fa:	d001      	beq.n	8009700 <_strtol_l.constprop.0+0xc>
 80096fc:	2b24      	cmp	r3, #36	; 0x24
 80096fe:	d906      	bls.n	800970e <_strtol_l.constprop.0+0x1a>
 8009700:	f7fd fcc4 	bl	800708c <__errno>
 8009704:	2316      	movs	r3, #22
 8009706:	6003      	str	r3, [r0, #0]
 8009708:	2000      	movs	r0, #0
 800970a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80097f4 <_strtol_l.constprop.0+0x100>
 8009712:	460d      	mov	r5, r1
 8009714:	462e      	mov	r6, r5
 8009716:	f815 4b01 	ldrb.w	r4, [r5], #1
 800971a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800971e:	f017 0708 	ands.w	r7, r7, #8
 8009722:	d1f7      	bne.n	8009714 <_strtol_l.constprop.0+0x20>
 8009724:	2c2d      	cmp	r4, #45	; 0x2d
 8009726:	d132      	bne.n	800978e <_strtol_l.constprop.0+0x9a>
 8009728:	782c      	ldrb	r4, [r5, #0]
 800972a:	2701      	movs	r7, #1
 800972c:	1cb5      	adds	r5, r6, #2
 800972e:	2b00      	cmp	r3, #0
 8009730:	d05b      	beq.n	80097ea <_strtol_l.constprop.0+0xf6>
 8009732:	2b10      	cmp	r3, #16
 8009734:	d109      	bne.n	800974a <_strtol_l.constprop.0+0x56>
 8009736:	2c30      	cmp	r4, #48	; 0x30
 8009738:	d107      	bne.n	800974a <_strtol_l.constprop.0+0x56>
 800973a:	782c      	ldrb	r4, [r5, #0]
 800973c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009740:	2c58      	cmp	r4, #88	; 0x58
 8009742:	d14d      	bne.n	80097e0 <_strtol_l.constprop.0+0xec>
 8009744:	786c      	ldrb	r4, [r5, #1]
 8009746:	2310      	movs	r3, #16
 8009748:	3502      	adds	r5, #2
 800974a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800974e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009752:	f04f 0e00 	mov.w	lr, #0
 8009756:	fbb8 f9f3 	udiv	r9, r8, r3
 800975a:	4676      	mov	r6, lr
 800975c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009760:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009764:	f1bc 0f09 	cmp.w	ip, #9
 8009768:	d816      	bhi.n	8009798 <_strtol_l.constprop.0+0xa4>
 800976a:	4664      	mov	r4, ip
 800976c:	42a3      	cmp	r3, r4
 800976e:	dd24      	ble.n	80097ba <_strtol_l.constprop.0+0xc6>
 8009770:	f1be 3fff 	cmp.w	lr, #4294967295
 8009774:	d008      	beq.n	8009788 <_strtol_l.constprop.0+0x94>
 8009776:	45b1      	cmp	r9, r6
 8009778:	d31c      	bcc.n	80097b4 <_strtol_l.constprop.0+0xc0>
 800977a:	d101      	bne.n	8009780 <_strtol_l.constprop.0+0x8c>
 800977c:	45a2      	cmp	sl, r4
 800977e:	db19      	blt.n	80097b4 <_strtol_l.constprop.0+0xc0>
 8009780:	fb06 4603 	mla	r6, r6, r3, r4
 8009784:	f04f 0e01 	mov.w	lr, #1
 8009788:	f815 4b01 	ldrb.w	r4, [r5], #1
 800978c:	e7e8      	b.n	8009760 <_strtol_l.constprop.0+0x6c>
 800978e:	2c2b      	cmp	r4, #43	; 0x2b
 8009790:	bf04      	itt	eq
 8009792:	782c      	ldrbeq	r4, [r5, #0]
 8009794:	1cb5      	addeq	r5, r6, #2
 8009796:	e7ca      	b.n	800972e <_strtol_l.constprop.0+0x3a>
 8009798:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800979c:	f1bc 0f19 	cmp.w	ip, #25
 80097a0:	d801      	bhi.n	80097a6 <_strtol_l.constprop.0+0xb2>
 80097a2:	3c37      	subs	r4, #55	; 0x37
 80097a4:	e7e2      	b.n	800976c <_strtol_l.constprop.0+0x78>
 80097a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80097aa:	f1bc 0f19 	cmp.w	ip, #25
 80097ae:	d804      	bhi.n	80097ba <_strtol_l.constprop.0+0xc6>
 80097b0:	3c57      	subs	r4, #87	; 0x57
 80097b2:	e7db      	b.n	800976c <_strtol_l.constprop.0+0x78>
 80097b4:	f04f 3eff 	mov.w	lr, #4294967295
 80097b8:	e7e6      	b.n	8009788 <_strtol_l.constprop.0+0x94>
 80097ba:	f1be 3fff 	cmp.w	lr, #4294967295
 80097be:	d105      	bne.n	80097cc <_strtol_l.constprop.0+0xd8>
 80097c0:	2322      	movs	r3, #34	; 0x22
 80097c2:	6003      	str	r3, [r0, #0]
 80097c4:	4646      	mov	r6, r8
 80097c6:	b942      	cbnz	r2, 80097da <_strtol_l.constprop.0+0xe6>
 80097c8:	4630      	mov	r0, r6
 80097ca:	e79e      	b.n	800970a <_strtol_l.constprop.0+0x16>
 80097cc:	b107      	cbz	r7, 80097d0 <_strtol_l.constprop.0+0xdc>
 80097ce:	4276      	negs	r6, r6
 80097d0:	2a00      	cmp	r2, #0
 80097d2:	d0f9      	beq.n	80097c8 <_strtol_l.constprop.0+0xd4>
 80097d4:	f1be 0f00 	cmp.w	lr, #0
 80097d8:	d000      	beq.n	80097dc <_strtol_l.constprop.0+0xe8>
 80097da:	1e69      	subs	r1, r5, #1
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	e7f3      	b.n	80097c8 <_strtol_l.constprop.0+0xd4>
 80097e0:	2430      	movs	r4, #48	; 0x30
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1b1      	bne.n	800974a <_strtol_l.constprop.0+0x56>
 80097e6:	2308      	movs	r3, #8
 80097e8:	e7af      	b.n	800974a <_strtol_l.constprop.0+0x56>
 80097ea:	2c30      	cmp	r4, #48	; 0x30
 80097ec:	d0a5      	beq.n	800973a <_strtol_l.constprop.0+0x46>
 80097ee:	230a      	movs	r3, #10
 80097f0:	e7ab      	b.n	800974a <_strtol_l.constprop.0+0x56>
 80097f2:	bf00      	nop
 80097f4:	0800a0d7 	.word	0x0800a0d7

080097f8 <_strtol_r>:
 80097f8:	f7ff bf7c 	b.w	80096f4 <_strtol_l.constprop.0>

080097fc <_strtoul_l.constprop.0>:
 80097fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009800:	4f36      	ldr	r7, [pc, #216]	; (80098dc <_strtoul_l.constprop.0+0xe0>)
 8009802:	4686      	mov	lr, r0
 8009804:	460d      	mov	r5, r1
 8009806:	4628      	mov	r0, r5
 8009808:	f815 4b01 	ldrb.w	r4, [r5], #1
 800980c:	5d3e      	ldrb	r6, [r7, r4]
 800980e:	f016 0608 	ands.w	r6, r6, #8
 8009812:	d1f8      	bne.n	8009806 <_strtoul_l.constprop.0+0xa>
 8009814:	2c2d      	cmp	r4, #45	; 0x2d
 8009816:	d130      	bne.n	800987a <_strtoul_l.constprop.0+0x7e>
 8009818:	782c      	ldrb	r4, [r5, #0]
 800981a:	2601      	movs	r6, #1
 800981c:	1c85      	adds	r5, r0, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d057      	beq.n	80098d2 <_strtoul_l.constprop.0+0xd6>
 8009822:	2b10      	cmp	r3, #16
 8009824:	d109      	bne.n	800983a <_strtoul_l.constprop.0+0x3e>
 8009826:	2c30      	cmp	r4, #48	; 0x30
 8009828:	d107      	bne.n	800983a <_strtoul_l.constprop.0+0x3e>
 800982a:	7828      	ldrb	r0, [r5, #0]
 800982c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009830:	2858      	cmp	r0, #88	; 0x58
 8009832:	d149      	bne.n	80098c8 <_strtoul_l.constprop.0+0xcc>
 8009834:	786c      	ldrb	r4, [r5, #1]
 8009836:	2310      	movs	r3, #16
 8009838:	3502      	adds	r5, #2
 800983a:	f04f 38ff 	mov.w	r8, #4294967295
 800983e:	2700      	movs	r7, #0
 8009840:	fbb8 f8f3 	udiv	r8, r8, r3
 8009844:	fb03 f908 	mul.w	r9, r3, r8
 8009848:	ea6f 0909 	mvn.w	r9, r9
 800984c:	4638      	mov	r0, r7
 800984e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009852:	f1bc 0f09 	cmp.w	ip, #9
 8009856:	d815      	bhi.n	8009884 <_strtoul_l.constprop.0+0x88>
 8009858:	4664      	mov	r4, ip
 800985a:	42a3      	cmp	r3, r4
 800985c:	dd23      	ble.n	80098a6 <_strtoul_l.constprop.0+0xaa>
 800985e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009862:	d007      	beq.n	8009874 <_strtoul_l.constprop.0+0x78>
 8009864:	4580      	cmp	r8, r0
 8009866:	d31b      	bcc.n	80098a0 <_strtoul_l.constprop.0+0xa4>
 8009868:	d101      	bne.n	800986e <_strtoul_l.constprop.0+0x72>
 800986a:	45a1      	cmp	r9, r4
 800986c:	db18      	blt.n	80098a0 <_strtoul_l.constprop.0+0xa4>
 800986e:	fb00 4003 	mla	r0, r0, r3, r4
 8009872:	2701      	movs	r7, #1
 8009874:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009878:	e7e9      	b.n	800984e <_strtoul_l.constprop.0+0x52>
 800987a:	2c2b      	cmp	r4, #43	; 0x2b
 800987c:	bf04      	itt	eq
 800987e:	782c      	ldrbeq	r4, [r5, #0]
 8009880:	1c85      	addeq	r5, r0, #2
 8009882:	e7cc      	b.n	800981e <_strtoul_l.constprop.0+0x22>
 8009884:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009888:	f1bc 0f19 	cmp.w	ip, #25
 800988c:	d801      	bhi.n	8009892 <_strtoul_l.constprop.0+0x96>
 800988e:	3c37      	subs	r4, #55	; 0x37
 8009890:	e7e3      	b.n	800985a <_strtoul_l.constprop.0+0x5e>
 8009892:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009896:	f1bc 0f19 	cmp.w	ip, #25
 800989a:	d804      	bhi.n	80098a6 <_strtoul_l.constprop.0+0xaa>
 800989c:	3c57      	subs	r4, #87	; 0x57
 800989e:	e7dc      	b.n	800985a <_strtoul_l.constprop.0+0x5e>
 80098a0:	f04f 37ff 	mov.w	r7, #4294967295
 80098a4:	e7e6      	b.n	8009874 <_strtoul_l.constprop.0+0x78>
 80098a6:	1c7b      	adds	r3, r7, #1
 80098a8:	d106      	bne.n	80098b8 <_strtoul_l.constprop.0+0xbc>
 80098aa:	2322      	movs	r3, #34	; 0x22
 80098ac:	f8ce 3000 	str.w	r3, [lr]
 80098b0:	4638      	mov	r0, r7
 80098b2:	b932      	cbnz	r2, 80098c2 <_strtoul_l.constprop.0+0xc6>
 80098b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098b8:	b106      	cbz	r6, 80098bc <_strtoul_l.constprop.0+0xc0>
 80098ba:	4240      	negs	r0, r0
 80098bc:	2a00      	cmp	r2, #0
 80098be:	d0f9      	beq.n	80098b4 <_strtoul_l.constprop.0+0xb8>
 80098c0:	b107      	cbz	r7, 80098c4 <_strtoul_l.constprop.0+0xc8>
 80098c2:	1e69      	subs	r1, r5, #1
 80098c4:	6011      	str	r1, [r2, #0]
 80098c6:	e7f5      	b.n	80098b4 <_strtoul_l.constprop.0+0xb8>
 80098c8:	2430      	movs	r4, #48	; 0x30
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1b5      	bne.n	800983a <_strtoul_l.constprop.0+0x3e>
 80098ce:	2308      	movs	r3, #8
 80098d0:	e7b3      	b.n	800983a <_strtoul_l.constprop.0+0x3e>
 80098d2:	2c30      	cmp	r4, #48	; 0x30
 80098d4:	d0a9      	beq.n	800982a <_strtoul_l.constprop.0+0x2e>
 80098d6:	230a      	movs	r3, #10
 80098d8:	e7af      	b.n	800983a <_strtoul_l.constprop.0+0x3e>
 80098da:	bf00      	nop
 80098dc:	0800a0d7 	.word	0x0800a0d7

080098e0 <_strtoul_r>:
 80098e0:	f7ff bf8c 	b.w	80097fc <_strtoul_l.constprop.0>

080098e4 <__ascii_wctomb>:
 80098e4:	b149      	cbz	r1, 80098fa <__ascii_wctomb+0x16>
 80098e6:	2aff      	cmp	r2, #255	; 0xff
 80098e8:	bf85      	ittet	hi
 80098ea:	238a      	movhi	r3, #138	; 0x8a
 80098ec:	6003      	strhi	r3, [r0, #0]
 80098ee:	700a      	strbls	r2, [r1, #0]
 80098f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80098f4:	bf98      	it	ls
 80098f6:	2001      	movls	r0, #1
 80098f8:	4770      	bx	lr
 80098fa:	4608      	mov	r0, r1
 80098fc:	4770      	bx	lr
	...

08009900 <fiprintf>:
 8009900:	b40e      	push	{r1, r2, r3}
 8009902:	b503      	push	{r0, r1, lr}
 8009904:	4601      	mov	r1, r0
 8009906:	ab03      	add	r3, sp, #12
 8009908:	4805      	ldr	r0, [pc, #20]	; (8009920 <fiprintf+0x20>)
 800990a:	f853 2b04 	ldr.w	r2, [r3], #4
 800990e:	6800      	ldr	r0, [r0, #0]
 8009910:	9301      	str	r3, [sp, #4]
 8009912:	f7ff fa33 	bl	8008d7c <_vfiprintf_r>
 8009916:	b002      	add	sp, #8
 8009918:	f85d eb04 	ldr.w	lr, [sp], #4
 800991c:	b003      	add	sp, #12
 800991e:	4770      	bx	lr
 8009920:	20000070 	.word	0x20000070

08009924 <abort>:
 8009924:	b508      	push	{r3, lr}
 8009926:	2006      	movs	r0, #6
 8009928:	f000 f834 	bl	8009994 <raise>
 800992c:	2001      	movs	r0, #1
 800992e:	f7f8 feb3 	bl	8002698 <_exit>

08009932 <_malloc_usable_size_r>:
 8009932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009936:	1f18      	subs	r0, r3, #4
 8009938:	2b00      	cmp	r3, #0
 800993a:	bfbc      	itt	lt
 800993c:	580b      	ldrlt	r3, [r1, r0]
 800993e:	18c0      	addlt	r0, r0, r3
 8009940:	4770      	bx	lr

08009942 <_raise_r>:
 8009942:	291f      	cmp	r1, #31
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	4604      	mov	r4, r0
 8009948:	460d      	mov	r5, r1
 800994a:	d904      	bls.n	8009956 <_raise_r+0x14>
 800994c:	2316      	movs	r3, #22
 800994e:	6003      	str	r3, [r0, #0]
 8009950:	f04f 30ff 	mov.w	r0, #4294967295
 8009954:	bd38      	pop	{r3, r4, r5, pc}
 8009956:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009958:	b112      	cbz	r2, 8009960 <_raise_r+0x1e>
 800995a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800995e:	b94b      	cbnz	r3, 8009974 <_raise_r+0x32>
 8009960:	4620      	mov	r0, r4
 8009962:	f000 f831 	bl	80099c8 <_getpid_r>
 8009966:	462a      	mov	r2, r5
 8009968:	4601      	mov	r1, r0
 800996a:	4620      	mov	r0, r4
 800996c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009970:	f000 b818 	b.w	80099a4 <_kill_r>
 8009974:	2b01      	cmp	r3, #1
 8009976:	d00a      	beq.n	800998e <_raise_r+0x4c>
 8009978:	1c59      	adds	r1, r3, #1
 800997a:	d103      	bne.n	8009984 <_raise_r+0x42>
 800997c:	2316      	movs	r3, #22
 800997e:	6003      	str	r3, [r0, #0]
 8009980:	2001      	movs	r0, #1
 8009982:	e7e7      	b.n	8009954 <_raise_r+0x12>
 8009984:	2400      	movs	r4, #0
 8009986:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800998a:	4628      	mov	r0, r5
 800998c:	4798      	blx	r3
 800998e:	2000      	movs	r0, #0
 8009990:	e7e0      	b.n	8009954 <_raise_r+0x12>
	...

08009994 <raise>:
 8009994:	4b02      	ldr	r3, [pc, #8]	; (80099a0 <raise+0xc>)
 8009996:	4601      	mov	r1, r0
 8009998:	6818      	ldr	r0, [r3, #0]
 800999a:	f7ff bfd2 	b.w	8009942 <_raise_r>
 800999e:	bf00      	nop
 80099a0:	20000070 	.word	0x20000070

080099a4 <_kill_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d07      	ldr	r5, [pc, #28]	; (80099c4 <_kill_r+0x20>)
 80099a8:	2300      	movs	r3, #0
 80099aa:	4604      	mov	r4, r0
 80099ac:	4608      	mov	r0, r1
 80099ae:	4611      	mov	r1, r2
 80099b0:	602b      	str	r3, [r5, #0]
 80099b2:	f7f8 fe61 	bl	8002678 <_kill>
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	d102      	bne.n	80099c0 <_kill_r+0x1c>
 80099ba:	682b      	ldr	r3, [r5, #0]
 80099bc:	b103      	cbz	r3, 80099c0 <_kill_r+0x1c>
 80099be:	6023      	str	r3, [r4, #0]
 80099c0:	bd38      	pop	{r3, r4, r5, pc}
 80099c2:	bf00      	nop
 80099c4:	20000598 	.word	0x20000598

080099c8 <_getpid_r>:
 80099c8:	f7f8 be4e 	b.w	8002668 <_getpid>

080099cc <round>:
 80099cc:	ec53 2b10 	vmov	r2, r3, d0
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80099d6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80099da:	2813      	cmp	r0, #19
 80099dc:	ee10 5a10 	vmov	r5, s0
 80099e0:	4619      	mov	r1, r3
 80099e2:	dc18      	bgt.n	8009a16 <round+0x4a>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	da09      	bge.n	80099fc <round+0x30>
 80099e8:	3001      	adds	r0, #1
 80099ea:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80099ee:	d103      	bne.n	80099f8 <round+0x2c>
 80099f0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80099f4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80099f8:	2300      	movs	r3, #0
 80099fa:	e02a      	b.n	8009a52 <round+0x86>
 80099fc:	4c16      	ldr	r4, [pc, #88]	; (8009a58 <round+0x8c>)
 80099fe:	4104      	asrs	r4, r0
 8009a00:	ea03 0604 	and.w	r6, r3, r4
 8009a04:	4316      	orrs	r6, r2
 8009a06:	d011      	beq.n	8009a2c <round+0x60>
 8009a08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a0c:	4103      	asrs	r3, r0
 8009a0e:	440b      	add	r3, r1
 8009a10:	ea23 0104 	bic.w	r1, r3, r4
 8009a14:	e7f0      	b.n	80099f8 <round+0x2c>
 8009a16:	2833      	cmp	r0, #51	; 0x33
 8009a18:	dd0b      	ble.n	8009a32 <round+0x66>
 8009a1a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009a1e:	d105      	bne.n	8009a2c <round+0x60>
 8009a20:	ee10 0a10 	vmov	r0, s0
 8009a24:	f7f6 fc62 	bl	80002ec <__adddf3>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	ec43 2b10 	vmov	d0, r2, r3
 8009a30:	bd70      	pop	{r4, r5, r6, pc}
 8009a32:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8009a36:	f04f 34ff 	mov.w	r4, #4294967295
 8009a3a:	40f4      	lsrs	r4, r6
 8009a3c:	4214      	tst	r4, r2
 8009a3e:	d0f5      	beq.n	8009a2c <round+0x60>
 8009a40:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8009a44:	2301      	movs	r3, #1
 8009a46:	4083      	lsls	r3, r0
 8009a48:	195b      	adds	r3, r3, r5
 8009a4a:	bf28      	it	cs
 8009a4c:	3101      	addcs	r1, #1
 8009a4e:	ea23 0304 	bic.w	r3, r3, r4
 8009a52:	461a      	mov	r2, r3
 8009a54:	460b      	mov	r3, r1
 8009a56:	e7e9      	b.n	8009a2c <round+0x60>
 8009a58:	000fffff 	.word	0x000fffff

08009a5c <_init>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	bf00      	nop
 8009a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a62:	bc08      	pop	{r3}
 8009a64:	469e      	mov	lr, r3
 8009a66:	4770      	bx	lr

08009a68 <_fini>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	bf00      	nop
 8009a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6e:	bc08      	pop	{r3}
 8009a70:	469e      	mov	lr, r3
 8009a72:	4770      	bx	lr
